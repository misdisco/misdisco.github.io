<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>G219特别锦集</title>
    <link href="/2024/12/30/G219%E7%89%B9%E5%88%AB%E9%94%A6%E9%9B%86/"/>
    <url>/2024/12/30/G219%E7%89%B9%E5%88%AB%E9%94%A6%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<video width="100%" height="500" controls autoplay>         <source src="/videos/G219特别锦集.mp4" type="video/mp4"></video><p>环华摩旅-G219视频锦集。</p>]]></content>
    
    
    <categories>
      
      <category>视频</category>
      
      <category>摩旅</category>
      
      <category>G219</category>
      
    </categories>
    
    
    <tags>
      
      <tag>摩旅</tag>
      
      <tag>G219</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022年度歌单</title>
    <link href="/2022/01/12/2022%E5%B9%B4%E5%BA%A6%E6%AD%8C%E5%8D%95/"/>
    <url>/2022/01/12/2022%E5%B9%B4%E5%BA%A6%E6%AD%8C%E5%8D%95/</url>
    
    <content type="html"><![CDATA[<!-- require APlayer --> <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"> <script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js"></script> <!-- require MetingJS --> <script src="https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js"></script> <p><meting-js server="netease" type="playlist" id="7638697042" autoplay="true" listmaxheight="400" theme="#3580BB"> </meting-js></p><p>linda! linda! linda! ~</p>]]></content>
    
    
    <categories>
      
      <category>歌单</category>
      
      <category>2022</category>
      
    </categories>
    
    
    <tags>
      
      <tag>摇滚</tag>
      
      <tag>歌单</tag>
      
      <tag>日本流行</tag>
      
      <tag>二次元</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kafka图文详解</title>
    <link href="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/"/>
    <url>/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Kafka概述"><a href="#1-Kafka概述" class="headerlink" title="1.Kafka概述"></a>1.Kafka概述</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h3><p><strong>Kafka传统定义</strong>： Kafka是一个<a href="https://so.csdn.net/so/search?q=%E5%88%86%E5%B8%83%E5%BC%8F&spm=1001.2101.3001.7020">分布式</a>的基于<strong>发布&#x2F;订阅模式</strong>的消息队列（Message Queue），主要应用于大数据实时处理领域。</p><p><strong>发布&#x2F;订阅</strong>：消息的发布者不会将消息直接发布给特定的订阅者，而是将发布的消息分为不同的类别，订阅者只接收感兴趣的消息。</p><p><strong>Kafka最新定义</strong>：Kafka是一个开源的分布式事件流平台（Event Streaming Platform），被数千家公司用于高性能的数据管道、流分析、数据集成和关键任务应用。</p><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/906bce249b1cbbc9ae8b997dcd1385fa.png" alt="在这里插入图片描述"></p><h3 id="2-消息队列"><a href="#2-消息队列" class="headerlink" title="2.消息队列"></a>2.消息队列</h3><p>目前企业中比较常见的消息队列产品主要有Kafka、ActiveMQ、RabbitMQ、RocketMQ等。</p><p>在大数据场景主要采用Kafka作为消息队列。在JavaEE开发中主要采用ActiveMQ、RabbitMQ、RocketMQ。</p><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/dc001c43ca89f66270a9bd3207f45046.png" alt="在这里插入图片描述"><br><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/775ea888eb8bba379756685e67f8e0d2.png" alt="在这里插入图片描述"></p><h3 id="3-目录结构分析"><a href="#3-目录结构分析" class="headerlink" title="3.目录结构分析"></a>3.目录结构分析</h3><ol><li>bin：Kafka的所有执行脚本都在这里。例如：启动Kafka服务器、创建Topic、生产者、消费者程序等等</li><li>config：Kafka的所有配置文件</li><li>libs： 运行Kafka所需要的所有JAR包</li><li>logs： Kafka的所有日志文件，如果Kafka出现一些问题，需要到该目录中去查看异常信息</li><li>site-docs： Kafka的网站帮助文件</li></ol><h3 id="4-传统消息队列的应用场景"><a href="#4-传统消息队列的应用场景" class="headerlink" title="4.传统消息队列的应用场景"></a>4.传统消息队列的应用场景</h3><p>传统的消息队列的主要应用场景包括**：缓存&#x2F;消峰、解耦<strong>和</strong>异步通信**。</p><p><strong>缓冲&#x2F;消峰</strong>： 有助于控制和优化数据流经过系统的速度，解决生产消息和消费消息的处理速度不一致的情况。</p><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/ababb730a485aebb248c5f268fa2e370.png" alt="在这里插入图片描述"><br><strong>解耦</strong>：允许你独立的扩展或修改两边的处理过程，只要确保它们遵守同样的接口约束。</p><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/4eb0e7cdfb91e30cbb24cba0793b40a3.png" alt="在这里插入图片描述"><br><strong>异步通信</strong>：允许用户把一个消息放入队列，但并不立即处理它，然后再需要的时候再去处理它们。</p><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/a96a99a3e0d83dac95c227d4852cf69f.png" alt="在这里插入图片描述"></p><h3 id="5-消息队列的两种模式"><a href="#5-消息队列的两种模式" class="headerlink" title="5.消息队列的两种模式"></a>5.消息队列的两种模式</h3><h4 id="1-点对点模式"><a href="#1-点对点模式" class="headerlink" title="1.点对点模式"></a>1.点对点模式</h4><p>消费者主动拉去数据，消息收到后清除消息<br><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/8ee6ce31f137ae802b32246fc95de8ad.png" alt="在这里插入图片描述"></p><h4 id="2-发布-订阅模式"><a href="#2-发布-订阅模式" class="headerlink" title="2.发布&#x2F;订阅模式"></a>2.发布&#x2F;订阅模式</h4><ul><li>可以有多个topic主题(浏览，点赞，收藏，评论等)</li><li>消费者消费数据之后，不删除数据</li><li>每个消费者互相独立，都可以消费到数据</li></ul><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/6f7151f089a5a65d7650bbf3f520f5fb.png" alt="在这里插入图片描述"></p><h3 id="6-Kafka基础架构"><a href="#6-Kafka基础架构" class="headerlink" title="6.Kafka基础架构"></a>6.Kafka基础架构</h3><p>1、为方便扩展，并提高吞吐量，一个topic分为多个partition</p><p>2、配合分区的设计，提出消费者组的概念，组内每个消费者并行消费</p><p>3、为提高可用性，为每个partition增加若干副本，类似NameNode HA</p><p>4、ZK中记录谁是leader，Kafka2.8.0 以后也可以配置不采用ZK.</p><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/3e81aa826574fd5b283f8f40d62fea7f.png" alt="在这里插入图片描述"></p><ul><li><strong>Producer</strong>：消息生产者，就是向Kafka broker 发消息的客户端。</li><li><strong>Consumer</strong>：消息消费者，向Kafka broker 取消息的客户端。</li><li><strong>Consumer Group（CG）</strong>：消费者组，由多个consumer组成。消费者组内每个消费者负责消费不同分区的数据，一个分区只能由一个组内消费者消费；消费者组之间互不影响。所有的消费者都属于某个消费者组，即消费者组是逻辑上的一个订阅者。</li><li><strong>Broker</strong>：一台Kafka服务器就是一个broker。一个集群由多个broker组成。一个broker可以容纳多个topic。</li><li><strong>Topic</strong>： 可以理解为一个队列，生产者和消费者面向的都是一个topic。</li><li><strong>Partition</strong>： 为了实现扩展性，一个非常大的topic可以分布到多个broker（即服务器）上，一个topic可以分为多个partition，每个partition是一个有序的队列。</li><li><strong>Replica</strong>：副本。一个topic的每个分区都有若干个副本，一个Leader和若干个Follower。</li><li><strong>Leader</strong>：每个分区多个副本的 “主”，生产者发送数据的对象，以及消费者消费数据的对象都是Leader。</li><li><strong>Follower</strong>：每个分区多个副本中的 “从”，实时从 Leader 中同步数据，保持和 Leader 数据的同步。Leader 发生故障时，某个Follower会成为新的 Leader。</li></ul><h2 id="2-Kafka快速入门"><a href="#2-Kafka快速入门" class="headerlink" title="2.Kafka快速入门"></a>2.Kafka快速入门</h2><h3 id="1-安装部署"><a href="#1-安装部署" class="headerlink" title="1.安装部署"></a>1.安装部署</h3><h4 id="1-集群规划"><a href="#1-集群规划" class="headerlink" title="1.集群规划"></a>1.集群规划</h4><table><thead><tr><th>Hadoop102</th><th>Hadoop103</th><th>Hadoop104</th></tr></thead><tbody><tr><td>zk</td><td>zk</td><td>zk</td></tr><tr><td>kafka</td><td>kafka</td><td>kafka</td></tr></tbody></table><h4 id="2-集群部署"><a href="#2-集群部署" class="headerlink" title="2.集群部署"></a>2.集群部署</h4><ol><li><p>docker部署zk集群：参考《<a href="https://blog.csdn.net/General_zy/article/details/129233373">zk全解</a>》</p></li><li><p>进入到&#x2F;usr&#x2F;local&#x2F;kafka目录，修改配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim server.properties <br><br><br><span class="hljs-comment">#broker 的全局唯一编号，不能重复，只能是数字。</span><br>broker.id=0<br><span class="hljs-comment">#处理网络请求的线程数量</span><br>num.network.threads=3<br><span class="hljs-comment">#用来处理磁盘 IO 的线程数量</span><br>num.io.threads=8<br><span class="hljs-comment">#发送套接字的缓冲区大小</span><br>socket.send.buffer.bytes=102400<br><span class="hljs-comment">#接收套接字的缓冲区大小</span><br>socket.receive.buffer.bytes=102400<br><span class="hljs-comment">#请求套接字的缓冲区大小</span><br>socket.request.max.bytes=104857600<br><span class="hljs-comment">#kafka 运行日志(数据)存放的路径，路径不需要提前创建，kafka 自动帮你创建，可以</span><br><span class="hljs-comment"># 配置多个磁盘路径，路径与路径之间可以用&quot;，&quot;分隔</span><br>log.dirs=/opt/module/kafka/datas<br><span class="hljs-comment"># 监听所有网卡地址，允许外部端口连接     </span><br>listeners=PLAINTEXT://0.0.0.0:9092 <br><span class="hljs-comment">#topic 在当前 broker 上的分区个数</span><br>num.partitions=1<br><span class="hljs-comment">#用来恢复和清理 data 下数据的线程数量</span><br>num.recovery.threads.per.data.dir=1<br><span class="hljs-comment"># 每个 topic 创建时的副本数，默认时 1 个副本</span><br>offsets.topic.replication.factor=1<br><span class="hljs-comment">#segment 文件保留的最长时间，超时将被删除</span><br>log.retention.hours=168<br><span class="hljs-comment">#每个 segment 文件的大小，默认最大 1G</span><br>log.segment.bytes=1073741824<br><span class="hljs-comment"># 检查过期数据的时间，默认 5 分钟检查一次是否数据过期</span><br>log.retention.check.interval.ms=300000<br><span class="hljs-comment">#配置连接 Zookeeper 集群地址（在 zk 根目录下创建/kafka，方便管理）</span><br>zookeeper.connect=hadoop102:2181,hadoop103:2181,hadoop104:2181/kafka<br></code></pre></td></tr></table></figure><p>可以提前在hosts文件中配置master,slave1,slave2的ip，之前在学习k8s的时候我已经配置过了，可以直接拿来用。</p><p><code>listeners=PLAINTEXT://0.0.0.0:9092 </code>，默认情况下,advertised.listeners不设置的话,则默认使用listeners的属性,然而advertised.listeners是不支持0.0.0.0的，所以需要指定暴露的监听器,<a href="https://zhuanlan.zhihu.com/p/497943409">如下</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">listeners=PLAINTEXT://0.0.0.0:9092<br>advertised.listeners=PLAINTEXT://虚拟机ip:9092<br></code></pre></td></tr></table></figure></li><li><p>将安装包拷贝到其他服务器</p></li><li><p>分别在hadoop103和hadoop104 上修改配置文件<code>/opt/module/kafka/config/server.properties</code>中的 <code>broker.id=1</code>、<code>broker.id=2</code></p></li><li><p>配置环境变量</p><ol><li>在&#x2F;etc&#x2F;profile.d&#x2F;my_env.sh 文件中增加 kafka 环境变量配置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> vim /etc/profile.d/my_env.sh<br>增加如下内容：<br><span class="hljs-comment">#KAFKA_HOME</span><br><span class="hljs-built_in">export</span> KAFKA_HOME=/opt/module/kafka<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$KAFKA_HOME</span>/bin<br></code></pre></td></tr></table></figure><p>这里我将kafka直接放在了根目录下的一个文件夹，更加方便：</p><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/2477d3d9ca99097594ba81803ef972f9.png" alt="在这里插入图片描述"></p><ol><li>刷新一下环境变量。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><ol><li>分发环境变量文件到其他节点，并 source。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> /home/atguigu/bin/xsync /etc/profile.d/my_env.sh<br><span class="hljs-built_in">source</span> /etc/profile<br><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure></li><li><p>分别启动kafka：</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bin/kafka-server-start.sh -daemon config/server.properties<br></code></pre></td></tr></table></figure><ol><li><strong>如果遇到cluser_id不符合的问题，直接将日志文件删除重新启动即可。</strong></li></ol><h4 id="3-集群启停脚本"><a href="#3-集群启停脚本" class="headerlink" title="3.集群启停脚本"></a>3.集群启停脚本</h4><ol><li>脚本如下，</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/bash</span><br><span class="hljs-keyword">case</span> <span class="hljs-variable">$1</span> <span class="hljs-keyword">in</span><br><span class="hljs-string">&quot;start&quot;</span>)&#123;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> hadoop102 hadoop103 hadoop104<br><span class="hljs-keyword">do</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot; --------启动 <span class="hljs-variable">$i</span> Kafka-------&quot;</span><br>ssh <span class="hljs-variable">$i</span> <span class="hljs-string">&quot;/opt/module/kafka/bin/kafka-server-start.sh -</span><br><span class="hljs-string">daemon /opt/module/kafka/config/server.properties&quot;</span><br><span class="hljs-keyword">done</span><br>&#125;;;<br><span class="hljs-string">&quot;stop&quot;</span>)&#123;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> hadoop102 hadoop103 hadoop104<br><span class="hljs-keyword">do</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot; --------停止 <span class="hljs-variable">$i</span> Kafka-------&quot;</span><br>ssh <span class="hljs-variable">$i</span> <span class="hljs-string">&quot;/opt/module/kafka/bin/kafka-server-stop.sh &quot;</span><br><span class="hljs-keyword">done</span><br>&#125;;;<br><span class="hljs-keyword">esac</span><br></code></pre></td></tr></table></figure><ol><li>添加执行权限</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x kf.sh<br></code></pre></td></tr></table></figure><ol><li>启动集群命令</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kf.sh start<br></code></pre></td></tr></table></figure><ol><li>停止集群命令</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kf.sh stop<br></code></pre></td></tr></table></figure><h3 id="2-Kafka命令行操作"><a href="#2-Kafka命令行操作" class="headerlink" title="2.Kafka命令行操作"></a>2.Kafka命令行操作</h3><h4 id="1-Kafka基础架构"><a href="#1-Kafka基础架构" class="headerlink" title="1.Kafka基础架构"></a>1.Kafka基础架构</h4><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/3cd0a18fe931bc46190062a224017724.png" alt="在这里插入图片描述"></p><h4 id="2-主题命令行操作"><a href="#2-主题命令行操作" class="headerlink" title="2.主题命令行操作"></a>2.主题命令行操作</h4><ol><li><p>查看操作主题命令参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./bin/kafka-topics.sh <br></code></pre></td></tr></table></figure><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/f0aedc6fdc7d9302d286dcc79f41ecb5.png" alt="在这里插入图片描述"></p></li><li><p>查看当前服务器中的所有topic</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./bin/kafka-topics.sh --bootstrap-server localhost:9092 --list<br></code></pre></td></tr></table></figure></li><li><p>创建 <code>first topic</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./bin/kafka-topics.sh --bootstrap-server localhost:9092 --create --partitions 1 --replication-factor 1 --topic first<br></code></pre></td></tr></table></figure><p>选项说明：</p><ol><li>–topic 定义 topic 名</li><li>–replication-factor 定义副本数</li><li>–partitions 定义分区数</li></ol></li><li><p>查看 <code>first</code> 主题的详情</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./bin/kafka-topics.sh --bootstrap-server localhost:9092 --topic first --describe<br></code></pre></td></tr></table></figure></li><li><p>修改分区数（注意：分区数只能增加，不能减少）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./bin/kafka-topics.sh --bootstrap-server localhost:9092 --alter --topic first --partitions 3<br></code></pre></td></tr></table></figure></li><li><p>查看结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">./bin/kafka-topics.sh --bootstrap-server localhost:9092 --topic first --describe <br>Topic: firstTopicId: _Pjhmn1NTr6ufGufcnsw5APartitionCount: 3ReplicationFactor: 1Configs: segment.bytes=1073741824<br>Topic: firstPartition: 0Leader: 0Replicas: 0Isr: 0<br>Topic: firstPartition: 1Leader: 0Replicas: 0Isr: 0<br>Topic: firstPartition: 2Leader: 0Replicas: 0Isr: 0<br></code></pre></td></tr></table></figure></li><li><p>删除 <code>topic</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./bin/kafka-topics.sh --bootstrap-server localhost:9092 --delete --topic first <br></code></pre></td></tr></table></figure></li></ol><h4 id="3-生产者命令行操作"><a href="#3-生产者命令行操作" class="headerlink" title="3.生产者命令行操作"></a>3.生产者命令行操作</h4><ol><li><p>查看操作者命令参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./bin/kafka-console-producer.sh <br></code></pre></td></tr></table></figure><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/03d67db58796e57288421c6d5022403e.png" alt="在这里插入图片描述"></p></li><li><p>发送消息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">./bin/kafka-console-producer.sh --bootstrap-server localhost:9092 --topic first<br>&gt;hello world<br>&gt;yooome yooome<br></code></pre></td></tr></table></figure></li></ol><h4 id="4-消费者命令行操作"><a href="#4-消费者命令行操作" class="headerlink" title="4.消费者命令行操作"></a>4.消费者命令行操作</h4><ol><li><p>查看操作消费者命令参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./bin/kafka-console-consumer.sh<br></code></pre></td></tr></table></figure><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/4fe7e82fd398c8effe4a0bf158c04168.png" alt="在这里插入图片描述"></p></li><li><p>消费消息</p><ol><li>消费<code>first</code> 主题中的数据：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic first<br></code></pre></td></tr></table></figure><ol><li>把主题中所有的数据都读取出来（包括历史数据）。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --from-beginning --topic first<br></code></pre></td></tr></table></figure><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/fa1f1f0d1cd681bed6a2aa3d018fc1e6.png" alt="在这里插入图片描述"></p></li></ol><h2 id="3-kafka可视化工具"><a href="#3-kafka可视化工具" class="headerlink" title="3.kafka可视化工具"></a>3.kafka可视化工具</h2><p>官网：<a href="https://www.kafkatool.com/download.html">https://www.kafkatool.com/download.html</a></p><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/99b2525ea467bc8aa70967a639e6b38e.png" alt="在这里插入图片描述"></p><h2 id="4-Kafka重要概念"><a href="#4-Kafka重要概念" class="headerlink" title="4.Kafka重要概念"></a>4.Kafka重要概念</h2><h3 id="1-broker"><a href="#1-broker" class="headerlink" title="1.broker"></a>1.broker</h3><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/fd2860c8a407a1c8455b87e593664a3e.png" alt="在这里插入图片描述"></p><ol><li>一个Kafka的集群通常由多个broker组成，这样才能实现负载均衡、以及容错</li><li>broker是无状态（Sateless）的，它们是通过ZooKeeper来维护集群状态</li><li>一个Kafka的broker每秒可以处理数十万次读写，每个broker都可以处理TB消息而不影响性能</li></ol><h3 id="2-zookeeper"><a href="#2-zookeeper" class="headerlink" title="2.zookeeper"></a>2.zookeeper</h3><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/af50815805ae6fe09a9b7f761baffb3a.png" alt="在这里插入图片描述"></p><ol><li>ZK用来管理和协调broker，并且存储了Kafka的元数据（例如：有多少topic、partition、consumer）</li><li>ZK服务主要用于通知生产者和消费者Kafka集群中有新的broker加入、或者Kafka集群中出现故障的broker。</li><li>Kafka正在逐步想办法将ZooKeeper剥离，维护两套集群成本较高，社区提出KIP-500就是要替换掉ZooKeeper的依赖。“Kafka on Kafka”——Kafka自己来管理自己的元数据</li></ol><h3 id="3-producer（生产者）"><a href="#3-producer（生产者）" class="headerlink" title="3.producer（生产者）"></a>3.producer（生产者）</h3><p>生产者负责将数据推送给broker的topic</p><h3 id="4-consumer（消费者）"><a href="#4-consumer（消费者）" class="headerlink" title="4.consumer（消费者）"></a>4.consumer（消费者）</h3><p>消费者负责从broker的topic中拉取数据，并自己进行处理</p><h3 id="5-consumer-group（消费者组）"><a href="#5-consumer-group（消费者组）" class="headerlink" title="5.consumer group（消费者组）"></a>5.consumer group（消费者组）</h3><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/c15b786773c8948eaff37dfa6aafc150.png" alt="在这里插入图片描述"></p><ol><li>consumer group是kafka提供的可扩展且具有容错性的消费者机制</li><li>一个消费者组可以包含多个消费者</li><li>一个消费者组有一个唯一的ID（group Id）</li><li>组内的消费者一起消费主题的所有分区数据</li></ol><h3 id="6-分区（Partitions）"><a href="#6-分区（Partitions）" class="headerlink" title="6.分区（Partitions）"></a>6.分区（Partitions）</h3><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/257373e461458d54bbb731dcdaffe464.png" alt="在这里插入图片描述"><br>在Kafka集群中，主题被分为多个分区</p><h3 id="7-副本（Replicas）"><a href="#7-副本（Replicas）" class="headerlink" title="7.副本（Replicas）"></a>7.副本（Replicas）</h3><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/264cd01a8be5197f2f9cfb933f0b0a11.png" alt="在这里插入图片描述"><br>副本可以确保某个服务器出现故障时，确保数据依然可用，在Kafka中，一般都会设计副本的个数＞1，</p><h3 id="8-主题（Topic）"><a href="#8-主题（Topic）" class="headerlink" title="8.主题（Topic）"></a>8.主题（Topic）</h3><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/731f57d1c7d927260d7ad2103ab14e43.png" alt="在这里插入图片描述"></p><ol><li>主题是一个逻辑概念，用于生产者发布数据，消费者拉取数据</li><li>Kafka中的主题必须要有标识符，而且是唯一的，Kafka中可以有任意数量的主题，没有数量上的限制</li><li>在主题中的消息是有结构的，一般一个主题包含某一类消息</li><li>一旦生产者发送消息到主题中，这些消息就不能被更新（更改）</li></ol><h3 id="9-偏移量（offset）"><a href="#9-偏移量（offset）" class="headerlink" title="9.偏移量（offset）"></a>9.偏移量（offset）</h3><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/f4be83bbda3f66abf9942497f8aaed13.png" alt="在这里插入图片描述"></p><ol><li>offset记录着下一条将要发送给Consumer的消息的序号</li><li>默认Kafka将offset存储在ZooKeeper中</li><li>在一个分区中，消息是有顺序的方式存储着，每个在分区的消费都是有一个递增的id。这个就是偏移量offset</li><li>偏移量在分区中才是有意义的。在分区之间，offset是没有任何意义的</li></ol><h3 id="10-消费者组"><a href="#10-消费者组" class="headerlink" title="10.消费者组"></a>10.消费者组</h3><ol><li>Kafka支持有多个消费者同时消费一个主题中的数据。<br><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/d64a9410f0b1eabd2f46a00a39e2160a.png" alt="在这里插入图片描述"></li><li>同时运行两个消费者，我们发现，只有一个消费者程序能够拉取到消息。想要让两个消费者同时消费消息，必须要给test主题，添加一个分区。</li><li>设置 test topic为2个分区<code>bin/kafka-topics.sh --zookeeper 192.168.88.100:2181 -alter --partitions 2 --topic test</code></li></ol><h2 id="5-Kafka生产者"><a href="#5-Kafka生产者" class="headerlink" title="5.Kafka生产者"></a>5.Kafka生产者</h2><h3 id="1-生产者消息发送流程"><a href="#1-生产者消息发送流程" class="headerlink" title="1.生产者消息发送流程"></a>1.生产者消息发送流程</h3><h4 id="1-发送原理"><a href="#1-发送原理" class="headerlink" title="1.发送原理"></a>1.发送原理</h4><p>在消息发送的过程中，涉及到了两个线程 — main 线程和Sender线程。在main线程中创建了一个双端队列 RecordAccumulator。main线程将消息发送给ResordAccumlator，Sender线程不断从 RecordAccumulator 中拉去消息发送到 Kafka Broker。<br><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/5111e03b87600564e203e56aa0cdbee0.png" alt="在这里插入图片描述"></p><h4 id="2-生产者重要参数列表"><a href="#2-生产者重要参数列表" class="headerlink" title="2.生产者重要参数列表"></a>2.生产者重要参数列表</h4><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/2cf741eed8b6394fc92bc79236e2b784.png" alt="在这里插入图片描述"></p><h4 id="3-异步发送API"><a href="#3-异步发送API" class="headerlink" title="3.异步发送API"></a>3.异步发送API</h4><h5 id="1-普通异步发送"><a href="#1-普通异步发送" class="headerlink" title="1.普通异步发送"></a>1.普通异步发送</h5><ol><li>需求：创建Kafka生产者，采用异步的方式发送到Kafka Broker。</li></ol><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/87c451026a4f86207d6f93386c748725.png" alt="在这里插入图片描述"><br>2、代码编程<code>go get github.com/Shopify/sarama</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>config := sarama.NewConfig()<br>config.Producer.RequiredAcks = sarama.WaitForAll          <span class="hljs-comment">// 发送完数据需要leader和follow都确认</span><br>config.Producer.Partitioner = sarama.NewRandomPartitioner <span class="hljs-comment">// 新选出一个partition</span><br>config.Producer.Return.Successes = <span class="hljs-literal">true</span>                   <span class="hljs-comment">// 成功交付的消息将在success channel返回</span><br><br><span class="hljs-comment">// 构造一个消息</span><br>msg := &amp;sarama.ProducerMessage&#123;&#125;<br>msg.Topic = <span class="hljs-string">&quot;first&quot;</span><br>msg.Value = sarama.StringEncoder(<span class="hljs-string">&quot;this is a test log&quot;</span>)<br><span class="hljs-comment">// 连接kafka</span><br>client, err := sarama.NewSyncProducer([]<span class="hljs-type">string</span>&#123;<br><span class="hljs-string">&quot;192.168.71.128:9092&quot;</span>, <span class="hljs-string">&quot;192.168.71.129:9092&quot;</span>, <span class="hljs-string">&quot;192.168.71.130:9092&quot;</span>,<br>&#125;, config)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;producer closed, err:&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>fmt.Println(client)<br>&#125;<br><span class="hljs-keyword">defer</span> client.Close()<br><span class="hljs-comment">// 发送消息</span><br>pid, offset, err := client.SendMessage(msg)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;send msg failed, err:&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;pid:%v offset:%v\n&quot;</span>, pid, offset)<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-带回调函数的异步发送"><a href="#2-带回调函数的异步发送" class="headerlink" title="2.带回调函数的异步发送"></a>2.带回调函数的异步发送</h5><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/1be77791de567cdfd7e4478c1f591670.png" alt="在这里插入图片描述"><br>【注意:】消息发送失败会自动重试，不需要我们在回调函数中手动重试。</p><h4 id="4-同步发送API"><a href="#4-同步发送API" class="headerlink" title="4.同步发送API"></a>4.同步发送API</h4><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/5392e6ab20370a6ec3602ff05cd06c33.png" alt="在这里插入图片描述"></p><h3 id="2-生产者分区"><a href="#2-生产者分区" class="headerlink" title="2.生产者分区"></a>2.生产者分区</h3><h4 id="1-分区和副本机制"><a href="#1-分区和副本机制" class="headerlink" title="1.分区和副本机制"></a>1.分区和副本机制</h4><p>生产者写入消息到topic，Kafka将依据不同的策略将数据分配到不同的分区中</p><ol><li>轮询分区策略</li><li>随机分区策略</li><li>按key分区分配策略</li><li>自定义分区策略</li></ol><h4 id="2-分区好处"><a href="#2-分区好处" class="headerlink" title="2.分区好处"></a>2.分区好处</h4><ol><li><strong>便于合理使用存储资源</strong>，每个Partition在一个Broker上存储，可以把海量的数据按照分区切割成一块一块数据存储在多台Broker上。合理控制分区的任务，可以实现<strong>负载均衡</strong>的效果。</li><li><strong>提高并行度</strong>，生产者可以以分区为单位<strong>发送数据</strong>；消费者可以以分区为单位进行 <strong>消费数据</strong>。</li></ol><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/97204b7121dda1e379a42ed3de9affc1.png" alt="在这里插入图片描述"></p><h5 id="1-轮询策略"><a href="#1-轮询策略" class="headerlink" title="1.轮询策略"></a>1.轮询策略</h5><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/fcc23d65f2ea0aed2c39ae9cc19291e9.png" alt="在这里插入图片描述"></p><ol><li>默认的策略，也是使用最多的策略，可以最大限度保证所有消息平均分配到一个分区</li><li>如果在生产消息时，key为null，则使用轮询算法均衡地分配分区</li></ol><h5 id="2-随机策略（不用）"><a href="#2-随机策略（不用）" class="headerlink" title="2.随机策略（不用）"></a>2.随机策略（不用）</h5><p>随机策略，每次都随机地将消息分配到每个分区。在较早的版本，默认的分区策略就是随机策略，也是为了将消息均衡地写入到每个分区。但后续轮询策略表现更佳，所以基本上很少会使用随机策略。</p><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/1fb371068db9ca95da02fd556c250800.png" alt="在这里插入图片描述"></p><h5 id="3-按key分配策略"><a href="#3-按key分配策略" class="headerlink" title="3.按key分配策略"></a>3.按key分配策略</h5><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/330e8dafc531d1c690cfdb1b546b73ce.png" alt="在这里插入图片描述"><br>按key分配策略，有可能会出现「数据倾斜」，例如：某个key包含了大量的数据，因为key值一样，所有所有的数据将都分配到一个分区中，造成该分区的消息数量远大于其他的分区。</p><h5 id="4-乱序问题"><a href="#4-乱序问题" class="headerlink" title="4.乱序问题"></a>4.乱序问题</h5><p>轮询策略、随机策略都会导致一个问题，生产到Kafka中的数据是乱序存储的。而按key分区可以一定程度上实现数据有序存储——也就是局部有序，但这又可能会导致数据倾斜，所以在实际生产环境中要结合实际情况来做取舍。</p><h3 id="3-副本机制"><a href="#3-副本机制" class="headerlink" title="3.副本机制"></a>3.副本机制</h3><p>副本的目的就是冗余备份，当某个Broker上的分区数据丢失时，依然可以保障数据可用。因为在其他的Broker上的副本是可用的。</p><h4 id="1-producer的ACKs参数"><a href="#1-producer的ACKs参数" class="headerlink" title="1.producer的ACKs参数"></a>1.producer的ACKs参数</h4><p>对副本关系较大的就是，producer配置的acks参数了,acks参数表示当生产者生产消息的时候，写入到副本的要求严格程度。它决定了生产者如何在性能和可靠性之间做取舍。</p><h4 id="2-acks配置为0"><a href="#2-acks配置为0" class="headerlink" title="2.acks配置为0"></a>2.acks配置为0</h4><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/fc38d235935fbcd1d49aa6dc92402da1.png" alt="在这里插入图片描述"></p><h4 id="3-acks配置为1"><a href="#3-acks配置为1" class="headerlink" title="3.acks配置为1"></a>3.acks配置为1</h4><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/003eca64b26bf41ee2a7406601e18686.png" alt="在这里插入图片描述"><br>当生产者的ACK配置为1时，生产者会等待leader副本确认接收后，才会发送下一条数据，性能中等。</p><h4 id="4-acks配置为-1或者all"><a href="#4-acks配置为-1或者all" class="headerlink" title="4.acks配置为-1或者all"></a>4.acks配置为-1或者all</h4><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/cdadf11ef8d0a83b5b851f4b5e9041fa.png" alt="在这里插入图片描述"></p><h3 id="4-Kafka生产者幂等性与事务"><a href="#4-Kafka生产者幂等性与事务" class="headerlink" title="4.Kafka生产者幂等性与事务"></a>4.Kafka生产者幂等性与事务</h3><h4 id="1-幂等性"><a href="#1-幂等性" class="headerlink" title="1.幂等性"></a>1.幂等性</h4><p>拿http举例来说，一次或多次请求，得到地响应是一致的（网络超时等问题除外），换句话说，就是执行多次操作与执行一次操作的影响是一样的。</p><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/8ead5d3810004904aeb75112831fd5f9.png" alt="在这里插入图片描述"><br>如果，某个系统是不具备幂等性的，如果用户重复提交了某个表格，就可能会造成不良影响。例如：用户在浏览器上点击了多次提交订单按钮，会在后台生成多个一模一样的订单。</p><h4 id="2-Kafka生产者幂等性"><a href="#2-Kafka生产者幂等性" class="headerlink" title="2.Kafka生产者幂等性"></a>2.Kafka生产者幂等性</h4><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/7c8f33cc80567fb8be3adfd019f48a6e.png" alt="在这里插入图片描述"><br>在生产者生产消息时，如果出现retry时，有可能会一条消息被发送了多次，如果Kafka不具备幂等性的，就有可能会在partition中保存多条一模一样的消息。</p><h4 id="3-幂等性原理"><a href="#3-幂等性原理" class="headerlink" title="3.幂等性原理"></a>3.幂等性原理</h4><p>为了实现生产者的幂等性，Kafka引入了 Producer ID（PID）和 Sequence Number的概念。</p><ol><li>PID：每个Producer在初始化时，都会分配一个唯一的PID，这个PID对用户来说，是透明的。</li><li>Sequence Number：针对每个生产者（对应PID）发送到指定主题分区的消息都对应一个从0开始递增的Sequence Number。</li><li>幂等性只能保证的是<strong>在单分区单会话内不重复</strong></li></ol><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/cf672b6ef0e34e7c6ded4970f23caf87.png" alt="在这里插入图片描述"></p><h3 id="5-Kafka事务"><a href="#5-Kafka事务" class="headerlink" title="5.Kafka事务"></a>5.Kafka事务</h3><ol><li>Kafka事务是2017年Kafka 0.11.0.0引入的新特性。类似于数据库的事务。Kafka事务指的是生产者生产消息以及消费者提交offset的操作可以在一个原子操作中，要么都成功，要么都失败。尤其是在生产者、消费者并存时，事务的保障尤其重要。（consumer-transform-producer模式）</li><li>开启事务，必须开启幂等性</li></ol><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/4b5ad24d6ff154ceb716a5cf67ba276e.png" alt="在这里插入图片描述"></p><h4 id="1-事务操作API"><a href="#1-事务操作API" class="headerlink" title="1.事务操作API"></a>1.事务操作API</h4><p>Producer接口中定义了以下5个事务相关方法：</p><ol><li>initTransactions（初始化事务）：要使用Kafka事务，必须先进行初始化操作</li><li>beginTransaction（开始事务）：启动一个Kafka事务</li><li>sendOffsetsToTransaction（提交偏移量）：批量地将分区对应的offset发送到事务中，方便后续一块提交</li><li>commitTransaction（提交事务）：提交事务</li><li>abortTransaction（放弃事务）：取消事务</li></ol><h3 id="6-数据有序和数据乱序"><a href="#6-数据有序和数据乱序" class="headerlink" title="6.数据有序和数据乱序"></a>6.数据有序和数据乱序</h3><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/098d6831e948e0012c76f67a6c7741a3.png" alt="在这里插入图片描述"></p><h2 id="6-Kafka-Broker"><a href="#6-Kafka-Broker" class="headerlink" title="6.Kafka Broker"></a>6.Kafka Broker</h2><h3 id="1-Zookeeper存储的Kafka信息"><a href="#1-Zookeeper存储的Kafka信息" class="headerlink" title="1.Zookeeper存储的Kafka信息"></a>1.Zookeeper存储的Kafka信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[zk: localhost:2181(CONNECTING) 0] <span class="hljs-built_in">ls</span> /<br>[admin, brokers, cluster, config, consumers, controller, controller_epoch, feature, isr_change_notification, latest_producer_id_block, log_dir_event_notification, zookeeper]<br></code></pre></td></tr></table></figure><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/11a0a4adee05eeb511211bd3a0ac1a51.png" alt="在这里插入图片描述"></p><h3 id="2-Kafka-Broker总体工作流程"><a href="#2-Kafka-Broker总体工作流程" class="headerlink" title="2.Kafka Broker总体工作流程"></a>2.Kafka Broker总体工作流程</h3><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/438244fe18f7b17ab40012a2794d2e0e.png" alt="在这里插入图片描述"></p><h3 id="3-Broker重要参数"><a href="#3-Broker重要参数" class="headerlink" title="3.Broker重要参数"></a>3.Broker重要参数</h3><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/af8b4f36d3279c1555ba445c127ce256.png" alt="在这里插入图片描述"><br><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/f71a3b640964b79c9ca352b86798026d.png" alt="在这里插入图片描述"></p><h3 id="4-Kafka副本"><a href="#4-Kafka副本" class="headerlink" title="4.Kafka副本"></a>4.Kafka副本</h3><h4 id="1-副本基本信息"><a href="#1-副本基本信息" class="headerlink" title="1.副本基本信息"></a>1.副本基本信息</h4><ol><li>Kafka副本作用：提高数据可靠性。</li><li>Kafka默认副本1个，生产环境一般配置为2个，保证数据可靠性；太多副本会增加磁盘存储空间，增加网络上数据传输，降低效率。</li><li>Kafka中副本为：Leader和Follower。Kafka生产者只会把数据发往 Leader，然后Follower 找 Leader 进行同步数据。</li><li>Kafka 分区中的所有副本统称为 AR（Assigned Repllicas）。</li></ol><p>AR &#x3D; ISR + OSR</p><p><strong>ISR</strong>：表示 Leader 保持同步的 Follower 集合。如果 Follower 长时间未 向 Leader 发送通信请求或同步数据，则该 Follower 将被踢出 ISR。该时间阈值由 <strong>replica.lag.time.max.ms</strong> 参数设定，默认 30s 。Leader 发生故障之后，就会从 ISR 中选举新的 Leader。</p><p><strong>OSR</strong>：表示 Follower 与 Leader 副本同步时，延迟过多的副本。</p><h4 id="2-Leader-选举流程"><a href="#2-Leader-选举流程" class="headerlink" title="2.Leader 选举流程"></a>2.Leader 选举流程</h4><p>[Kafka 集群](<a href="https://so.csdn.net/so/search?q=Kafka">https://so.csdn.net/so/search?q=Kafka</a> 集群&amp;spm&#x3D;1001.2101.3001.7020)中有一个 broker 的 Controller 会被选举为 Controller Leader ，负责管理集群 broker 的上下线，所有 topic 的分区副本分配 和 Leader 选举等工作。</p><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/618f7c321508ccc12558192bbe972596.png" alt="在这里插入图片描述"></p><ol><li>创建一个新的 topic，4 个分区，4 个副本</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[atguigu@hadoop102 kafka]$ bin/kafka-topics.sh --bootstrap-server hadoop102:9092 --create --topic atguigu1 --partitions 4 --replication-factor 4<br>Created topic atguigu1.<br></code></pre></td></tr></table></figure><ol><li>查看 Leader 分布情况</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[atguigu@hadoop102 kafka]$ bin/kafka-topics.sh --bootstrap-server hadoop102:9092 --describe <br>--topic atguigu1<br>Topic: atguigu1 TopicId: awpgX_7WR-OX3Vl6HE8sVg PartitionCount: 4 ReplicationFactor: 4<br>Configs: segment.bytes=1073741824<br>Topic: atguigu1 Partition: 0 Leader: 3 Replicas: 3,0,2,1 Isr: 3,0,2,1<br>Topic: atguigu1 Partition: 1 Leader: 1 Replicas: 1,2,3,0 Isr: 1,2,3,0<br>Topic: atguigu1 Partition: 2 Leader: 0 Replicas: 0,3,1,2 Isr: 0,3,1,2<br>Topic: atguigu1 Partition: 3 Leader: 2 Replicas: 2,1,0,3 Isr: 2,1,0,3<br></code></pre></td></tr></table></figure><ol><li>停止掉 hadoop105 的 kafka 进程，并查看 Leader 分区情况</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[atguigu@hadoop105 kafka]$ bin/kafka-server-stop.sh<br>[atguigu@hadoop102 kafka]$ bin/kafka-topics.sh --bootstrap-server hadoop102:9092 --describe <br>--topic atguigu1<br>Topic: atguigu1 TopicId: awpgX_7WR-OX3Vl6HE8sVg PartitionCount: 4 ReplicationFactor: 4<br>Configs: segment.bytes=1073741824<br>Topic: atguigu1 Partition: 0 Leader: 0 Replicas: 3,0,2,1 Isr: 0,2,1<br>Topic: atguigu1 Partition: 1 Leader: 1 Replicas: 1,2,3,0 Isr: 1,2,0<br>Topic: atguigu1 Partition: 2 Leader: 0 Replicas: 0,3,1,2 Isr: 0,1,2<br>Topic: atguigu1 Partition: 3 Leader: 2 Replicas: 2,1,0,3 Isr: 2,1,0<br></code></pre></td></tr></table></figure><ol><li>停止掉 hadoop104 的 kafka 进程，并查看 Leader 分区情况</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[atguigu@hadoop104 kafka]$ bin/kafka-server-stop.sh<br>[atguigu@hadoop102 kafka]$ bin/kafka-topics.sh --bootstrap-server hadoop102:9092 --describe <br>--topic atguigu1<br>Topic: atguigu1 TopicId: awpgX_7WR-OX3Vl6HE8sVg PartitionCount: 4 ReplicationFactor: 4<br>Configs: segment.bytes=1073741824<br>Topic: atguigu1 Partition: 0 Leader: 0 Replicas: 3,0,2,1 Isr: 0,1<br>Topic: atguigu1 Partition: 1 Leader: 1 Replicas: 1,2,3,0 Isr: 1,0<br>Topic: atguigu1 Partition: 2 Leader: 0 Replicas: 0,3,1,2 Isr: 0,1<br>Topic: atguigu1 Partition: 3 Leader: 1 Replicas: 2,1,0,3 Isr: 1,0<br></code></pre></td></tr></table></figure><ol><li>启动 hadoop105 的 kafka 进程，并查看 Leader 分区情况</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[atguigu@hadoop105 kafka]$ bin/kafka-server-start.sh -daemon config/server.properties<br>[atguigu@hadoop102 kafka]$ bin/kafka-topics.sh --bootstrap-server hadoop102:9092 --describe <br>--topic atguigu1<br>Topic: atguigu1 TopicId: awpgX_7WR-OX3Vl6HE8sVg PartitionCount: 4 ReplicationFactor: 4<br>Configs: segment.bytes=1073741824<br>Topic: atguigu1 Partition: 0 Leader: 0 Replicas: 3,0,2,1 Isr: 0,1,3<br>Topic: atguigu1 Partition: 1 Leader: 1 Replicas: 1,2,3,0 Isr: 1,0,3<br>Topic: atguigu1 Partition: 2 Leader: 0 Replicas: 0,3,1,2 Isr: 0,1,3<br>Topic: atguigu1 Partition: 3 Leader: 1 Replicas: 2,1,0,3 Isr: 1,0,3<br></code></pre></td></tr></table></figure><ol><li>启动 hadoop104 的 kafka 进程，并查看 Leader 分区情况</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[atguigu@hadoop104 kafka]$ bin/kafka-server-start.sh -daemon config/server.properties<br>[atguigu@hadoop102 kafka]$ bin/kafka-topics.sh --bootstrap-server hadoop102:9092 --describe <br>--topic atguigu1<br>Topic: atguigu1 TopicId: awpgX_7WR-OX3Vl6HE8sVg PartitionCount: 4 ReplicationFactor: 4<br>Configs: segment.bytes=1073741824<br>Topic: atguigu1 Partition: 0 Leader: 0 Replicas: 3,0,2,1 Isr: 0,1,3,2<br>Topic: atguigu1 Partition: 1 Leader: 1 Replicas: 1,2,3,0 Isr: 1,0,3,2<br>Topic: atguigu1 Partition: 2 Leader: 0 Replicas: 0,3,1,2 Isr: 0,1,3,2<br>Topic: atguigu1 Partition: 3 Leader: 1 Replicas: 2,1,0,3 Isr: 1,0,3,2<br></code></pre></td></tr></table></figure><ol><li>停止掉 hadoop103 的 kafka 进程，并查看 Leader 分区情况</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[atguigu@hadoop103 kafka]$ bin/kafka-server-stop.sh<br>[atguigu@hadoop102 kafka]$ bin/kafka-topics.sh --bootstrap-server hadoop102:9092 --describe <br>--topic atguigu1<br>Topic: atguigu1 TopicId: awpgX_7WR-OX3Vl6HE8sVg PartitionCount: 4 ReplicationFactor: 4<br>Configs: segment.bytes=1073741824<br>Topic: atguigu1 Partition: 0 Leader: 0 Replicas: 3,0,2,1 Isr: 0,3,2<br>Topic: atguigu1 Partition: 1 Leader: 2 Replicas: 1,2,3,0 Isr: 0,3,2<br>Topic: atguigu1 Partition: 2 Leader: 0 Replicas: 0,3,1,2 Isr: 0,3,2<br>Topic: atguigu1 Partition: 3 Leader: 2 Replicas: 2,1,0,3 Isr: 0,3,2<br></code></pre></td></tr></table></figure><h4 id="3-Leader-和-Follower-故障处理细节"><a href="#3-Leader-和-Follower-故障处理细节" class="headerlink" title="3.Leader 和 Follower 故障处理细节"></a>3.Leader 和 Follower 故障处理细节</h4><p><strong>LEO（Log End Offset）</strong>: 每个副本的最后一个offset，LEO其实就是最新的 offset + 1。</p><p><strong>HW（High Watermark）</strong>：所有副本中最小的LEO。</p><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/627ba42753aecc788cdf05a85b44a2ab.png" alt="在这里插入图片描述"><br><strong>LEO</strong>（<strong>Log End Offset</strong>）：每个副本的最后一个offset，LEO其实就是最新的offset + 1</p><p><strong>HW</strong>（<strong>High Watermark</strong>）：所有副本中最小的LEO</p><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/0a81c7bac3257b0aa914d80f3dd892bd.png" alt="在这里插入图片描述"></p><h4 id="4-活动调整分区副本存储"><a href="#4-活动调整分区副本存储" class="headerlink" title="4.活动调整分区副本存储"></a>4.活动调整分区副本存储</h4><p>在生产环境中，每台服务器的配置和性能不一致，但是kafka只会根据自己的代码规则创建对应的分区副本，就会导致个别服务器存储压力较大。所有需要手动调整分区副本的存储。</p><p><strong>需求</strong>：创建一个新的 topic ，4个分区，两个副本，名称为three 。将该 topic 的所有副本都存储到 broker0 和 broker1 两台服务器上。</p><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/2bbf865dbd4ebc499668cd7ded5cc539.png" alt="在这里插入图片描述"></p><p>手动调整分区副本存储的步骤如下：</p><ol><li>创建一个新的 topic，名称为 three。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[atguigu@hadoop102 kafka]$ bin/kafka-topics.sh --bootstrap-server <br>hadoop102:9092 --create --partitions 4 --replication-factor 2 --<br>topic three<br></code></pre></td></tr></table></figure><ol><li>查看分区副本存储情况</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[atguigu@hadoop102 kafka]$ bin/kafka-topics.sh --bootstrap-server <br>hadoop102:9092 --describe --topic three<br></code></pre></td></tr></table></figure><ol><li>创建副本存储计划（所有副本都指定存储在 broker0、broker1 中）。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[atguigu@hadoop102 kafka]$ vim increase-replication-factor.json<br></code></pre></td></tr></table></figure><p>输入如下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;partitions&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;topic&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;three&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;partition&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;replicas&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;topic&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;three&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;partition&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;replicas&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;topic&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;three&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;partition&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;replicas&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;topic&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;three&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;partition&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;replicas&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span> <br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ol><li>执行副本存储计划。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[atguigu@hadoop102 kafka]$ bin/kafka-reassign-partitions.sh --<br>bootstrap-server hadoop102:9092 --reassignment-json-file <br>increase-replication-factor.json --execute<br></code></pre></td></tr></table></figure><ol><li>验证副本存储计划。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[atguigu@hadoop102 kafka]$ bin/kafka-reassign-partitions.sh --<br>bootstrap-server hadoop102:9092 --reassignment-json-file <br>increase-replication-factor.json --verify<br></code></pre></td></tr></table></figure><ol><li>查看分区副本存储情况。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[atguigu@hadoop102 kafka]$ bin/kafka-topics.sh --bootstrap-server <br>hadoop102:9092 --describe --topic three<br></code></pre></td></tr></table></figure><h4 id="5-Leader-Partition-负载平衡"><a href="#5-Leader-Partition-负载平衡" class="headerlink" title="5.Leader Partition 负载平衡"></a>5.Leader Partition 负载平衡</h4><p>正常情况下，Kafka本身会自动把Leader Partition均匀分散在各个机器上，来保证每台机器的读写吞吐量都是均匀的。但是如果某 些broker宕机，会导致Leader Partition过于集中在其他少部分几台broker上，这会导致少数几台broker的读写请求压力过高，其他宕机的broker重启之后都是follower partition，读写请求很低，造成集群负载不均衡。</p><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/c4ad70eb4f4412bcfab54c43ca8abcc9.png" alt="在这里插入图片描述"></p><table><thead><tr><th>参数名称</th><th>描述</th></tr></thead><tbody><tr><td>auto.leader.rebalance.enable</td><td>默认是 true。 自动 Leader Partition 平衡。生产环 境中，leader 重选举的代价比较大，可能会带来 性能影响，建议设置为 false 关闭。</td></tr><tr><td>leader.imbalance.per.broker.percentage</td><td>默认是 10%。每个 broker 允许的不平衡的 leader 的比率。如果每个 broker 超过了这个值，控制器 会触发 leader 的平衡。</td></tr><tr><td>leader.imbalance.check.interval.seconds</td><td>默认值 300 秒。检查 leader 负载是否平衡的间隔 时间。</td></tr></tbody></table><h3 id="5-文件存储"><a href="#5-文件存储" class="headerlink" title="5.文件存储"></a>5.文件存储</h3><h4 id="1-Topic-数据的存储机制"><a href="#1-Topic-数据的存储机制" class="headerlink" title="1.Topic 数据的存储机制"></a>1.Topic 数据的存储机制</h4><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/a9154b42cc275cb2907b2a482c4731e0.png" alt="在这里插入图片描述"><br>查看 hadoop102（或者 hadoop103、hadoop104）的&#x2F;opt&#x2F;module&#x2F;kafka&#x2F;datas&#x2F;first-1 （first-0、first-2）路径上的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[atguigu@hadoop104 first-1]$ <span class="hljs-built_in">ls</span><br>00000000000000000092.index<br>00000000000000000092.<span class="hljs-built_in">log</span><br>00000000000000000092.snapshot<br>00000000000000000092.timeindex<br>leader-epoch-checkpoint<br>partition.metadata<br></code></pre></td></tr></table></figure><p>直接查看 log 日志，发现是乱码。</p><p>通过工具查看 index 和 log 信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[atguigu@hadoop104 first-1]$ kafka-run-class.sh kafka.tools.DumpLogSegments <br>--files ./00000000000000000000.index <br>Dumping ./00000000000000000000.index<br>offset: 3 position: 152<br></code></pre></td></tr></table></figure><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/07ec3d892f186e0253cdce0b4987aaff.png" alt="在这里插入图片描述"><br>日志存储参数配置</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>log.segment.bytes</td><td>Kafka 中 log 日志是分成一块块存储的，此配置是指 log 日志划分 成块的大小，默认值 1G。</td></tr><tr><td>log.index.interval.bytes</td><td>默认 4kb，kafka 里面每当写入了 4kb 大小的日志（.log）， 然后就往 index 文件里面记录一个索引。 稀疏索引。</td></tr></tbody></table><h4 id="2-文件清理策略"><a href="#2-文件清理策略" class="headerlink" title="2.文件清理策略"></a>2.文件清理策略</h4><p>Kafka 中默认的日志保存时间为 7 天，可以通过调整如下参数修改保存时间。</p><ul><li>Log.retention.hours，最低优先级小时，默认7天。</li><li>log.retention.minutes，分钟。</li><li>log.retention.ms，最高优先级毫秒。</li><li>log.retention.check.interval.ms，负责设置检查周期，默认 5 分钟。</li></ul><p>那么日志一旦超过了设置的时间，怎么处理呢？</p><p>Kafka 中提供的日志清理策略有 delete 和 compact 两种。</p><ol><li><strong>delete 日志阐述：将过期数据删除</strong></li></ol><ul><li>log.cleanup.policy &#x3D; delete 所有数据启用阐述策略</li></ul><p>(1) 基于时间：默认打开。以 segment 中所有记录中的最大时间戳作为该文件时间戳。</p><p>(2) 基于大小：默认关闭。超过设置的所有日志总大小，阐述最早的 segment 。</p><p>log.retention.bytes，默认等于-1，表示无穷大。</p><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/c07d696a8fc0e67d9ae206111dcb4d1b.png" alt="在这里插入图片描述"></p><ol><li><strong>compact 日志压缩</strong></li></ol><p>compact日志压缩：对于相同 key 的不同 value 值，值保留最后一个版本。</p><ul><li>log.cleanup.policy &#x3D; compact所有数据启动压缩策略</li></ul><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/1937d2b18b64c6cb52fdbf5d7b9cc276.png" alt="在这里插入图片描述"></p><p>压缩后的offset可能是不连续的，比如上图中没有6，当从这些offset消费消息时，将会拿到比这个 offset 大的 offset 对应的消息，实际上会拿到 offset 为 7 的消息，并从这个位置开始消费。</p><p> 这种策略只适合特殊场景，比如消息的 key 是用户 ID，value 是用户的资料，通过这种压缩策略，整个消息集里就保存了所有用户最新的资料。</p><h2 id="7-Kafka-消费者"><a href="#7-Kafka-消费者" class="headerlink" title="7.Kafka 消费者"></a>7.Kafka 消费者</h2><h3 id="1-Kafka-消费方式"><a href="#1-Kafka-消费方式" class="headerlink" title="1.Kafka 消费方式"></a>1.Kafka 消费方式</h3><ul><li><strong>pull（拉）模式</strong>：consumer 采用从 broker 中主动拉去数据。Kafka 采用这种方式。</li><li><strong>push（推）模式</strong>：Kafka没有采用这种方式，因为由 broker 决定消息发送速率，很难适应所有消费者的消费速率。例如推送的速度是 50m&#x2F;s，Consumer1，Consumer2就来不及处理消息。</li></ul><p>pull 模式不足之处是，如果Kafka 没有数据，消费者可能会陷入循环中，一直返回空数据。</p><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/6dd11e7655f431c98d7b28dbc79ff1d9.png" alt="在这里插入图片描述"></p><h3 id="2-Kafka-消费者工作流程"><a href="#2-Kafka-消费者工作流程" class="headerlink" title="2.Kafka 消费者工作流程"></a>2.Kafka 消费者工作流程</h3><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/fdd1c2ff280a8624914feae65b0f06b4.png" alt="在这里插入图片描述"></p><h3 id="3-消费者组原理"><a href="#3-消费者组原理" class="headerlink" title="3.消费者组原理"></a>3.消费者组原理</h3><p><strong>Consumer Group （CG）</strong>：消费者组，由多个consumer组成。形成一个消费者组的条件是所有消费者的 groupid 相同。</p><ul><li>消费者组内每个消费者负责消费不同分区的数据，一个分区只能由一个组内消费者消费。</li><li>消费者组之间互不影响。所有的消费者都属于某个消费者组，即消费者组是逻辑上的一个订阅者。</li></ul><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/399124c43e0a456252007861f6068c43.png" alt="在这里插入图片描述"><br><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/ca8466ae8caa5e8d95d6468da5b2c7c8.png" alt="在这里插入图片描述"></p><h3 id="4-消费者重要参数"><a href="#4-消费者重要参数" class="headerlink" title="4.消费者重要参数"></a>4.消费者重要参数</h3><table><thead><tr><th>参数名称</th><th>描述</th></tr></thead><tbody><tr><td>bootstrap.servers</td><td>向 Kafka 集群建立初始连接用到的 host&#x2F;port 列表。</td></tr><tr><td>key.deserializer 和value.deserializer</td><td>指定接收消息的 key 和 value 的反序列化类型。一定要写全类名。</td></tr><tr><td>group.id</td><td>标记消费者所属的消费者组。</td></tr><tr><td>enable.auto.commit</td><td>默认值为 true，消费者会自动周期性地向服务器提交偏移量。</td></tr><tr><td>auto.commit.interval.ms</td><td>如果设置了 enable.auto.commit 的值为 true， 则该值定义了 消费者偏移量向 Kafka 提交的频率，默认 5s。</td></tr><tr><td>auto.offset.reset</td><td>当 Kafka 中没有初始偏移量或当前偏移量在服务器中不存在 （如，数据被删除了），该如何处理？ earliest：自动重置偏 移量到最早的偏移量。 latest：默认，自动重置偏移量为最 新的偏移量。 none：如果消费组原来的（previous）偏移量 不存在，则向消费者抛异常。 anything：向消费者抛异常。</td></tr><tr><td>offsets.topic.num.partitions</td><td>__consumer_offsets 的分区数，默认是 50 个分区。</td></tr><tr><td>heartbeat.interval.ms</td><td>Kafka 消费者和 coordinator 之间的心跳时间，默认 3s。 该条目的值必须小于 session.timeout.ms ，也不应该高于 session.timeout.ms 的 1&#x2F;3。</td></tr><tr><td>session.timeout.ms</td><td>Kafka 消费者和 coordinator 之间连接超时时间，默认 45s。 超过该值，该消费者被移除，消费者组执行再平衡。</td></tr><tr><td>max.poll.interval.ms</td><td>消费者处理消息的最大时长，默认是 5 分钟。超过该值，该 消费者被移除，消费者组执行再平衡。</td></tr><tr><td>fetch.min.bytes</td><td>默认 1 个字节。消费者获取服务器端一批消息最小的字节数。</td></tr><tr><td>fetch.max.wait.ms</td><td>默认 500ms。如果没有从服务器端获取到一批数据的最小字 节数。该时间到，仍然会返回数据。</td></tr><tr><td>fetch.max.bytes</td><td>默认 Default: 52428800（50 m）。消费者获取服务器端一批 消息最大的字节数。如果服务器端一批次的数据大于该值 （50m）仍然可以拉取回来这批数据，因此，这不是一个绝 对最大值。一批次的大小受 message.max.bytes （broker config）or max.message.bytes （topic config）影响。</td></tr><tr><td>max.poll.records</td><td>一次 poll 拉取数据返回消息的最大条数，默认是 500 条。</td></tr></tbody></table><h3 id="5-offset-位移"><a href="#5-offset-位移" class="headerlink" title="5.offset 位移"></a>5.offset 位移</h3><h4 id="1-offset-的默认维护位置"><a href="#1-offset-的默认维护位置" class="headerlink" title="1.offset 的默认维护位置"></a>1.offset 的默认维护位置</h4><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/4854d0c7d389be5134feca7cde3cedb3.png" alt="在这里插入图片描述"></p><h4 id="2-自动提交offset"><a href="#2-自动提交offset" class="headerlink" title="2.自动提交offset"></a>2.自动提交offset</h4><p>为了使我们能够专注于自己的业务逻辑，Kafka提供了自动提交offset的功能。</p><p>自动提交offset的相关参数：</p><ul><li><strong>enable.auto.commit</strong>：是否开启自动提交offset功能，默认是true</li><li><strong>auto.commit.interval.ms</strong>：自动提交offset的时间间隔，默认是5s</li></ul><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/85a36096686d5d12246169475c7ada00.png" alt="在这里插入图片描述"></p><table><thead><tr><th>参数名称</th><th>描述</th></tr></thead><tbody><tr><td>enable.auto.commit</td><td>默认值为 true，消费者会自动周期性地向服务器提交偏移量。</td></tr><tr><td>auto.commit.interval.ms</td><td>如果设置了 enable.auto.commit 的值为 true， 则该值定义了消费者偏移量向 Kafka 提交的频率，默认 5s。</td></tr></tbody></table><h4 id="3-手动提交offset"><a href="#3-手动提交offset" class="headerlink" title="3.手动提交offset"></a>3.手动提交offset</h4><p>虽然自动提交offset十分简单比那里，但由于其是基于时间提交的，开发人员难以把握 offset 提交的时机。一次 Kafka 还提供了手动提交 offset 的API。</p><p>手动提交 offset 的方法有两种：分别是 commitSync(同步提交)和commitAsync(异步提交)。两者的相同点是，都会将本次提交的一批数据最高的偏移量提交；不同点是，同步提交阻塞当前线程，一直到提交成功，并且会自动失败重试（由不可控因素导致，也会出现提交失败）；而异步提交则没有失败重试机制，故有可能提交失败。</p><ul><li><strong>commitSync（同步提交）</strong>：必须等待offset提交完毕，再去消费下一批数据。</li><li><strong>commitAsync（异步提交）</strong> ：发送完提交offset请求后，就开始消费下一批数据了。</li></ul><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/8fb7a120c7220dc724052350992ffed5.png" alt="在这里插入图片描述"></p><h4 id="4-指定Offset消费"><a href="#4-指定Offset消费" class="headerlink" title="4.指定Offset消费"></a>4.指定Offset消费</h4><p>auto.offset.reset &#x3D; earliest | latest | none 默认是 latest。</p><p>当 Kafka 中没有初始偏移量（消费者组第一次消费）或服务器上不再存在当前偏移量</p><p>时（例如该数据已被删除），该怎么办？</p><p>（1）earliest：自动将偏移量重置为最早的偏移量，–from-beginning。</p><p>（2）latest（默认值）：自动将偏移量重置为最新偏移量。</p><p>（3）none：如果未找到消费者组的先前偏移量，则向消费者抛出异常。</p><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/44cb944ebc03c4a678f52797cb4696ea.png" alt="在这里插入图片描述"></p><h2 id="8-Kafka-Kraft模式"><a href="#8-Kafka-Kraft模式" class="headerlink" title="8.Kafka-Kraft模式"></a>8.Kafka-Kraft模式</h2><h3 id="1-Kafka-Kraft架构"><a href="#1-Kafka-Kraft架构" class="headerlink" title="1.Kafka-Kraft架构"></a>1.Kafka-Kraft架构</h3><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/0cde130507d67eca004a4a33c8b72bd2.png" alt="在这里插入图片描述"></p><p>左图为 Kafka 现有架构，元数据在 zookeeper 中，运行时动态选举 controller，由controller 进行 Kafka 集群管理。右图为 kraft 模式架构（实验性），不再依赖 zookeeper 集群，而是用三台 controller 节点代替 zookeeper，元数据保存在 controller 中，由 controller 直接进行 Kafka 集群管理。</p><p>这样做的好处有以下几个：</p><ul><li>Kafka 不再依赖外部框架，而是能够独立运行；</li><li>controller 管理集群时，不再需要从 zookeeper 中先读取数据，集群性能上升；</li><li>由于不依赖 zookeeper，集群扩展时不再受到 zookeeper 读写能力限制；</li><li>controller 不再动态选举，而是由配置文件规定。这样我们可以有针对性的加强controller 节点的配置，而不是像以前一样对随机 controller 节点的高负载束手无策。</li></ul><h2 id="9-Go-kafka"><a href="#9-Go-kafka" class="headerlink" title="9.Go kafka"></a>9.Go kafka</h2><h3 id="1-Kafka简介"><a href="#1-Kafka简介" class="headerlink" title="1.Kafka简介"></a>1.Kafka简介</h3><ol><li>Kafka是分布式的：其所有的构件borker(服务端集群)、producer(消息生产)、consumer(消息消费者)都可以是分布式的。</li><li>可以进行分区：每一个分区都是一个顺序的、不可变的消息队列， 并且可以持续的添加。</li><li>高吞吐量。</li></ol><h3 id="2-Kafka的结构"><a href="#2-Kafka的结构" class="headerlink" title="2.Kafka的结构"></a>2.Kafka的结构</h3><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/49b1c3500a9c5dac327ec99b662f0e97.png" alt="在这里插入图片描述"></p><h4 id="1-Producer"><a href="#1-Producer" class="headerlink" title="1.Producer"></a>1.Producer</h4><p>Producer即生产者，消息的产生者，是消息的⼊口。</p><h4 id="2-kafka-cluster"><a href="#2-kafka-cluster" class="headerlink" title="2.kafka cluster"></a>2.kafka cluster</h4><p>kafka集群，一台或多台服务器组成</p><h5 id="1-Broker"><a href="#1-Broker" class="headerlink" title="1.Broker"></a>1.Broker</h5><p>Broker是指部署了Kafka实例的服务器节点。</p><h5 id="2-Topic"><a href="#2-Topic" class="headerlink" title="2.Topic"></a>2.Topic</h5><p>消息的主题，可以理解为消息的分类，kafka的数据就保存在topic。在每个broker上 都可以创建多个topic。实际应用中通常是一个业务线建一个topic。</p><h5 id="3-Partition"><a href="#3-Partition" class="headerlink" title="3.Partition"></a>3.Partition</h5><p>Topic的分区，每个topic可以有多个分区，分区的作用是做负载，提高kafka的吞吐量。同一个topic在不同的分区的数据是不重复的，partition的表现形式就是一个一个的⽂件夹！</p><h5 id="4-Replication"><a href="#4-Replication" class="headerlink" title="4.Replication"></a>4.Replication</h5><p>每一个分区都有多个副本，副本的作用是做备胎。当主分区（Leader）故障的时候会选择一个备胎（Follower）上位，成为Leader。</p><p>在kafka中默认副本的最大数量是10 个，且副本的数量不能大于Broker的数量，follower和leader绝对是在不同的机器，同一机器对同一个分区也只可能存放一个副本（包括自己）。</p><h4 id="3-Consumer"><a href="#3-Consumer" class="headerlink" title="3.Consumer"></a>3.Consumer</h4><p>消费者，即消息的消费方，是消息的出口。</p><h5 id="1-Consumer-Group"><a href="#1-Consumer-Group" class="headerlink" title="1.Consumer Group"></a>1.Consumer Group</h5><p>我们可以将多个消费组组成一个消费者组，在kafka的设计中同一个分区的数据只能被消费者组中的某一个消费者消费。同一个消费者组的消费者可以消费同一个 topic的不同分区的数据，这也是为了提高kafka的吞吐量！</p><h3 id="3-Kafka⼯作流程"><a href="#3-Kafka⼯作流程" class="headerlink" title="3.Kafka⼯作流程"></a>3.Kafka⼯作流程</h3><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/34016421bf7309e58a52f47f84f1d35f.png" alt="在这里插入图片描述"></p><ol><li>⽣产者从Kafka集群获取分区leader信息</li><li>⽣产者将消息发送给leader</li><li>leader将消息写入本地磁盘</li><li>follower从leader拉取消息数据</li><li>follower将消息写入本地磁盘后向leader发送ACK</li><li>leader收到所有的follower的ACK之后向生产者发送ACK</li></ol><h4 id="1-选择partition的原则（面试重点）"><a href="#1-选择partition的原则（面试重点）" class="headerlink" title="1.选择partition的原则（面试重点）"></a>1.选择partition的原则（面试重点）</h4><p>某个topic有多个partition，producer⼜怎么知道该将数据发往哪个partition？</p><ol><li>直接指定：写入的时候可以指定需要写入的partition，如果有指定，则写入对应的partition。</li><li>hash：如果没有指定partition，但是设置了数据的key，则会根据key的值hash出一个partition。</li><li>轮询：如果既没指定partition，又没有设置key，则会采用轮询⽅式，即每次取一小段时间的数据写入某个partition，下一小段的时间写入下一个partition。</li></ol><h4 id="2-ACK应答机制（面试重点）"><a href="#2-ACK应答机制（面试重点）" class="headerlink" title="2.ACK应答机制（面试重点）"></a>2.ACK应答机制（面试重点）</h4><p>producer在向kafka写入消息的时候，可以设置参数来确定是否确认kafka接收到数据，这个参数可设置 的值为 0,1,all</p><ol><li>0：代表producer往集群发送数据不需要等到集群的返回，不确保消息发送成功。安全性最低但是效 率最高。</li><li>1：代表producer往集群发送数据只要leader应答就可以发送下一条，只确保leader发送成功。</li><li>all：代表producer往集群发送数据需要所有的follower都完成从leader的同步才会发送下一条，确保 leader发送成功和所有的副本都完成备份。安全性最⾼高，但是效率最低。</li></ol><p>如果往不存在的topic写数据，kafka会⾃动创建topic，partition和replication的数量 默认配置都是1。</p><h4 id="3-Topic和数据⽇志"><a href="#3-Topic和数据⽇志" class="headerlink" title="3.Topic和数据⽇志"></a>3.Topic和数据⽇志</h4><p>topic 是同⼀类别的消息记录（record）的集合。在Kafka中，⼀个主题通常有多个订阅者。对于每个<br>主题，Kafka集群维护了⼀个分区数据⽇志⽂件结构如下：</p><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/e763d0fc0320329875b9849a58df9d60.png" alt="在这里插入图片描述"></p><ol><li>每个partition都是⼀个有序并且不可变的消息记录集合。</li><li>当新的数据写⼊时，就被追加到partition的末尾。</li><li>在每个partition中，每条消息都会被分配⼀个顺序的唯⼀标识，这个标识被称为offset，即偏移 量。Kafka只保证在同⼀个partition内部消息是有序的，在不同partition之间，并不能保证消息有序。</li></ol><p>Kafka可以配置⼀个保留期限，⽤来标识⽇志会在Kafka集群内保留多⻓时间。Kafka集群会保留在保留期限内所有被发布的消息，不管这些消息是否被消费过。</p><p>⽐如保留期限设置为两天，那么数据被发布到 Kafka集群的两天以内，所有的这些数据都可以被消费。当超过两天，这些数据将会被清空，以便为后 续的数据腾出空间。</p><p>由于Kafka会将数据进⾏持久化存储（即写⼊到硬盘上），所以保留的数据⼤⼩可 以设置为⼀个⽐较⼤的值。</p><h4 id="4-Partition结构"><a href="#4-Partition结构" class="headerlink" title="4.Partition结构"></a>4.Partition结构</h4><p>Partition在服务器上的表现形式就是⼀个⼀个的⽂件夹，每个partition的⽂件夹下⾯会有多组segment ⽂件，每组segment⽂件⼜包含 .index ⽂件、 .log ⽂件、 .timeindex ⽂件三个⽂件，其中 .log ⽂件就是实际存储message的地⽅，⽽ .index 和 .timeindex ⽂件为索引⽂件，⽤于检索消息。</p><h4 id="5-消费数据"><a href="#5-消费数据" class="headerlink" title="5.消费数据"></a>5.消费数据</h4><ol><li>多个消费者实例可以组成⼀个消费者组，并⽤⼀个标签来标识这个消费者组。⼀个消费者组中的不同消费者实例可以运⾏在不同的进程甚⾄不同的服务器上。</li><li>如果所有的消费者实例都在不同的消费者组，那么每⼀条消息记录会被⼴播到每⼀个消费者实例。</li><li>在同⼀个消费者组中，每个消费者实例可以消费多个分区，但是每个分区最多只能被消费者组中的⼀个实例消费。</li></ol><h3 id="4-kafka环境搭建"><a href="#4-kafka环境搭建" class="headerlink" title="4.kafka环境搭建"></a>4.kafka环境搭建</h3><p>kafka环境基于zookeeper,zookeeper环境基于JAVA-JDK。</p><p>！！！新版本的kafka自带zookeeper，可以不手动安装。</p><h4 id="1-java环境变量"><a href="#1-java环境变量" class="headerlink" title="1.java环境变量"></a>1.java环境变量</h4><p><code>https://www.oracle.com/technetwork/java/javase/downloads/jdk12-downloads-5295953.html</code><br><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/cbdf72a621b1339d84440fcadad56dfe.png" alt="在这里插入图片描述"><br><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/fa8bd3d616571181d7390c4962c730de.png" alt="在这里插入图片描述"><br><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/5479c242541fb650c787eefce902d8f0.png" alt="在这里插入图片描述"></p><h4 id="2-安装kafka"><a href="#2-安装kafka" class="headerlink" title="2.安装kafka"></a>2.安装kafka</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arduino">http:<span class="hljs-comment">//kafka.apache.org/downloads</span><br><span class="hljs-number">1.</span>打开config目录下的server.properties文件<br><span class="hljs-number">2.</span>修改log.dirs=F:/tmp/kafka-logs  <span class="hljs-comment">//日志存放</span><br><span class="hljs-number">3.</span>打开config目录下的zookeeper.properties文件<br><span class="hljs-number">4.</span>修改dataDir=F:/tmp/zookeeper <span class="hljs-comment">//数据存放</span><br><br>启动：<br>先执行：bin\windows\zookeeper-server-start.bat config\zookeeper.properties<br>再执行：bin\windows\kafka-server-start.bat config\server.properties<br></code></pre></td></tr></table></figure><p>zookeeper:<br><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/32813710fe0ace14e99d98f4ea5e70bd.png" alt="在这里插入图片描述"><br>kafka:<br><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/384a975529c43cc3d99634ba45ecb45d.png" alt="在这里插入图片描述"></p><h3 id="5-GO操作Kafka"><a href="#5-GO操作Kafka" class="headerlink" title="5.GO操作Kafka"></a>5.GO操作Kafka</h3><h4 id="1-sarama操作kafka"><a href="#1-sarama操作kafka" class="headerlink" title="1.sarama操作kafka"></a>1.sarama操作kafka</h4><h5 id="2-依赖安装"><a href="#2-依赖安装" class="headerlink" title="2.依赖安装"></a>2.依赖安装</h5><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">go</span> <span class="hljs-built_in">get</span> github.<span class="hljs-keyword">com</span>/Shopify/sarama<br></code></pre></td></tr></table></figure><p>windows: mod文件中手动加 <code>require github.com/shopify/sarama v1.19.0</code></p><p>Go语言中连接kafka使用第三方库:github.com&#x2F;IBM&#x2F;sarama。</p><p><code>go get github.com/IBM/sarama</code>这个库已经由Shopify转给了IBM。</p><p>sarama v1.20之后的版本加入了zstd压缩算法，需要用到cgo，在Windows平台编译时会提示类似如下错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># github.com/DataDog/zstd</span><br><span class="hljs-built_in">exec</span>: <span class="hljs-string">&quot;gcc&quot;</span>:executable file not found <span class="hljs-keyword">in</span> %PATH%<br></code></pre></td></tr></table></figure><p>所以在Windows平台请使用v1.19版本的sarama。</p><h5 id="3-连接kafka发送消息"><a href="#3-连接kafka发送消息" class="headerlink" title="3.连接kafka发送消息"></a>3.连接kafka发送消息</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-string">&quot;github.com/IBM/sarama&quot;</span><br>)<br><br><span class="hljs-comment">// 基于sarama第三方库开发的kafka client</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>config := sarama.NewConfig()<br>config.Producer.RequiredAcks = sarama.WaitForAll          <span class="hljs-comment">// 发送完数据需要leader和follow都确认</span><br>config.Producer.Partitioner = sarama.NewRandomPartitioner <span class="hljs-comment">// 新选出一个partition</span><br>config.Producer.Return.Successes = <span class="hljs-literal">true</span>                   <span class="hljs-comment">// 成功交付的消息将在success channel返回</span><br><br><span class="hljs-comment">// 构造一个消息</span><br>msg := &amp;sarama.ProducerMessage&#123;&#125;<br>msg.Topic = <span class="hljs-string">&quot;web_log&quot;</span><br>msg.Value = sarama.StringEncoder(<span class="hljs-string">&quot;this is a test log&quot;</span>)<br><span class="hljs-comment">// 连接kafka</span><br>client, err := sarama.NewSyncProducer([]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;192.168.1.7:9092&quot;</span>&#125;, config)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;producer closed, err:&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> client.Close()<br><span class="hljs-comment">// 发送消息</span><br>pid, offset, err := client.SendMessage(msg)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;send msg failed, err:&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;pid:%v offset:%v\n&quot;</span>, pid, offset)<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-连接kafka消费消息"><a href="#4-连接kafka消费消息" class="headerlink" title="4.连接kafka消费消息"></a>4.连接kafka消费消息</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-string">&quot;github.com/IBM/sarama&quot;</span><br>)<br><br><span class="hljs-comment">// kafka consumer</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>consumer, err := sarama.NewConsumer([]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;127.0.0.1:9092&quot;</span>&#125;, <span class="hljs-literal">nil</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;fail to start consumer, err:%v\n&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>partitionList, err := consumer.Partitions(<span class="hljs-string">&quot;web_log&quot;</span>) <span class="hljs-comment">// 根据topic取到所有的分区</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;fail to get list of partition:err%v\n&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Println(partitionList)<br><span class="hljs-keyword">for</span> partition := <span class="hljs-keyword">range</span> partitionList &#123; <span class="hljs-comment">// 遍历所有的分区</span><br><span class="hljs-comment">// 针对每个分区创建一个对应的分区消费者</span><br>pc, err := consumer.ConsumePartition(<span class="hljs-string">&quot;web_log&quot;</span>, <span class="hljs-type">int32</span>(partition), sarama.OffsetNewest)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;failed to start consumer for partition %d,err:%v\n&quot;</span>, partition, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> pc.AsyncClose()<br><span class="hljs-comment">// 异步从每个分区消费信息</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(sarama.PartitionConsumer)</span></span> &#123;<br><span class="hljs-keyword">for</span> msg := <span class="hljs-keyword">range</span> pc.Messages() &#123;<br>fmt.Printf(<span class="hljs-string">&quot;Partition:%d Offset:%d Key:%v Value:%v&quot;</span>, msg.Partition, msg.Offset, msg.Key, msg.Value)<br>&#125;<br>&#125;(pc)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-kafka-go操作kafka"><a href="#2-kafka-go操作kafka" class="headerlink" title="2.kafka-go操作kafka"></a>2.kafka-go操作kafka</h4><ol><li>相较于sarama， kafka-go 更简单、更易用。</li><li>segmentio&#x2F;kafka-go 是纯Go实现，提供了与kafka交互的低级别和高级别两套API，同时也支持Context。</li><li>此外社区中另一个比较常用的confluentinc&#x2F;confluent-kafka-go，它是一个基于cgo的librdkafka包装，在项目中使用它会引入对C库的依赖。</li></ol><h5 id="1-准备Kafka环境"><a href="#1-准备Kafka环境" class="headerlink" title="1.准备Kafka环境"></a>1.准备Kafka环境</h5><p>以下docker-compose.yml文件用来搭建一套单节点zookeeper和单节点kafka环境，并且在8080端口提供kafka-ui管理界面。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs bash">version: <span class="hljs-string">&#x27;2.1&#x27;</span><br><br>services:<br>  zoo1:<br>    image: confluentinc/cp-zookeeper:7.3.2<br>    hostname: zoo1<br>    container_name: zoo1<br>    ports:<br>      - <span class="hljs-string">&quot;2181:2181&quot;</span><br>    environment:<br>      ZOOKEEPER_CLIENT_PORT: 2181<br>      ZOOKEEPER_SERVER_ID: 1<br>      ZOOKEEPER_SERVERS: zoo1:2888:3888<br><br>  kafka1:<br>    image: confluentinc/cp-kafka:7.3.2<br>    hostname: kafka1<br>    container_name: kafka1<br>    ports:<br>      - <span class="hljs-string">&quot;9092:9092&quot;</span><br>      - <span class="hljs-string">&quot;29092:29092&quot;</span><br>      - <span class="hljs-string">&quot;9999:9999&quot;</span><br>    environment:<br>      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://<span class="hljs-variable">$&#123;DOCKER_HOST_IP:-127.0.0.1&#125;</span>:9092,DOCKER://host.docker.internal:29092<br>      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT<br>      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL<br>      KAFKA_ZOOKEEPER_CONNECT: <span class="hljs-string">&quot;zoo1:2181&quot;</span><br>      KAFKA_BROKER_ID: 1<br>      KAFKA_LOG4J_LOGGERS: <span class="hljs-string">&quot;kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO&quot;</span><br>      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1<br>      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1<br>      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1<br>      KAFKA_JMX_PORT: 9999<br>      KAFKA_JMX_HOSTNAME: <span class="hljs-variable">$&#123;DOCKER_HOST_IP:-127.0.0.1&#125;</span><br>      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer<br>      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: <span class="hljs-string">&quot;true&quot;</span><br>    depends_on:<br>      - zoo1<br>  kafka-ui:<br>    container_name: kafka-ui<br>    image: provectuslabs/kafka-ui:latest<br>    ports:<br>      - 8080:8080<br>    depends_on:<br>      - kafka1<br>    environment:<br>      DYNAMIC_CONFIG_ENABLED: <span class="hljs-string">&quot;TRUE&quot;</span><br></code></pre></td></tr></table></figure><p>将上述docker-compose.yml文件在本地保存，在同一目录下执行以下命令启动容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker-compose up -d<br></code></pre></td></tr></table></figure><p>容器启动后，使用浏览器打开127.0.0.1:8080 即可看到如下kafka-ui界面。</p><p><img src="/2021/09/24/Kafka%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/fb845a8b0fc27f79a01e8561ff450479.png" alt="在这里插入图片描述"></p><h5 id="2-安装kafka-go"><a href="#2-安装kafka-go" class="headerlink" title="2.安装kafka-go"></a>2.安装kafka-go</h5><p>执行以下命令下载 kafka-go依赖。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">go get github.com/segmentio/kafka-go<br></code></pre></td></tr></table></figure><p>注意：kafka-go 需要 Go 1.15或更高版本。</p><p>kafka-go 提供了两套与Kafka交互的API。</p><p>低级别（ low-level）：基于与 Kafka 服务器的原始网络连接实现。</p><p>高级别（high-level）：对于常用读写操作封装了一套更易用的API。</p><p>通常建议直接使用高级别的交互API。</p><h6 id="1-Connection"><a href="#1-Connection" class="headerlink" title="1.Connection"></a>1.Connection</h6><p>Conn 类型是 kafka-go 包的核心。它代表与 Kafka broker之间的连接。基于它实现了一套与Kafka交互的低级别 API。</p><h6 id="2-发送消息"><a href="#2-发送消息" class="headerlink" title="2.发送消息"></a>2.发送消息</h6><p>下面是连接至Kafka之后，使用Conn发送消息的代码示例。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// writeByConn 基于Conn发送消息</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">writeByConn</span><span class="hljs-params">()</span></span> &#123;<br>topic := <span class="hljs-string">&quot;my-topic&quot;</span><br>partition := <span class="hljs-number">0</span><br><br><span class="hljs-comment">// 连接至Kafka集群的Leader节点</span><br>conn, err := kafka.DialLeader(context.Background(), <span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;localhost:9092&quot;</span>, topic, partition)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(<span class="hljs-string">&quot;failed to dial leader:&quot;</span>, err)<br>&#125;<br><br><span class="hljs-comment">// 设置发送消息的超时时间</span><br>conn.SetWriteDeadline(time.Now().Add(<span class="hljs-number">10</span> * time.Second))<br><br><span class="hljs-comment">// 发送消息</span><br>_, err = conn.WriteMessages(<br>kafka.Message&#123;Value: []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;one!&quot;</span>)&#125;,<br>kafka.Message&#123;Value: []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;two!&quot;</span>)&#125;,<br>kafka.Message&#123;Value: []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;three!&quot;</span>)&#125;,<br>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(<span class="hljs-string">&quot;failed to write messages:&quot;</span>, err)<br>&#125;<br><br><span class="hljs-comment">// 关闭连接</span><br><span class="hljs-keyword">if</span> err := conn.Close(); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(<span class="hljs-string">&quot;failed to close writer:&quot;</span>, err)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="3-消费消息"><a href="#3-消费消息" class="headerlink" title="3.消费消息"></a>3.消费消息</h6><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// readByConn 连接至kafka后接收消息</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">readByConn</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 指定要连接的topic和partition</span><br>topic := <span class="hljs-string">&quot;my-topic&quot;</span><br>partition := <span class="hljs-number">0</span><br><br><span class="hljs-comment">// 连接至Kafka的leader节点</span><br>conn, err := kafka.DialLeader(context.Background(), <span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;localhost:9092&quot;</span>, topic, partition)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(<span class="hljs-string">&quot;failed to dial leader:&quot;</span>, err)<br>&#125;<br><br><span class="hljs-comment">// 设置读取超时时间</span><br>conn.SetReadDeadline(time.Now().Add(<span class="hljs-number">10</span> * time.Second))<br><span class="hljs-comment">// 读取一批消息，得到的batch是一系列消息的迭代器</span><br>batch := conn.ReadBatch(<span class="hljs-number">10e3</span>, <span class="hljs-number">1e6</span>) <span class="hljs-comment">// fetch 10KB min, 1MB max</span><br><br><span class="hljs-comment">// 遍历读取消息</span><br>b := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">10e3</span>) <span class="hljs-comment">// 10KB max per message</span><br><span class="hljs-keyword">for</span> &#123;<br>n, err := batch.Read(b)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>fmt.Println(<span class="hljs-type">string</span>(b[:n]))<br>&#125;<br><br><span class="hljs-comment">// 关闭batch</span><br><span class="hljs-keyword">if</span> err := batch.Close(); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(<span class="hljs-string">&quot;failed to close batch:&quot;</span>, err)<br>&#125;<br><br><span class="hljs-comment">// 关闭连接</span><br><span class="hljs-keyword">if</span> err := conn.Close(); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(<span class="hljs-string">&quot;failed to close connection:&quot;</span>, err)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用batch.Read更高效一些，但是需要根据消息长度选择合适的buffer（上述代码中的b），如果传入的buffer太小（消息装不下）就会返回io.ErrShortBuffer错误。</p><p>如果不考虑内存分配的效率问题，也可以按以下代码使用batch.ReadMessage读取消息。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> &#123;<br>  msg, err := batch.ReadMessage()<br>  <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>    <span class="hljs-keyword">break</span><br>  &#125;<br>  fmt.Println(<span class="hljs-type">string</span>(msg.Value))<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="4-创建topic"><a href="#4-创建topic" class="headerlink" title="4.创建topic"></a>4.创建topic</h6><p>当Kafka关闭自动创建topic的设置时，可按如下方式创建topic。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// createTopicByConn 创建topic</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">createTopicByConn</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 指定要创建的topic名称</span><br>topic := <span class="hljs-string">&quot;my-topic&quot;</span><br><br><span class="hljs-comment">// 连接至任意kafka节点</span><br>conn, err := kafka.Dial(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;localhost:9092&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err.Error())<br>&#125;<br><span class="hljs-keyword">defer</span> conn.Close()<br><br><span class="hljs-comment">// 获取当前控制节点信息</span><br>controller, err := conn.Controller()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err.Error())<br>&#125;<br><span class="hljs-keyword">var</span> controllerConn *kafka.Conn<br><span class="hljs-comment">// 连接至leader节点</span><br>controllerConn, err = kafka.Dial(<span class="hljs-string">&quot;tcp&quot;</span>, net.JoinHostPort(controller.Host, strconv.Itoa(controller.Port)))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err.Error())<br>&#125;<br><span class="hljs-keyword">defer</span> controllerConn.Close()<br><br>topicConfigs := []kafka.TopicConfig&#123;<br>&#123;<br>Topic:             topic,<br>NumPartitions:     <span class="hljs-number">1</span>,<br>ReplicationFactor: <span class="hljs-number">1</span>,<br>&#125;,<br>&#125;<br><br><span class="hljs-comment">// 创建topic</span><br>err = controllerConn.CreateTopics(topicConfigs...)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err.Error())<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="4-通过非leader节点连接leader节点"><a href="#4-通过非leader节点连接leader节点" class="headerlink" title="4.通过非leader节点连接leader节点"></a>4.通过非leader节点连接leader节点</h6><p>下面的示例代码演示了如何通过已有的非leader节点的Conn，连接至 leader节点。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go">conn, err := kafka.Dial(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;localhost:9092&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>    <span class="hljs-built_in">panic</span>(err.Error())<br>&#125;<br><span class="hljs-keyword">defer</span> conn.Close()<br><span class="hljs-comment">// 获取当前控制节点信息</span><br>controller, err := conn.Controller()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>    <span class="hljs-built_in">panic</span>(err.Error())<br>&#125;<br><span class="hljs-keyword">var</span> connLeader *kafka.Conn<br>connLeader, err = kafka.Dial(<span class="hljs-string">&quot;tcp&quot;</span>, net.JoinHostPort(controller.Host, strconv.Itoa(controller.Port)))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>    <span class="hljs-built_in">panic</span>(err.Error())<br>&#125;<br><span class="hljs-keyword">defer</span> connLeader.Close()<br></code></pre></td></tr></table></figure><h6 id="5-获取topic列表"><a href="#5-获取topic列表" class="headerlink" title="5.获取topic列表"></a>5.获取topic列表</h6><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go">conn, err := kafka.Dial(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;localhost:9092&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>    <span class="hljs-built_in">panic</span>(err.Error())<br>&#125;<br><span class="hljs-keyword">defer</span> conn.Close()<br><br>partitions, err := conn.ReadPartitions()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>    <span class="hljs-built_in">panic</span>(err.Error())<br>&#125;<br><br>m := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br><span class="hljs-comment">// 遍历所有分区取topic</span><br><span class="hljs-keyword">for</span> _, p := <span class="hljs-keyword">range</span> partitions &#123;<br>    m[p.Topic] = <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>&#125;<br><span class="hljs-keyword">for</span> k := <span class="hljs-keyword">range</span> m &#123;<br>    fmt.Println(k)<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="6-Reader"><a href="#6-Reader" class="headerlink" title="6.Reader"></a>6.Reader</h6><p>Reader是由 kafka-go 包提供的另一个概念，对于从单个主题-分区（topic-partition）消费消息这种典型场景，使用它能够简化代码。Reader 还实现了自动重连和偏移量管理，并支持使用 Context 支持异步取消和超时的 API。</p><p>注意： 当进程退出时，必须在 Reader 上调用 Close() 。Kafka服务器需要一个优雅的断开连接来阻止它继续尝试向已连接的客户端发送消息。如果进程使用 SIGINT (shell 中的 Ctrl-C)或 SIGTERM (如 docker stop 或 kubernetes start)终止，那么下面给出的示例不会调用 Close()。当同一topic上有新Reader连接时，可能导致延迟(例如，新进程启动或新容器运行)。在这种场景下应使用signal.Notify处理程序在进程关闭时关闭Reader。</p><h6 id="7-消费消息"><a href="#7-消费消息" class="headerlink" title="7.消费消息"></a>7.消费消息</h6><p>下面的代码演示了如何使用Reader连接至Kafka消费消息。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// readByReader 通过Reader接收消息</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">readByReader</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 创建Reader</span><br>r := kafka.NewReader(kafka.ReaderConfig&#123;<br>Brokers:   []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;localhost:9092&quot;</span>, <span class="hljs-string">&quot;localhost:9093&quot;</span>, <span class="hljs-string">&quot;localhost:9094&quot;</span>&#125;,<br>Topic:     <span class="hljs-string">&quot;topic-A&quot;</span>,<br>Partition: <span class="hljs-number">0</span>,<br>MaxBytes:  <span class="hljs-number">10e6</span>, <span class="hljs-comment">// 10MB</span><br>&#125;)<br>r.SetOffset(<span class="hljs-number">42</span>) <span class="hljs-comment">// 设置Offset</span><br><br><span class="hljs-comment">// 接收消息</span><br><span class="hljs-keyword">for</span> &#123;<br>m, err := r.ReadMessage(context.Background())<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;message at offset %d: %s = %s\n&quot;</span>, m.Offset, <span class="hljs-type">string</span>(m.Key), <span class="hljs-type">string</span>(m.Value))<br>&#125;<br><br><span class="hljs-comment">// 程序退出前关闭Reader</span><br><span class="hljs-keyword">if</span> err := r.Close(); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(<span class="hljs-string">&quot;failed to close reader:&quot;</span>, err)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="8-消费者组"><a href="#8-消费者组" class="headerlink" title="8.消费者组"></a>8.消费者组</h6><p>kafka-go支持消费者组，包括broker管理的offset。要启用消费者组，只需在 ReaderConfig 中指定 GroupID。</p><p>使用消费者组时，ReadMessage 会自动提交偏移量。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 创建一个reader，指定GroupID，从 topic-A 消费消息</span><br>r := kafka.NewReader(kafka.ReaderConfig&#123;<br>Brokers:  []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;localhost:9092&quot;</span>, <span class="hljs-string">&quot;localhost:9093&quot;</span>, <span class="hljs-string">&quot;localhost:9094&quot;</span>&#125;,<br>GroupID:  <span class="hljs-string">&quot;consumer-group-id&quot;</span>, <span class="hljs-comment">// 指定消费者组id</span><br>Topic:    <span class="hljs-string">&quot;topic-A&quot;</span>,<br>MaxBytes: <span class="hljs-number">10e6</span>, <span class="hljs-comment">// 10MB</span><br>&#125;)<br><br><span class="hljs-comment">// 接收消息</span><br><span class="hljs-keyword">for</span> &#123;<br>m, err := r.ReadMessage(context.Background())<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;message at topic/partition/offset %v/%v/%v: %s = %s\n&quot;</span>, m.Topic, m.Partition, m.Offset, <span class="hljs-type">string</span>(m.Key), <span class="hljs-type">string</span>(m.Value))<br>&#125;<br><br><span class="hljs-comment">// 程序退出前关闭Reader</span><br><span class="hljs-keyword">if</span> err := r.Close(); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(<span class="hljs-string">&quot;failed to close reader:&quot;</span>, err)<br>&#125;<br></code></pre></td></tr></table></figure><p>在使用消费者组时会有以下限制：</p><ol><li>(*Reader).SetOffset 当设置了GroupID时会返回错误</li><li>(*Reader).Offset 当设置了GroupID时会永远返回 -1</li><li>(*Reader).Lag 当设置了GroupID时会永远返回 -1</li><li>(*Reader).ReadLag 当设置了GroupID时会返回错误</li><li>(*Reader).Stats 当设置了GroupID时会返回一个-1的分区</li></ol><h6 id="9-显式提交"><a href="#9-显式提交" class="headerlink" title="9.显式提交"></a>9.显式提交</h6><p>kafka-go 也支持显式提交。当需要显式提交时不要调用 ReadMessage，而是调用 FetchMessage获取消息，然后调用 CommitMessages 显式提交。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go">ctx := context.Background()<br><span class="hljs-keyword">for</span> &#123;<br>    <span class="hljs-comment">// 获取消息</span><br>    m, err := r.FetchMessage(ctx)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">break</span><br>    &#125;<br>    <span class="hljs-comment">// 处理消息</span><br>    fmt.Printf(<span class="hljs-string">&quot;message at topic/partition/offset %v/%v/%v: %s = %s\n&quot;</span>, m.Topic, m.Partition, m.Offset, <span class="hljs-type">string</span>(m.Key), <span class="hljs-type">string</span>(m.Value))<br>    <span class="hljs-comment">// 显式提交</span><br>    <span class="hljs-keyword">if</span> err := r.CommitMessages(ctx, m); err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(<span class="hljs-string">&quot;failed to commit messages:&quot;</span>, err)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在消费者组中提交消息时，具有给定主题&#x2F;分区的最大偏移量的消息确定该分区的提交偏移量的值。例如，如果通过调用 FetchMessage 获取了单个分区的偏移量为 1、2 和 3 的消息，则使用偏移量为3的消息调用 CommitMessages 也将导致该分区的偏移量为 1 和 2 的消息被提交。</p><h6 id="10-管理提交间隔"><a href="#10-管理提交间隔" class="headerlink" title="10.管理提交间隔"></a>10.管理提交间隔</h6><p>默认情况下，调用CommitMessages将同步向Kafka提交偏移量。为了提高性能，可以在ReaderConfig中设置CommitInterval来定期向Kafka提交偏移。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 创建一个reader从 topic-A 消费消息</span><br>r := kafka.NewReader(kafka.ReaderConfig&#123;<br>    Brokers:        []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;localhost:9092&quot;</span>, <span class="hljs-string">&quot;localhost:9093&quot;</span>, <span class="hljs-string">&quot;localhost:9094&quot;</span>&#125;,<br>    GroupID:        <span class="hljs-string">&quot;consumer-group-id&quot;</span>,<br>    Topic:          <span class="hljs-string">&quot;topic-A&quot;</span>,<br>    MaxBytes:       <span class="hljs-number">10e6</span>, <span class="hljs-comment">// 10MB</span><br>    CommitInterval: time.Second, <span class="hljs-comment">// 每秒刷新一次提交给 Kafka</span><br>&#125;)<br></code></pre></td></tr></table></figure><h6 id="11-Writer"><a href="#11-Writer" class="headerlink" title="11.Writer"></a>11.Writer</h6><p>向Kafka发送消息，除了使用基于Conn的低级API，kafka-go包还提供了更高级别的 Writer 类型。大多数情况下使用Writer即可满足条件，它支持以下特性。</p><ol><li>对错误进行自动重试和重新连接。</li><li>在可用分区之间可配置的消息分布。</li><li>向Kafka同步或异步写入消息。</li><li>使用Context的异步取消。</li><li>关闭时清除挂起的消息以支持正常关闭。</li><li>在发布消息之前自动创建不存在的topic。</li></ol><h6 id="12-发送消息"><a href="#12-发送消息" class="headerlink" title="12.发送消息"></a>12.发送消息</h6><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 创建一个writer 向topic-A发送消息</span><br>w := &amp;kafka.Writer&#123;<br>Addr:         kafka.TCP(<span class="hljs-string">&quot;localhost:9092&quot;</span>, <span class="hljs-string">&quot;localhost:9093&quot;</span>, <span class="hljs-string">&quot;localhost:9094&quot;</span>),<br>Topic:        <span class="hljs-string">&quot;topic-A&quot;</span>,<br>Balancer:     &amp;kafka.LeastBytes&#123;&#125;, <span class="hljs-comment">// 指定分区的balancer模式为最小字节分布</span><br>RequiredAcks: kafka.RequireAll,    <span class="hljs-comment">// ack模式</span><br>Async:        <span class="hljs-literal">true</span>,                <span class="hljs-comment">// 异步</span><br>&#125;<br><br>err := w.WriteMessages(context.Background(),<br>kafka.Message&#123;<br>Key:   []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;Key-A&quot;</span>),<br>Value: []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;Hello World!&quot;</span>),<br>&#125;,<br>kafka.Message&#123;<br>Key:   []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;Key-B&quot;</span>),<br>Value: []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;One!&quot;</span>),<br>&#125;,<br>kafka.Message&#123;<br>Key:   []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;Key-C&quot;</span>),<br>Value: []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;Two!&quot;</span>),<br>&#125;,<br>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>    log.Fatal(<span class="hljs-string">&quot;failed to write messages:&quot;</span>, err)<br>&#125;<br><br><span class="hljs-keyword">if</span> err := w.Close(); err != <span class="hljs-literal">nil</span> &#123;<br>    log.Fatal(<span class="hljs-string">&quot;failed to close writer:&quot;</span>, err)<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="13-创建不存在的topic"><a href="#13-创建不存在的topic" class="headerlink" title="13.创建不存在的topic"></a>13.创建不存在的topic</h6><p>如果给Writer配置了AllowAutoTopicCreation:true，那么当发送消息至某个不存在的topic时，则会自动创建topic。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs go">w := &amp;Writer&#123;<br>    Addr:                   kafka.TCP(<span class="hljs-string">&quot;localhost:9092&quot;</span>, <span class="hljs-string">&quot;localhost:9093&quot;</span>, <span class="hljs-string">&quot;localhost:9094&quot;</span>),<br>    Topic:                  <span class="hljs-string">&quot;topic-A&quot;</span>,<br>    AllowAutoTopicCreation: <span class="hljs-literal">true</span>,  <span class="hljs-comment">// 自动创建topic</span><br>&#125;<br><br>messages := []kafka.Message&#123;<br>    &#123;<br>        Key:   []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;Key-A&quot;</span>),<br>        Value: []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;Hello World!&quot;</span>),<br>    &#125;,<br>    &#123;<br>        Key:   []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;Key-B&quot;</span>),<br>        Value: []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;One!&quot;</span>),<br>    &#125;,<br>    &#123;<br>        Key:   []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;Key-C&quot;</span>),<br>        Value: []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;Two!&quot;</span>),<br>    &#125;,<br>&#125;<br><br><span class="hljs-keyword">var</span> err <span class="hljs-type">error</span><br><span class="hljs-keyword">const</span> retries = <span class="hljs-number">3</span><br><span class="hljs-comment">// 重试3次</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; retries; i++ &#123;<br>    ctx, cancel := context.WithTimeout(context.Background(), <span class="hljs-number">10</span>*time.Second)<br>    <span class="hljs-keyword">defer</span> cancel()<br>    <br>    err = w.WriteMessages(ctx, messages...)<br>    <span class="hljs-keyword">if</span> errors.Is(err, LeaderNotAvailable) || errors.Is(err, context.DeadlineExceeded) &#123;<br>        time.Sleep(time.Millisecond * <span class="hljs-number">250</span>)<br>        <span class="hljs-keyword">continue</span><br>    &#125;<br><br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatalf(<span class="hljs-string">&quot;unexpected error %v&quot;</span>, err)<br>    &#125;<br>    <span class="hljs-keyword">break</span><br>&#125;<br><br><span class="hljs-comment">// 关闭Writer</span><br><span class="hljs-keyword">if</span> err := w.Close(); err != <span class="hljs-literal">nil</span> &#123;<br>    log.Fatal(<span class="hljs-string">&quot;failed to close writer:&quot;</span>, err)<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="14-写入多个topic"><a href="#14-写入多个topic" class="headerlink" title="14.写入多个topic"></a>14.写入多个topic</h6><p>通常，WriterConfig.Topic用于初始化单个topic的Writer。通过去掉WriterConfig中的Topic配置，分别设置每条消息的message.topic，可以实现将消息发送至多个topic。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go">w := &amp;kafka.Writer&#123;<br>Addr:     kafka.TCP(<span class="hljs-string">&quot;localhost:9092&quot;</span>, <span class="hljs-string">&quot;localhost:9093&quot;</span>, <span class="hljs-string">&quot;localhost:9094&quot;</span>),<br>    <span class="hljs-comment">// 注意: 当此处不设置Topic时,后续的每条消息都需要指定Topic</span><br>Balancer: &amp;kafka.LeastBytes&#123;&#125;,<br>&#125;<br><br>err := w.WriteMessages(context.Background(),<br>    <span class="hljs-comment">// 注意: 每条消息都需要指定一个 Topic, 否则就会报错</span><br>kafka.Message&#123;<br>        Topic: <span class="hljs-string">&quot;topic-A&quot;</span>,<br>Key:   []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;Key-A&quot;</span>),<br>Value: []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;Hello World!&quot;</span>),<br>&#125;,<br>kafka.Message&#123;<br>        Topic: <span class="hljs-string">&quot;topic-B&quot;</span>,<br>Key:   []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;Key-B&quot;</span>),<br>Value: []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;One!&quot;</span>),<br>&#125;,<br>kafka.Message&#123;<br>        Topic: <span class="hljs-string">&quot;topic-C&quot;</span>,<br>Key:   []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;Key-C&quot;</span>),<br>Value: []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;Two!&quot;</span>),<br>&#125;,<br>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>    log.Fatal(<span class="hljs-string">&quot;failed to write messages:&quot;</span>, err)<br>&#125;<br><br><span class="hljs-keyword">if</span> err := w.Close(); err != <span class="hljs-literal">nil</span> &#123;<br>    log.Fatal(<span class="hljs-string">&quot;failed to close writer:&quot;</span>, err)<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：Writer中的Topic和Message中的Topic是互斥的，同一时刻有且只能设置一处。</p><h6 id="15-其他配置"><a href="#15-其他配置" class="headerlink" title="15.其他配置"></a>15.其他配置</h6><h6 id="16-TLS"><a href="#16-TLS" class="headerlink" title="16.TLS"></a>16.TLS</h6><p>对于基本的 Conn 类型或在 Reader&#x2F;Writer 配置中，可以在Dialer中设置TLS选项。如果 TLS 字段为空，则它将不启用TLS 连接。</p><p>注意：不在Conn&#x2F;Reder&#x2F;Writer上配置TLS，连接到启用TLS的Kafka集群，可能会出现io.ErrUnexpectedEOF错误。</p><p>Connection</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">dialer := &amp;kafka.Dialer&#123;<br>    Timeout:   <span class="hljs-number">10</span> * time.Second,<br>    DualStack: <span class="hljs-literal">true</span>,<br>    TLS:       &amp;tls.Config&#123;...tls config...&#125;,  <span class="hljs-comment">// 指定TLS配置</span><br>&#125;<br><br>conn, err := dialer.DialContext(ctx, <span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;localhost:9093&quot;</span>)<br></code></pre></td></tr></table></figure><p>Reader</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go">dialer := &amp;kafka.Dialer&#123;<br>    Timeout:   <span class="hljs-number">10</span> * time.Second,<br>    DualStack: <span class="hljs-literal">true</span>,<br>    TLS:       &amp;tls.Config&#123;...tls config...&#125;,  <span class="hljs-comment">// 指定TLS配置</span><br>&#125;<br><br>r := kafka.NewReader(kafka.ReaderConfig&#123;<br>    Brokers:        []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;localhost:9092&quot;</span>, <span class="hljs-string">&quot;localhost:9093&quot;</span>, <span class="hljs-string">&quot;localhost:9094&quot;</span>&#125;,<br>    GroupID:        <span class="hljs-string">&quot;consumer-group-id&quot;</span>,<br>    Topic:          <span class="hljs-string">&quot;topic-A&quot;</span>,<br>    Dialer:         dialer,<br>&#125;)<br></code></pre></td></tr></table></figure><p>Writer</p><p>创建Writer时可以按如下方式指定TLS配置。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go">w := kafka.Writer&#123;<br>  Addr: kafka.TCP(<span class="hljs-string">&quot;localhost:9092&quot;</span>, <span class="hljs-string">&quot;localhost:9093&quot;</span>, <span class="hljs-string">&quot;localhost:9094&quot;</span>), <br>   Topic:   <span class="hljs-string">&quot;topic-A&quot;</span>,<br>   Balancer: &amp;kafka.Hash&#123;&#125;,<br>   Transport: &amp;kafka.Transport&#123;<br>       TLS: &amp;tls.Config&#123;&#125;,  <span class="hljs-comment">// 指定TLS配置</span><br>     &#125;,<br>   &#125;<br></code></pre></td></tr></table></figure><h6 id="17-SASL"><a href="#17-SASL" class="headerlink" title="17.SASL"></a>17.SASL</h6><p>可以在Dialer上指定一个选项以使用SASL身份验证。Dialer可以直接用来打开一个 Conn，也可以通过它们各自的配置传递给一个 Reader 或 Writer。如果 SASLMechanism字段为 nil，则不会使用 SASL 进行身份验证。</p><p>SASL 身份验证类型</p><p>明文</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">mechanism := plain.Mechanism&#123;<br>    Username: <span class="hljs-string">&quot;username&quot;</span>,<br>    Password: <span class="hljs-string">&quot;password&quot;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p>SCRAM</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">mechanism, err := scram.Mechanism(scram.SHA512, <span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>    <span class="hljs-built_in">panic</span>(err)<br>&#125;<br></code></pre></td></tr></table></figure><p>Connection</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go">mechanism, err := scram.Mechanism(scram.SHA512, <span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>    <span class="hljs-built_in">panic</span>(err)<br>&#125;<br><br>dialer := &amp;kafka.Dialer&#123;<br>    Timeout:       <span class="hljs-number">10</span> * time.Second,<br>    DualStack:     <span class="hljs-literal">true</span>,<br>    SASLMechanism: mechanism,<br>&#125;<br><br>conn, err := dialer.DialContext(ctx, <span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;localhost:9093&quot;</span>)<br></code></pre></td></tr></table></figure><p>Reader</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go">mechanism, err := scram.Mechanism(scram.SHA512, <span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>    <span class="hljs-built_in">panic</span>(err)<br>&#125;<br><br>dialer := &amp;kafka.Dialer&#123;<br>    Timeout:       <span class="hljs-number">10</span> * time.Second,<br>    DualStack:     <span class="hljs-literal">true</span>,<br>    SASLMechanism: mechanism,<br>&#125;<br><br>r := kafka.NewReader(kafka.ReaderConfig&#123;<br>    Brokers:        []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;localhost:9092&quot;</span>,<span class="hljs-string">&quot;localhost:9093&quot;</span>, <span class="hljs-string">&quot;localhost:9094&quot;</span>&#125;,<br>    GroupID:        <span class="hljs-string">&quot;consumer-group-id&quot;</span>,<br>    Topic:          <span class="hljs-string">&quot;topic-A&quot;</span>,<br>    Dialer:         dialer,<br>&#125;)<br></code></pre></td></tr></table></figure><p>Writer</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go">mechanism, err := scram.Mechanism(scram.SHA512, <span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>    <span class="hljs-built_in">panic</span>(err)<br>&#125;<br><br><span class="hljs-comment">// Transport 负责管理连接池和其他资源,</span><br><span class="hljs-comment">// 通常最好的使用方式是创建后在应用程序中共享使用它们。</span><br>sharedTransport := &amp;kafka.Transport&#123;<br>    SASL: mechanism,<br>&#125;<br><br>w := kafka.Writer&#123;<br>Addr:      kafka.TCP(<span class="hljs-string">&quot;localhost:9092&quot;</span>, <span class="hljs-string">&quot;localhost:9093&quot;</span>, <span class="hljs-string">&quot;localhost:9094&quot;</span>),<br>Topic:     <span class="hljs-string">&quot;topic-A&quot;</span>,<br>Balancer:  &amp;kafka.Hash&#123;&#125;,<br>Transport: sharedTransport,<br>&#125;<br></code></pre></td></tr></table></figure><p>Client</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go">mechanism, err := scram.Mechanism(scram.SHA512, <span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>    <span class="hljs-built_in">panic</span>(err)<br>&#125;<br><br><span class="hljs-comment">// Transport 负责管理连接池和其他资源,</span><br><span class="hljs-comment">// 通常最好的使用方式是创建后在应用程序中共享使用它们。</span><br>sharedTransport := &amp;kafka.Transport&#123;<br>    SASL: mechanism,<br>&#125;<br><br>client := &amp;kafka.Client&#123;<br>    Addr:      kafka.TCP(<span class="hljs-string">&quot;localhost:9092&quot;</span>, <span class="hljs-string">&quot;localhost:9093&quot;</span>, <span class="hljs-string">&quot;localhost:9094&quot;</span>),<br>    Timeout:   <span class="hljs-number">10</span> * time.Second,<br>    Transport: sharedTransport,<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="18-Balancer"><a href="#18-Balancer" class="headerlink" title="18.Balancer"></a>18.Balancer</h6><p>kafka-go实现了多种负载均衡策略。特别是当你从其他Kafka库迁移过来时，你可以按如下说明选择合适的Balancer实现。</p><p>Sarama<br>如果从 sarama 切换过来，并且需要&#x2F;希望使用相同的算法进行消息分区，则可以使用kafka.Hash或kafka.ReferenceHash。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">kafka.Hash = sarama.NewHashPartitioner<br>kafka.ReferenceHash = sarama.NewReferenceHashPartitioner<br>w := &amp;kafka.Writer&#123;<br>Addr:     kafka.TCP(<span class="hljs-string">&quot;localhost:9092&quot;</span>, <span class="hljs-string">&quot;localhost:9093&quot;</span>, <span class="hljs-string">&quot;localhost:9094&quot;</span>),<br>Topic:    <span class="hljs-string">&quot;topic-A&quot;</span>,<br>Balancer: &amp;kafka.Hash&#123;&#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>librdkafka和confluent-kafka-go：kafka.CRC32Balancer与librdkafka默认的consistent_random策略表现一致。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">w := &amp;kafka.Writer&#123;<br>Addr:     kafka.TCP(<span class="hljs-string">&quot;localhost:9092&quot;</span>, <span class="hljs-string">&quot;localhost:9093&quot;</span>, <span class="hljs-string">&quot;localhost:9094&quot;</span>),<br>Topic:    <span class="hljs-string">&quot;topic-A&quot;</span>,<br>Balancer: kafka.CRC32Balancer&#123;&#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>Java：使用kafka.Murmur2Balancer可以获得与默认Java客户端相同的策略。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">w := &amp;kafka.Writer&#123;<br>Addr:     kafka.TCP(<span class="hljs-string">&quot;localhost:9092&quot;</span>, <span class="hljs-string">&quot;localhost:9093&quot;</span>, <span class="hljs-string">&quot;localhost:9094&quot;</span>),<br>Topic:    <span class="hljs-string">&quot;topic-A&quot;</span>,<br>Balancer: kafka.Murmur2Balancer&#123;&#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="19-Compression"><a href="#19-Compression" class="headerlink" title="19.Compression"></a>19.Compression</h6><p>可以通过设置Compression字段在Writer上启用压缩：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">w := &amp;kafka.Writer&#123;<br>Addr:        kafka.TCP(<span class="hljs-string">&quot;localhost:9092&quot;</span>, <span class="hljs-string">&quot;localhost:9093&quot;</span>, <span class="hljs-string">&quot;localhost:9094&quot;</span>),<br>Topic:       <span class="hljs-string">&quot;topic-A&quot;</span>,<br>Compression: kafka.Snappy,<br>&#125;<br></code></pre></td></tr></table></figure><p>Reader 将通过检查消息属性来确定消费的消息是否被压缩。</p><h6 id="20-Logging"><a href="#20-Logging" class="headerlink" title="20.Logging"></a>20.Logging</h6><p>想要记录Reader&#x2F;Writer类型的操作，可以在创建时配置日志记录器。</p><p>kafka-go中的Logger是一个接口类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Logger <span class="hljs-keyword">interface</span> &#123;<br>Printf(<span class="hljs-type">string</span>, ...<span class="hljs-keyword">interface</span>&#123;&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>并且提供了一个LoggerFunc类型，帮我们实现了Logger接口。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> LoggerFunc <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(<span class="hljs-type">string</span>, ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(f LoggerFunc)</span></span> Printf(msg <span class="hljs-type">string</span>, args ...<span class="hljs-keyword">interface</span>&#123;&#125;) &#123; f(msg, args...) &#125;<br></code></pre></td></tr></table></figure><p>Reader：借助kafka.LoggerFunc我们可以自定义一个Logger。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 自定义一个Logger</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">logf</span><span class="hljs-params">(msg <span class="hljs-type">string</span>, a ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;<br>fmt.Printf(msg, a...)<br>fmt.Println()<br>&#125;<br><br>r := kafka.NewReader(kafka.ReaderConfig&#123;<br>Brokers:     []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;localhost:9092&quot;</span>, <span class="hljs-string">&quot;localhost:9093&quot;</span>, <span class="hljs-string">&quot;localhost:9094&quot;</span>&#125;,<br>Topic:       <span class="hljs-string">&quot;q1mi-topic&quot;</span>,<br>Partition:   <span class="hljs-number">0</span>,<br>Logger:      kafka.LoggerFunc(logf),<br>ErrorLogger: kafka.LoggerFunc(logf),<br>&#125;)<br></code></pre></td></tr></table></figure><p>Writer：也可以直接使用第三方日志库，例如下面示例代码中使用了zap日志库。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">w := &amp;kafka.Writer&#123;<br>Addr:        kafka.TCP(<span class="hljs-string">&quot;localhost:9092&quot;</span>),<br>Topic:       <span class="hljs-string">&quot;q1mi-topic&quot;</span>,<br>Logger:      kafka.LoggerFunc(zap.NewExample().Sugar().Infof),<br>ErrorLogger: kafka.LoggerFunc(zap.NewExample().Sugar().Errorf),<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="10-FAQ"><a href="#10-FAQ" class="headerlink" title="10.FAQ"></a>10.FAQ</h2><h3 id="1-Kafka中的消费者组（Consumer-Group）的理解"><a href="#1-Kafka中的消费者组（Consumer-Group）的理解" class="headerlink" title="1.Kafka中的消费者组（Consumer Group）的理解"></a>1.Kafka中的消费者组（Consumer Group）的理解</h3><p>Kafka中的消费者组（Consumer Group）是一个非常重要的概念，涉及到消息如何被消费和分发。让我们来详细解释一下。</p><h4 id="1-消费者组的概念"><a href="#1-消费者组的概念" class="headerlink" title="1.消费者组的概念"></a>1.消费者组的概念</h4><ul><li><p><strong>消费者组</strong> 是Kafka中一组协作消费同一个Topic的消费者。组内的消费者共享同一个Group ID。</p></li><li><p><strong>Partition</strong> 是Kafka中Topic的基本单元，每个Topic可以有一个或多个分区（Partition）。</p></li><li><p>消费者组的工作方式</p><p>：</p><ul><li>Kafka确保每条消息在一个消费者组内只会被消费一次。</li><li>消费者组中的不同消费者可以消费Topic的不同分区（Partition）。</li></ul></li></ul><h4 id="2-消费者组内的消息分配"><a href="#2-消费者组内的消息分配" class="headerlink" title="2.消费者组内的消息分配"></a>2.消费者组内的消息分配</h4><p>假设你有一个Topic <code>names</code>，它有多个分区，并且你创建了一个消费者组<code>group1</code>，里面有3个消费者：<code>C1</code>、<code>C2</code> 和 <code>C3</code>。消息的消费方式将取决于Topic中的分区数量。</p><ul><li><strong>分区数量少于消费者数量</strong>：假如<code>names</code> Topic只有2个分区，而你有3个消费者，Kafka会将每个分区分配给一个消费者，剩余的消费者则不会接收到消息。比如<code>C1</code>消费分区1的消息，<code>C2</code>消费分区2的消息，而<code>C3</code>则不会分配到任何分区。</li><li><strong>分区数量等于消费者数量</strong>：如果<code>names</code> Topic有3个分区，每个消费者会分到一个分区，每个分区的消息只会被分配给一个消费者。例如，<code>C1</code>消费分区1，<code>C2</code>消费分区2，<code>C3</code>消费分区3。</li><li><strong>分区数量多于消费者数量</strong>：比如，<code>names</code> Topic有6个分区，而你有3个消费者，这时每个消费者会被分配到多个分区。例如，<code>C1</code>消费分区1和分区4，<code>C2</code>消费分区2和分区5，<code>C3</code>消费分区3和分区6。</li></ul><h4 id="3-消息分发规则"><a href="#3-消息分发规则" class="headerlink" title="3.消息分发规则"></a>3.消息分发规则</h4><ul><li><strong>每个分区中的消息</strong> 会被分配到对应的消费者，分区内的消息顺序是被保证的。</li><li><strong>每条消息</strong> 只会被消费者组中的一个消费者消费（在同一个组内）。</li></ul><p>这意味着，<strong>在同一个消费者组内，每条消息只会被一个消费者处理，消费后消息即从队列中移除</strong>。</p><ul><li>消费者组内的每个消费者通过分区分摊消息。</li><li>一个Topic中的每个分区会被消费者组中的一个消费者消费。</li><li>组内的所有消费者共同处理所有分区的消息。</li></ul><p>这样设计的好处是，你可以根据消费者组的数量灵活地调整并行处理的能力，同时还能保证在同一个消费者组内消息只被消费一次。</p><p>让我们通过一个具体的例子来深入理解Kafka消费者组的概念及其工作方式。</p><h4 id="4-实际例子"><a href="#4-实际例子" class="headerlink" title="4.实际例子"></a>4.实际例子</h4><p>假设有一个Topic叫做 <code>names</code>，它有6个分区（Partition），用来存储用户的名字。现在，你有一个消费者组 <code>group1</code>，并且在这个组中创建了3个消费者 <code>C1</code>、<code>C2</code> 和 <code>C3</code>。</p><h5 id="1-场景1：消费者组内的消费者数量小于分区数量"><a href="#1-场景1：消费者组内的消费者数量小于分区数量" class="headerlink" title="1.场景1：消费者组内的消费者数量小于分区数量"></a>1.场景1：消费者组内的消费者数量小于分区数量</h5><ul><li><strong>Topic</strong>: <code>names</code></li><li><strong>分区数量</strong>: 6</li><li><strong>消费者组</strong>: <code>group1</code></li><li><strong>消费者数量</strong>: 3 (<code>C1</code>, <code>C2</code>, <code>C3</code>)</li></ul><p>在这种情况下，Kafka会将6个分区分配给这3个消费者。假设分配方式如下：</p><ul><li><code>C1</code> 消费分区 <code>P1</code> 和 <code>P4</code></li><li><code>C2</code> 消费分区 <code>P2</code> 和 <code>P5</code></li><li><code>C3</code> 消费分区 <code>P3</code> 和 <code>P6</code></li></ul><p>因此，分区 <code>P1</code> 中的所有消息只会被消费者 <code>C1</code> 消费，<code>P2</code> 中的消息只会被消费者 <code>C2</code> 消费，依此类推。<strong>每条消息在消费者组 <code>group1</code> 中只会被一个消费者消费</strong>。</p><h5 id="2-场景2：增加消费者以提高处理能力"><a href="#2-场景2：增加消费者以提高处理能力" class="headerlink" title="2.场景2：增加消费者以提高处理能力"></a>2.场景2：增加消费者以提高处理能力</h5><p>假设随着业务发展，你需要更快地处理这些消息。你可以在<code>group1</code>中再增加3个消费者，使总消费者数量达到6个。</p><ul><li><strong>消费者数量</strong>: 6 (<code>C1</code>, <code>C2</code>, <code>C3</code>, <code>C4</code>, <code>C5</code>, <code>C6</code>)</li></ul><p>Kafka会重新分配分区，现在每个消费者消费一个分区：</p><ul><li><code>C1</code> 消费 <code>P1</code></li><li><code>C2</code> 消费 <code>P2</code></li><li><code>C3</code> 消费 <code>P3</code></li><li><code>C4</code> 消费 <code>P4</code></li><li><code>C5</code> 消费 <code>P5</code></li><li><code>C6</code> 消费 <code>P6</code></li></ul><p>这样一来，消息处理能力就提升了，因为现在有6个消费者并行处理这6个分区中的消息。</p><h5 id="3-场景3：消费者数量多于分区数量"><a href="#3-场景3：消费者数量多于分区数量" class="headerlink" title="3.场景3：消费者数量多于分区数量"></a>3.场景3：消费者数量多于分区数量</h5><p>如果你增加到8个消费者，而 <code>names</code> 这个Topic仍然只有6个分区，Kafka会把这6个分区分配给前6个消费者，而剩余的两个消费者 <code>C7</code> 和 <code>C8</code> 不会接收到任何消息，处于空闲状态。</p><ol><li><strong>“根据消费者组的数量灵活地调整并行处理的能力”</strong>：<ul><li>如果需要提高消息处理速度，可以增加消费者组中的消费者数量，让更多消费者并行处理消息。</li><li>但是消费者数量不应该超过分区数量，否则有些消费者会闲置。</li></ul></li><li><strong>“一个Topic中的每个分区会被消费者组中的一个消费者消费”</strong>：<ul><li>在同一个消费者组内，每个分区只能被一个消费者消费，这样保证了分区内消息的顺序性和唯一性。</li><li>不同消费者组可以同时消费同一个Topic的消息，但每个组内的消息是独立消费的。</li></ul></li></ol><p>这个设计提供了灵活性，允许你根据需求调整消费者数量以达到所需的吞吐量和并行处理能力。</p><p>当然可以。下面是一个简单的Go示例代码，展示如何使用 <code>confluent-kafka-go</code> 库（这是一个流行的Kafka客户端库）来创建Kafka消费者，并且如何增加消费者来提升处理能力。</p><h4 id="5-示例代码"><a href="#5-示例代码" class="headerlink" title="5.示例代码"></a>5.示例代码</h4><p>首先，你需要安装 <code>confluent-kafka-go</code> 库。你可以使用以下命令安装它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">go get github.com/confluentinc/confluent-kafka-go/kafka<br></code></pre></td></tr></table></figure><p>以下是一个简单的Go程序，演示了如何创建一个Kafka消费者，并且增加消费者来处理消息。</p><h5 id="1-单个消费者"><a href="#1-单个消费者" class="headerlink" title="1. 单个消费者"></a>1. 单个消费者</h5><p>Kafka中的消费者组是通过消费者配置中的 group.id 参数来定义的。消费者组的概念是Kafka客户端的配置的一部分，而不是需要显式创建的实体。Kafka会自动管理消费者组的协调和分配。</p><p>这是一个单消费者的简单示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;log&quot;</span><br>    <span class="hljs-string">&quot;github.com/confluentinc/confluent-kafka-go/kafka&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// 创建Kafka消费者配置</span><br>    config := &amp;kafka.ConfigMap&#123;<br>        <span class="hljs-string">&quot;bootstrap.servers&quot;</span>: <span class="hljs-string">&quot;localhost:9092&quot;</span>,<br>        <span class="hljs-string">&quot;group.id&quot;</span>:          <span class="hljs-string">&quot;example-group&quot;</span>,<br>        <span class="hljs-string">&quot;auto.offset.reset&quot;</span>: <span class="hljs-string">&quot;earliest&quot;</span>,<br>    &#125;<br><br>    <span class="hljs-comment">// 创建Kafka消费者</span><br>    consumer, err := kafka.NewConsumer(config)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatalf(<span class="hljs-string">&quot;Failed to create consumer: %s&quot;</span>, err)<br>    &#125;<br><br>    <span class="hljs-comment">// 订阅Topic</span><br>    consumer.Subscribe(<span class="hljs-string">&quot;names&quot;</span>, <span class="hljs-literal">nil</span>)<br><br>    <span class="hljs-comment">// 消费消息</span><br>    <span class="hljs-keyword">for</span> &#123;<br>        msg, err := consumer.ReadMessage(<span class="hljs-number">-1</span>)<br>        <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>            log.Printf(<span class="hljs-string">&quot;Consumer error: %v&quot;</span>, err)<br>            <span class="hljs-keyword">continue</span><br>        &#125;<br>        log.Printf(<span class="hljs-string">&quot;Message: %s&quot;</span>, <span class="hljs-type">string</span>(msg.Value))<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-增加消费者"><a href="#2-增加消费者" class="headerlink" title="2. 增加消费者"></a>2. 增加消费者</h5><p>要增加消费者，你可以启动多个实例的消费者程序，每个实例都使用相同的 <code>group.id</code>。Kafka会自动负载均衡各个消费者对Topic分区的消费。</p><p>以下是启动多个消费者的示例：</p><p>假设你已经将上述代码保存为 <code>consumer.go</code>。你可以在不同的终端中运行多个消费者实例，模拟增加消费者：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">go run consumer.go<br></code></pre></td></tr></table></figure><p>你可以在不同的终端窗口中运行这个命令多次。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 终端 1</span><br>go run consumer.go<br><br><span class="hljs-comment"># 终端 2</span><br>go run consumer.go<br><br><span class="hljs-comment"># 终端 3</span><br>go run consumer.go<br></code></pre></td></tr></table></figure><p>每个运行的消费者实例都会加入到 <code>example-group</code> 消费者组中，Kafka会将Topic的分区分配给这些消费者，确保负载均衡。</p><h4 id="6-注意事项"><a href="#6-注意事项" class="headerlink" title="6.注意事项"></a>6.注意事项</h4><ul><li>确保你已经正确配置了Kafka集群和Topic，并且它们正在运行。</li><li>增加消费者的实际效果取决于Topic的分区数量。消费者的数量不应超过分区的数量，否则会有消费者闲置。</li><li>每个消费者实例会从Kafka中读取消息，处理完后Kafka会将消息标记为已消费，并从Topic中移除。</li></ul><p>这样，你可以通过启动多个消费者实例来提高消息处理的并发能力。</p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>微服务</category>
      
      <category>中间件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>Kafka</tag>
      
      <tag>中间件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springCloud图文详解</title>
    <link href="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/"/>
    <url>/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="1-微服务入门"><a href="#1-微服务入门" class="headerlink" title="1.微服务入门"></a>1.微服务入门</h2><h3 id="1-单体架构与分布式架构"><a href="#1-单体架构与分布式架构" class="headerlink" title="(1).单体架构与分布式架构"></a>(1).单体架构与<a href="https://so.csdn.net/so/search?q=%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84&spm=1001.2101.3001.7020">分布式架构</a></h3><p><strong>单体架构：</strong> 将业务的所有功能集中在一个项目中开发，打成一个包部署<br><strong>优点：</strong> 架构简单、部署成本低 ； <strong>缺点：</strong> <a href="https://so.csdn.net/so/search?q=%E8%80%A6%E5%90%88%E5%BA%A6&spm=1001.2101.3001.7020">耦合度</a>高<br><a href="https://so.csdn.net/so/search?q=%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85&spm=1001.2101.3001.7020">项目打包</a>部署到Tomcat，用户直接访问。用户量增加后就多部署几台服务器形成集群。<br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/4d12e458c407df098a40c7c9ccf7fcd1.png" alt="在这里插入图片描述"><br><code>随着互联网发展、一个APP或Web通常都用有相当多的模块，因此出现了 分布式架构</code><br><strong>分布式架构：</strong> 根据业务功能对系统进行拆分，每个业务模块作为独立项目开发，称为一个服务。<br><strong>优点：</strong> 降低服务耦合、有利于服务升级拓展 ；<br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/1bdb03c3f61444bd1618e908376f2453.png" alt="在这里插入图片描述"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs">由于分布式架构的特性我们也出现了一些思考：<br>服务拆分粒度如何?<br>服务集群地址如何维护?<br>服务之间如何实现远程调用?<br>服务健康状态如何感知?<br>为了解决分布式带来的问题，微服务出现了<br></code></pre></td></tr></table></figure><h3 id="2-微服务"><a href="#2-微服务" class="headerlink" title="(2).微服务"></a>(2).微服务</h3><p><strong>微服务是一种经过良好架构设计的分布式架构方案，微服务架构特征:</strong><br><strong>单一职责：</strong> 微服务拆分粒度更小，每一个服务都对应唯一的业务能力，做到单一职责，避免重复业务开发<br><strong>面向服务：</strong> 微服务对外暴露业务接口<br>(由于不同模块部署在不同服务器、无法直接调用)<br><strong>自治：</strong> 队独立、技术独立、数据独立、部署独立<br><strong>隔离性强：</strong> 服务调用做好隔离、容错、降级，避免出现级联问题<br>(避免某个模块宕机造成影响)<br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/cd80c92c87a1bdb6c7ae9e1fe1d82f8a.png" alt="在这里插入图片描述"></p><h3 id="3-总结"><a href="#3-总结" class="headerlink" title="(3).总结"></a>(3).总结</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs makefile">单体架构特点?<br><span class="hljs-section">简单方便，高度耦合，扩展性差，适合小型项目。例如: 学生管理系统</span><br><br>分布式架构特点?<br><span class="hljs-section">松耦合，扩展性好，但架构复杂，难度大。适合大型互联网项目，例如:京东、淘宝</span><br><br><span class="hljs-section">微服务:一种良好的分布式架构方案</span><br><span class="hljs-section">优点: 拆分粒度更小、服务更独立、耦合度更低缺点:架构非常复杂，运维、监控、部署难度提高</span><br></code></pre></td></tr></table></figure><h2 id="2-微服务结构"><a href="#2-微服务结构" class="headerlink" title="2.微服务结构"></a>2.微服务结构</h2><h3 id="1-微服务结构"><a href="#1-微服务结构" class="headerlink" title="(1).微服务结构"></a>(1).微服务结构</h3><p><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/2b96b7f67df624d90b69a6d726de8d37.png" alt="在这里插入图片描述"></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm">在微服务架构中，配置中心和注册中心是两个重要的组件。<br>配置中心用来统一管理项目中所有配置，各种参数、各种开关，全部都放到一个集中的地方进行统一管理，并提供一套标准的接口。当各个服务需要获取配置的时候，就来「配置中心」的接口拉取。<br>注册中心则是用来管理服务实例的注册和发现的。各个服务实例在启动时会向注册中心注册自己的信息（如<span class="hljs-built_in">IP</span>地址和端口号），其他服务实例可以通过注册中心来发现并调用这些服务<span class="hljs-number">12</span>。<br></code></pre></td></tr></table></figure><h3 id="2-微服务技术对比"><a href="#2-微服务技术对比" class="headerlink" title="(2).微服务技术对比"></a>(2).微服务技术对比</h3><p><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/95d0efa54e81b7f115180d416d611821.png" alt="在这里插入图片描述"></p><h3 id="3-企业需求"><a href="#3-企业需求" class="headerlink" title="(3).企业需求"></a>(3).企业需求</h3><p><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/1b870d07852c52e01ca2974c4bf445ff.png" alt="在这里插入图片描述"></p><h3 id="4-SpringCloud"><a href="#4-SpringCloud" class="headerlink" title="(4).SpringCloud"></a>(4).SpringCloud</h3><p><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/0fadfb5a4a2d0347b67583cbedf26e49.png" alt="在这里插入图片描述"></p><hr><h2 id="3-服务拆分及远程调用"><a href="#3-服务拆分及远程调用" class="headerlink" title="3.服务拆分及远程调用"></a>3.服务拆分及远程调用</h2><h3 id="1-服务拆分注意事项"><a href="#1-服务拆分注意事项" class="headerlink" title="(1).服务拆分注意事项"></a>(1).服务拆分注意事项</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">1.不同微服务，不要重复开发相同业务<br>2.微服务数据独立，不要访问其它微服务的数据库<br>3.微服务可以将自己的业务暴露为接口，供其它微服务调用<br></code></pre></td></tr></table></figure><h3 id="2-微服务远程调用"><a href="#2-微服务远程调用" class="headerlink" title="(2).微服务远程调用"></a>(2).微服务远程调用</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-number">1.</span>基于RestTemplate发起的<span class="hljs-keyword">http</span>请求实现远程调用<br><span class="hljs-number">2.</span><span class="hljs-keyword">http</span>请求做远程调用是与语言无关的调用，只要知道对方的ip、端口、接口路径、请求参数即可。<br></code></pre></td></tr></table></figure><h3 id="3-微服务远程调用Demo"><a href="#3-微服务远程调用Demo" class="headerlink" title="(3).微服务远程调用Demo"></a>(3).微服务远程调用Demo</h3><p>假设存在两个微服务： <code>用户模块</code> 与 <code>订单模块</code>，两个模块的数据库表中有一个 <code>id字段</code>相同<br>用户访问<code>订单模块</code>后同时也会返回用户信息。因此用户访问订单模块之后，也需要后端去访问用户模块获取用户信息。之后将信息结合返回给用户。<br><strong>①： 注册RestTemplate进入IOC</strong><br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/d89307d6f12c046bef9f18e119ee3a87.png" alt="在这里插入图片描述"><br><strong>①： 修改service层</strong><br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/bffe99b36f766cbb0457ed42b101fa73.png" alt="在这里插入图片描述"></p><h3 id="4-提供者与消费者"><a href="#4-提供者与消费者" class="headerlink" title="(4).提供者与消费者"></a>(4).提供者与消费者</h3><p><strong>服务提供者：</strong> 一次业务中，被其它微服务调用的服务。(提供接口给其它微服务)<br><strong>服务消费者：</strong> 一次业务中，调用其它微服务的服务。(调用其它微服务提供的接口)<br>一个服务既可以是提供者也可以是消费者，要根据具体的业务和情况来判断</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">第三点Demo中，我们服务在请求服务的时候，restTemplate访问的地址是固定的。<br>可在实际开发中通常都会有好几个环境，开发，测试等等环境。每个环境的地址都在变化<br>因此出现了几个问题：<br>1.服务消费者该如何获取服务提供者的地址信息?<br>2.如果有多个服务提供者，消费者该如何选择?<br></code></pre></td></tr></table></figure><p>因此引出我们的 <code>Eureka注册中心</code></p><h3 id="5-Eureka作用"><a href="#5-Eureka作用" class="headerlink" title="(5).Eureka作用"></a>(5).Eureka作用</h3><p><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/ef9d57ef61fd24899862e7ebc42904ba.png" alt="在这里插入图片描述"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs">消费者该如何获取服务提供者具体信息?<br>①：服务提供者启动时向eureka注册自己的信息<br>②：eureka保存这些信息<br>③：消费者根据服务名称向eureka拉取提供者信息<br><br>如果有多个服务提供者，消费者该如何选择?<br>①：服务消费者利用负载均衡算法，从服务列表中挑选一个<br><br>消费者如何感知服务提供者健康状态?<br>①：服务提供者会每隔30秒向EurekaServer发送心跳请求，报告健康状态<br>②：eureka会更新记录服务列表信息，心跳不正常会被剔除<br>③：消费者就可以拉取到最新的信息<br></code></pre></td></tr></table></figure><p>在Eureka架构中，微服务角色有两类<br>EurekaServer：服务端，注册中心<br>记录服务信息<br>心跳监控</p><p>EurekaClient:客户端<br>Provider: 服务提供者，例如案例中的 user-servicea<br>注册自己的信息到EurekaServer<br>每隔30秒向EurekaServer发送心跳<br>consumer:服务消费者，例如案例中的 order-service根据服务名称从EurekaServer拉取服务列表<br>基于服务列表做负载均衡，选中一个微服务后发起远程调用</p><h3 id="6-搭建EurekaServer"><a href="#6-搭建EurekaServer" class="headerlink" title="(6).搭建EurekaServer"></a>(6).搭建EurekaServer</h3><p><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/774fe6588f7f96eee27d08ab3acf2d4f.png" alt="在这里插入图片描述"><br>如何把微服务也注册到Eureka，都是一个套路，<code>加依赖、配置yml</code><br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/fff3a1c89f020ba0c1d4f166658ecf93.png" alt="在这里插入图片描述"><br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/e03bd5817853c592104819889401b3f7.png" alt="在这里插入图片描述"><br><code>可以在Eureka中部署多个实例。这样可以提高系统的可靠性和容错能力</code><br><strong>服务拉取</strong><br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/ad53eeb3e0997f9826dc94e0a27e6bf7.png" alt="在这里插入图片描述"></p><p><strong>1.搭建EurekaServer</strong><br>引入eureka-server依赖<br>添加@EnableEurekaServer注解<br>在application.yml中配置eureka地址<br><strong>2.服务注册</strong><br>引入eureka-client依赖<br>在application.yml中配置eureka地址<br><strong>3.服务发现</strong><br>引入eureka-client依赖<br>在application.yml中配置eureka地址<br>给RestTemplate添加@LoadBalanced注解<br>用服务提供者的服务名称远程调用</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">整个过程当中我们只需要配置好Eureka，就自动做到了负载均衡、拉取服务，那么这些事情到底是怎么完成的呢？<br></code></pre></td></tr></table></figure><h3 id="7-Ribbon负载均衡"><a href="#7-Ribbon负载均衡" class="headerlink" title="(7).Ribbon负载均衡"></a>(7).Ribbon负载均衡</h3><h4 id="①：负载均衡流程"><a href="#①：负载均衡流程" class="headerlink" title="①：负载均衡流程"></a>①：负载均衡流程</h4><p><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/6c8b4d23cd2b5555378977a1b9d66201.png" alt="在这里插入图片描述"></p><h4 id="②：负载均衡策略"><a href="#②：负载均衡策略" class="headerlink" title="②：负载均衡策略"></a>②：负载均衡策略</h4><p>Ribbon的负载均衡规则是一个叫做IRule的接口来定义的，每一个子接口都是一种规则<br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/38a4345f948b4ca4daf6a01dab7bf58c.png" alt="在这里插入图片描述"><br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/f9751b76e9294043090cc09ee562c602.png" alt="在这里插入图片描述"></p><h4 id="③：负载均衡策略"><a href="#③：负载均衡策略" class="headerlink" title="③：负载均衡策略"></a>③：负载均衡策略</h4><p>Ribbon默认是采用懒加载，即第一次访问时才会去创建LoadBalanceClient，请求时间会很长.而饥饿加载则会在项目启动时创建，降低第一次访问的耗时，通过下面配置开启饥饿加载:<br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/5a218dfc2384f17ff95f2a0e0ee38a3d.png" alt="在这里插入图片描述"></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs makefile">1.Ribbon负载均衡规则<br>规则接口是IRule<br>默认实现是ZoneAvoidanceRule，根据zone选择服务列表，然后轮询<br><br>2.负载均衡自定义方式<br><span class="hljs-section">代码方式:配置灵活，但修改时需要重新打包</span><br><span class="hljs-section">配置方式:直观，方便，无需重新打包发布但是无法做全局配置</span><br><br>3.饥饿加载<br>开启饥饿加载<br>指定饥饿加载的微服务名称<br></code></pre></td></tr></table></figure><h3 id="8-Nacos注册中心"><a href="#8-Nacos注册中心" class="headerlink" title="(8).Nacos注册中心"></a>(8).Nacos注册中心</h3><h4 id="①：Nacos基础Linux的安装配置"><a href="#①：Nacos基础Linux的安装配置" class="headerlink" title="①：Nacos基础Linux的安装配置"></a>①：Nacos基础Linux的安装配置</h4><p>下载[Nacos安装配置教程](<a href="https://blog.csdn.net/Mr_7777777/article/details/123133036?ops_request_misc=%7B%22request_id%22:%22168535604516782425117446%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168535604516782425117446&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-123133036-null-null.142%5Ev88%5Econtrol_2,239%5Ev2%5Einsert_chatgpt&utm_term=Nacos">https://blog.csdn.net/Mr_7777777/article/details/123133036?ops_request_misc=%7B%22request%5Fid%22%3A%22168535604516782425117446%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=168535604516782425117446&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-123133036-null-null.142^v88^control_2,239^v2^insert_chatgpt&amp;utm_term=Nacos</a> Linux&amp;spm&#x3D;1018.2226.3001.4187)</p><p><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/7a0f531e4b62aac96d17c6ef7cfc8101.png" alt="在这里插入图片描述"><br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/a60a5cb8aba7d89b2f81043dab2ecf8b.png" alt="在这里插入图片描述"></p><h4 id="②：服务注册到Nacos"><a href="#②：服务注册到Nacos" class="headerlink" title="②：服务注册到Nacos"></a>②：服务注册到Nacos</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--父工程管理依赖--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2021.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Nacos客户端依赖包--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2021.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong><code>代码的道路哪有一帆风顺，这里提一下我遇到的问题</code></strong><br><code>Caused by: java.lang.ClassNotFoundException: org.springframework.boot.Bootstrapper</code><br>这个报错主要原因是springcloud与springboot版本之间的问题。<br><a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E">打开查看spring alibaba、springcloud、springboot对应版本</a></p><h4 id="③：demo演示"><a href="#③：demo演示" class="headerlink" title="③：demo演示"></a>③：demo演示</h4><p><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/cada4b99f4404b018596647f6b1604da.png" alt="在这里插入图片描述"><br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/e4e0affb453c5e214963f51d8f0a090e.png" alt="在这里插入图片描述"></p><h4 id="④：Nacos服务分级存储模型"><a href="#④：Nacos服务分级存储模型" class="headerlink" title="④：Nacos服务分级存储模型"></a>④：Nacos服务分级存储模型</h4><p><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/0b2d62dccc1a8ef27d4f3660fe019349.png" alt="在这里插入图片描述"></p><h4 id="⑤：服务跨集群调用问题"><a href="#⑤：服务跨集群调用问题" class="headerlink" title="⑤：服务跨集群调用问题"></a>⑤：服务跨集群调用问题</h4><p>服务调用尽可能选择本地集群的服务，跨集群调用延迟较高<br>本地集群不可访问时候、再去访问其他集群<br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/5d6b22a88212c9faa37462db6bc5be1b.png" alt="在这里插入图片描述"></p><h4 id="⑥：服务集群属性"><a href="#⑥：服务集群属性" class="headerlink" title="⑥：服务集群属性"></a>⑥：服务集群属性</h4><p><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/645e75906be763ca4b926f619107fb4b.png" alt="在这里插入图片描述"></p><h4 id="⑥：根据集群负载均衡"><a href="#⑥：根据集群负载均衡" class="headerlink" title="⑥：根据集群负载均衡"></a>⑥：根据集群负载均衡</h4><p><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/28f2d12b3ad5a7cbb97ee11073a97457.png" alt="在这里插入图片描述"></p><h4 id="⑦：根据权重负载均衡"><a href="#⑦：根据权重负载均衡" class="headerlink" title="⑦：根据权重负载均衡"></a>⑦：根据权重负载均衡</h4><p><strong>实际部署中会出现这样的场景</strong><br>服务器设备性能有差异，部分实例所在机器性能较好，另一些较差，我们希望性能好的机器承担更多的用户请求<br>Nacos提供了权重配置来控制访问频率，权重越大则访问频率越高</p><p>包括服务器的升级、我们可以使用权重来使得某个微服务无人访问，然后停机升级。这样也不会影响正在使用的用户</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">实例的权重控制<br>Nacos控制台可以设置实例的权重值，0~1之间<br>同集群内的多个实例，权重越高被访问的频率越高<br>权重设置为0则完全不会被访问<br></code></pre></td></tr></table></figure><h4 id="⑧：环境隔离-namespace"><a href="#⑧：环境隔离-namespace" class="headerlink" title="⑧：环境隔离 - namespace"></a>⑧：环境隔离 - namespace</h4><p>Nacos中服务存储和数据存储的最外层都是一个名为namespace的东西，用来做最外层隔离<br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/86325dac1cb5ea252ca5ca5812907054.png" alt="在这里插入图片描述"><br><strong>搭建过程</strong><br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/167d66ce8d1aca0aa5db60e5aa43574b.png" alt="在这里插入图片描述"><br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/14d0ba9b75fff7ead326dd8f38d8fca0.png" alt="在这里插入图片描述"><br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/50cd88dd00acd3a87d1a7dfac9533cbe.png" alt="在这里插入图片描述"><br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/905f74f731e8822e674c9e69213f5fae.png" alt="在这里插入图片描述"></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">Nacos环境隔离<br><span class="hljs-keyword">namespace</span>用来做环境隔离<br>每个<span class="hljs-symbol">namespace</span>都有唯一<span class="hljs-symbol">id</span><br>不同<span class="hljs-symbol">namespace</span>下的服务不可见<br></code></pre></td></tr></table></figure><h4 id="⑨：nacos注册中心细节分析"><a href="#⑨：nacos注册中心细节分析" class="headerlink" title="⑨：nacos注册中心细节分析"></a>⑨：nacos注册中心细节分析</h4><p><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/64a6cff1b18316f7becadab3af5f4a17.png" alt="在这里插入图片描述"></p><h4 id="⑩：临时实例与非临时实例"><a href="#⑩：临时实例与非临时实例" class="headerlink" title="⑩：临时实例与非临时实例"></a>⑩：临时实例与非临时实例</h4><p><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/b2ff5952c853c62153b6c25bcdd42b61.png" alt="在这里插入图片描述"></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss">临时实例的情况下，如果你终止程序，过<span class="hljs-number">30s</span>，到nacos中查看就会发现爆红然后直接消失(被nacos踢出)<br>非临时实例终止程序，nacos中查看该服务爆红，但不会踢出。重新启动非临时实力即可<br></code></pre></td></tr></table></figure><h4 id="nacos与eureka的区别"><a href="#nacos与eureka的区别" class="headerlink" title="nacos与eureka的区别"></a>nacos与eureka的区别</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stata">1.Nacos与eureka的共同点<br>   都支持服务注册和服务拉取<br>   都支持服务提供者心跳方式做健康检测<br>2.Nacos与Eureka的区别<br>   Nacos支持服务端主动检测提供者状态:临时实例采用心跳模式，非临时实例采用主动检测模式<br>   临时实例心跳不正常会被剔除，非临时实例则不会被剔除<br>   Nacos支持服务列表变更的消息推送模式，服务列表更新更及时<br>   Nacos集群默认采用<span class="hljs-keyword">AP</span>方式，当集群中存在非临时实例时，采用CP模式 ； Eureka采用<span class="hljs-keyword">AP</span>方式<br></code></pre></td></tr></table></figure><hr><h3 id="9-微服务架构组件"><a href="#9-微服务架构组件" class="headerlink" title="(9).微服务架构组件"></a>(9).微服务架构组件</h3><h4 id="①：Nacos配置管理"><a href="#①：Nacos配置管理" class="headerlink" title="①：Nacos配置管理"></a>①：Nacos配置管理</h4><p><strong>配置更改热更新</strong><br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/9d909fe22cc27fe04d2bf0b5c9056677.png" alt="在这里插入图片描述"><br><strong><code>注</code>:</strong> Nacos配置文件中的内容不是随便写的，不是把项目中的yml配置文件拉进去就可以了，我们只写一些通用的、需要热更新的内容。<br>像数据库地址一般都是固定的，就不必写。<br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/dd1aff8395f904165ab64ed9dc6fa032.png" alt="在这里插入图片描述"><br><strong>data ID</strong>: <code>服务器名-开发环境-后缀名</code><br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/9c0c4661537848900b9d7470ca51f692.png" alt="在这里插入图片描述"><br>如此一来我们就配置好了，接下来就需要将微服务连接上配置</p><h4 id="②：统一配置管理"><a href="#②：统一配置管理" class="headerlink" title="②：统一配置管理"></a>②：统一配置管理</h4><p>服务获取配置的步骤、顺序如下：<br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/9cd8aca739d81959b734be4d1c24a660.png" alt="在这里插入图片描述"><br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/0e2ec76a6da339fa08bf9d41303baedb.png" alt="在这里插入图片描述"><br><strong><code>注意：</code></strong> <code>springboot 2.4以后，bootstrap默认关闭，你需要添加依赖</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/0cbf0c611b5f0cad0efe077f3ca45f9a.png" alt="在这里插入图片描述"><br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/039064d79916d641e3a0a3c117c8658e.png" alt="在这里插入图片描述"><br>这个配置在微服务本地配置是不存在的，也是刚刚在nacos当中的配置。<br>输出的日期与nacos配置当中一直，这就 <strong><code>说明我们确实获取到了nacos中的配置</code></strong></p><h4 id="③：热更新配置"><a href="#③：热更新配置" class="headerlink" title="③：热更新配置"></a>③：热更新配置</h4><p><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/0cfa2c934f759de61c7bee77505bfa66.png" alt="在这里插入图片描述"><br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/a8657c497e2d70b5ece4c4333725c23c.png" alt="在这里插入图片描述"></p><h4 id="④：多环境配置共享"><a href="#④：多环境配置共享" class="headerlink" title="④：多环境配置共享"></a>④：多环境配置共享</h4><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts">共享前提： 微服务的bootstrap配置名相同<br><span class="hljs-symbol">spring:</span><br><span class="hljs-symbol">  application:</span><br><span class="hljs-symbol">    name:</span> orderService<br></code></pre></td></tr></table></figure><p><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/ffc2d9e3f2f3c138c643b920027cf527.png" alt="在这里插入图片描述"><br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/c84f9d41fc57754b4b0275fe093cfc68.png" alt="在这里插入图片描述"><br><strong>关于配置的拆分管理</strong><br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/ce8a1382f161ef4c49fc93ef954f4b06.png" alt="在这里插入图片描述"><br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/2ebe204f51455c9b9a1059374667fdf9.png" alt="在这里插入图片描述"></p><h4 id="⑤：nacos集群搭建"><a href="#⑤：nacos集群搭建" class="headerlink" title="⑤：nacos集群搭建"></a>⑤：nacos集群搭建</h4><p><a href="https://www.bilibili.com/video/BV1LQ4y127n4/?p=29&spm_id_from=pageDriver&vd_source=fffda8b3a01eb4075c626d7e911534d5">点击观看</a></p><p><strong>1.搭建MySQL集群并初始化数据库表<br>2.下载解压nacos<br>3.修改集群配置(节点信息)、数据库配置<br>4.分别启动多个nacos节点<br>5.nginx反向代理</strong></p><p><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/e808bba0dc00c8faffc1207b64119ba9.png" alt="## (10).http客户端Feign"></p><h4 id="⑥：RestTemplate方式调用存在的问题"><a href="#⑥：RestTemplate方式调用存在的问题" class="headerlink" title="⑥：RestTemplate方式调用存在的问题"></a>⑥：RestTemplate方式调用存在的问题</h4><p><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/c9468600978416c7f7f2408e117a0d92.png" alt="在这里插入图片描述"><br>这样的代码<code>可读性差、参数复杂URL难以维护</code></p><h4 id="⑦：Feign声明式http客户端"><a href="#⑦：Feign声明式http客户端" class="headerlink" title="⑦：Feign声明式http客户端"></a>⑦：Feign声明式http客户端</h4><p><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/3d51b3c9af9ad6bfeff83215fe6f6bdb.png" alt="在这里插入图片描述"><br><code>feignclient 客户端名字根据你服务名来的，可以要yml文件中查看，需要调用哪个服务就放哪个名字进去</code><br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/4695dbb26acf52fce7d05245a0f628e0.png" alt="在这里插入图片描述"></p><h4 id="⑧：自定义Feign配置"><a href="#⑧：自定义Feign配置" class="headerlink" title="⑧：自定义Feign配置"></a>⑧：自定义Feign配置</h4><p><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/2dc1061eac7425a398142d5134ca7879.png" alt="在这里插入图片描述"><br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/d0f8e06c563fc23e9fc9de25a370b84c.png" alt="在这里插入图片描述"><br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/c94bf459228e176d4704d16f504ef0b6.png" alt="在这里插入图片描述"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">方式一是配置文件，feign<span class="hljs-selector-class">.client</span><span class="hljs-selector-class">.config</span><span class="hljs-selector-class">.xxx</span><span class="hljs-selector-class">.loggerLevel</span><br>如果xxx是default则代表全局<br>如果xxx是服务名称，例如userservice则代表某服务<br><br>方式二是java代码配置Logger.Level这个Bean<br>如果在@EnableFeignClients注解声明则代表全局<br>如果在@FeignClient注解中声明则代表某服务<br></code></pre></td></tr></table></figure><h4 id="⑨：Feign性能调优"><a href="#⑨：Feign性能调优" class="headerlink" title="⑨：Feign性能调优"></a>⑨：Feign性能调优</h4><p><strong>Feign底层的客户端实现</strong><br><strong>URLConnection：</strong> 默认实现，不支持连接池<br><strong>Apache HttpClient：</strong> 支持连接池<br><strong>OKHttp：</strong> 支持连接池<br><code>我们知道没有连接池的情况下，需要每次都重连和断开，影响性能</code></p><p><strong>因此优化Feign的性能主要包括:</strong><br>使用连接池代替默认的URLConnection<br>日志级别，最好用basic或none</p><p><strong>如何添加HttpClient？</strong><br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/5b693faea50683cd8cba0c301bc4bf6d.png" alt="在这里插入图片描述"></p><p><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/55c1e5496294aa68c8900bbeff5182ba.png" alt="在这里插入图片描述"><br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/fdeea3eb4d6f55363841d4fcbdfef4af.png" alt="在这里插入图片描述"><br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/02807994e3f7f27545a8513afc34a1ac.png" alt="在这里插入图片描述"></p><hr><h2 id="4-更进一步"><a href="#4-更进一步" class="headerlink" title="4.更进一步"></a>4.更进一步</h2><h3 id="1-统一网关Gateway"><a href="#1-统一网关Gateway" class="headerlink" title="(1).统一网关Gateway"></a>(1).统一网关Gateway</h3><h4 id="①：为什么需要网关"><a href="#①：为什么需要网关" class="headerlink" title="①：为什么需要网关"></a>①：为什么需要网关</h4><p><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/7351ff33e83900b223700888fabd246a.png" alt="在这里插入图片描述"><br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/38bb20fbb31ae25f91743288dea89896.png" alt="在这里插入图片描述"></p><h4 id="②：搭建网关服务"><a href="#②：搭建网关服务" class="headerlink" title="②：搭建网关服务"></a>②：搭建网关服务</h4><p><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/36a200b1eafa6fc49d3a41b47bbf086f.png" alt="在这里插入图片描述"><br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/daa7661cb3d4e7309ecdab478e93a35b.png" alt="在这里插入图片描述"><br><strong>网关作用流程</strong><br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/82639b440238f30460bc2caffd3fc366.png" alt="在这里插入图片描述"></p><h4 id="③：路由断言工厂"><a href="#③：路由断言工厂" class="headerlink" title="③：路由断言工厂"></a>③：路由断言工厂</h4><p><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/3e6171c809f3f215f4369591bfe277d5.png" alt="在这里插入图片描述"><br><strong><code>关于断言工厂为什么不是过滤器</code></strong></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">断言工厂是用来匹配请求的，比方说有很多微服务交由网关管理。<br>每个微服务都有不同的断言 工厂配置，有的微服务必须几点之前、有的微服务必须什么IP<br>当前端发来<span class="hljs-built_in">URL</span>，请求的时候，<span class="hljs-built_in">URL</span>会跟配置中比较<br>满足断言工厂配置条件的才能找到对应的服务并响应<br></code></pre></td></tr></table></figure><p><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/0171dcfb5c1847fb2398701e66b8f9b8.png" alt="在这里插入图片描述"><br>如果你访问<code>localhost:88/hello?url=baidu</code>它会自动跳转到，<code>www.baidu.com/hello</code></p><h4 id="④：路由过滤器GatewayFilter"><a href="#④：路由过滤器GatewayFilter" class="headerlink" title="④：路由过滤器GatewayFilter"></a>④：路由过滤器GatewayFilter</h4><p><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/25e0d0d093fc419d5222af56b1bc7f62.png" alt="在这里插入图片描述"></p><h4 id="⑤：全局过滤器GlobalFilter"><a href="#⑤：全局过滤器GlobalFilter" class="headerlink" title="⑤：全局过滤器GlobalFilter"></a>⑤：全局过滤器GlobalFilter</h4><p>全局过滤器的作用也是处理一切进入网关的请求和微服务响应，与GatewayFilter的作用一样。<br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/86c3abb833cd15fc6c767b3d923907b3.png" alt="在这里插入图片描述"></p><h4 id="⑥：过滤器执行顺序"><a href="#⑥：过滤器执行顺序" class="headerlink" title="⑥：过滤器执行顺序"></a>⑥：过滤器执行顺序</h4><p>请求进入网关会碰到三类过滤器： 当前路由的过滤器、DefaultFilter、GlobalFilter<br>请求路由后，会将当前路由过滤器和DefaultFilter、GlobalFilter，合并到一个过滤器链 (集合)中，排序后依次执行每个过滤器<br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/59289714e921b225d736e978782fa152.png" alt="在这里插入图片描述"></p><p><strong>1、</strong> 每一个过滤器都必须指定一个int类型的order值，order值越小，优先级越高，执行顺序越靠前<br><strong>2、</strong> GlobalFilter通过实现Ordered接口，或者添加@Order注解来指定order值，由我们自己指定<br><strong>3、</strong> 路由过滤器和defaultFilter的order由Spring指定，默认是按照声明顺序从1递增<br><strong>4、</strong> 当过滤器的order值一样时，会按照 defaultFilter &gt; 路由过滤器&gt;GlobalFilter的顺序执行</p><h4 id="⑦：跨域问题处理"><a href="#⑦：跨域问题处理" class="headerlink" title="⑦：跨域问题处理"></a>⑦：跨域问题处理</h4><p>**跨域：**域名不一致就是跨域，主要包括：<br>域名不同： <a href="http://www.taobao.com/">www.taobao.com</a> 、<a href="http://www.taobao.org/">www.taobao.org</a><br>域名相同： 端口不同： localhost:8080、 localhost:8081<br>跨域问题： 浏览器禁止请求的发起者与服务端发生跨域ajax请求，请求被浏览器拦截的问题<br>解决方案： CORS<br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/c9d21bb92c16f21fbdf236e1fb7f0c32.png" alt="在这里插入图片描述"></p><h3 id="2-Docker"><a href="#2-Docker" class="headerlink" title="(2).Docker"></a>(2).Docker</h3><h4 id="①：初始Docker"><a href="#①：初始Docker" class="headerlink" title="①：初始Docker"></a>①：初始Docker</h4><p>Docker是一个快速交付应用、运行应用的技术<br>1.可以将程序及其依赖、运行环境一起打包为一个镜像<br>可以迁移到任意Linux操作系统<br>2.运行时利用沙箱机制形成隔离容器，各个应用互不干扰<br>3.启动、移除都可以通过一行命令完成，方便快捷<br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/7eb07cf75ab644e4e77ec6136c35caaa.png" alt="在这里插入图片描述"></p><h4 id="②：Docker与虚拟机"><a href="#②：Docker与虚拟机" class="headerlink" title="②：Docker与虚拟机"></a>②：Docker与虚拟机</h4><p>Docker和虚拟机的差异<br>docker是一个系统进程 ； <code>虚拟机</code>是在操作系统中的操作系统<br>docker体积小、启动速度快、性能好 ； <code>虚拟机</code>体积大、启动速度慢、性能一般</p><h4 id="③：镜像和容器"><a href="#③：镜像和容器" class="headerlink" title="③：镜像和容器"></a>③：镜像和容器</h4><p><strong>镜像(Image)：</strong> Docker将应用程序及其所需的依赖、函数库、环境、配置等文件打包在一起，称为镜像。<br><strong>容器(Container)：</strong> 镜像中的应用程序运行后形成的进程就是容器，只是Docker会给容器做隔离，对外不可见。<br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/7d9239a633853dfdb6774c28ef171554.png" alt="在这里插入图片描述"></p><h4 id="④：镜像和容器"><a href="#④：镜像和容器" class="headerlink" title="④：镜像和容器"></a>④：镜像和容器</h4><p>Docker是一个CS架构的程序，由两部分组成:<br><strong>服务端(server)：</strong> Docker守护进程，负责处理Docker指令，管理镜像、容器等<br><strong>客户端(client)：</strong> 通过命令或RestAPI向Docker服务端发送指令。可以在本地或远程向服务端发送指令<br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/af1aed00726a2c58526256b1fbba1e43.png" alt="在这里插入图片描述"></p><h4 id="⑤：Docker安装与常用命令"><a href="#⑤：Docker安装与常用命令" class="headerlink" title="⑤：Docker安装与常用命令"></a>⑤：Docker安装与常用命令</h4><p><a href="https://blog.csdn.net/weixin_41394654/article/details/126083766?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-126083766-blog-113856681.235%5Ev38%5Epc_relevant_sort_base3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-126083766-blog-113856681.235%5Ev38%5Epc_relevant_sort_base3&utm_relevant_index=3">关于Docker的安装</a></p><h4 id="⑥：数据卷"><a href="#⑥：数据卷" class="headerlink" title="⑥：数据卷"></a>⑥：数据卷</h4><p><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/f4fe9110c4dead240c7573313c7cc392.png" alt="在这里插入图片描述"><br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/d0c30a17d2849ed52de4c7e4de1cc494.png" alt="在这里插入图片描述"></p><h3 id="3-MQ"><a href="#3-MQ" class="headerlink" title="(3).MQ"></a>(3).MQ</h3><h4 id="①：同步与异步"><a href="#①：同步与异步" class="headerlink" title="①：同步与异步"></a>①：同步与异步</h4><p>同步通讯的优点：<code>时效性强、可以立即得到结果</code><br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/f8376ca941b0af01c01dca86f793f8de.png" alt="在这里插入图片描述"><strong>同步存在的问题：</strong><br><code>耦合度高</code><br>每次加入新的需求，都要修改原来的代码<br><code>性能下降</code><br>调用者需要等待服务提供者响应，如果调用链过长则响应时间等于每次调用的时间之和。<br><code>资源浪费</code><br>调用链中的每个服务在等待响应过程中，不能释放请求占用的资源，高并发场景下会极度浪费系统资源<br><code>级联失败</code><br>如果服务提供者出现问题，所有调用方都会跟着出问题如同多米诺骨牌一样，迅速导致整个微服务群故障</p><h4 id="②：异步调用方案"><a href="#②：异步调用方案" class="headerlink" title="②：异步调用方案"></a>②：异步调用方案</h4><p><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/e460c525e52d53f38f27cf91295f518f.png" alt="在这里插入图片描述"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">此时支付服务不需要像同步调用时、停下来等待其他服务完成再返回。而是可以直接返回<br></code></pre></td></tr></table></figure><p>以往如果你需要在支付服务中调用其他服务，由于是同步调用，你必须等待其他服务响应。<br>一旦需要增加某个服务，你又要修改代码。耦合度很高，但是现在你只需要让服务订阅Broker就可以<br><code>流量削峰</code><br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/74194660d748070abfe50c1e3e0a4504.png" alt="在这里插入图片描述"></p><h4 id="③：什么是MQ"><a href="#③：什么是MQ" class="headerlink" title="③：什么是MQ"></a>③：什么是MQ</h4><p><strong>MQ(MessageQueue)：</strong> 中文是消息队列，字面来看就是存放消息的队列。也就是事件驱动架构中的Broker。<br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/19eeac5b723f3199b0ed6d0fb57731a1.png" alt="在这里插入图片描述"></p><h3 id="4-RabbitMQ快速入门"><a href="#4-RabbitMQ快速入门" class="headerlink" title="(4).RabbitMQ快速入门"></a>(4).RabbitMQ快速入门</h3><h4 id="①：RabbitMQ"><a href="#①：RabbitMQ" class="headerlink" title="①：RabbitMQ"></a>①：RabbitMQ</h4><p><a href="https://blog.csdn.net/weixin_51560103/article/details/121492937?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_utm_term~default-0-121492937-blog-124337419.235%5Ev38%5Epc_relevant_sort_base3&spm=1001.2101.3001.4242.1&utm_relevant_index=1">RabbitMQ安装</a><br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/352a726e4fa08b6c9c145416e6d65f4f.png" alt="在这里插入图片描述"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -d --name rabbitmq -e RABBITMQ_DEFAULT_USER=root -e RABBITMQ_DEFAULT_PASS=<span class="hljs-number">123456</span> -p <span class="hljs-number">15672</span>:<span class="hljs-number">15672</span> -p <span class="hljs-number">5672</span>:<span class="hljs-number">5672</span> -p <span class="hljs-number">25673</span>:<span class="hljs-number">25673</span> -p <span class="hljs-number">61613</span>:<span class="hljs-number">61613</span> -p <span class="hljs-number">1883</span>:<span class="hljs-number">1883</span> rabbitmq:management<br></code></pre></td></tr></table></figure><h4 id="②：SpringAMQP"><a href="#②：SpringAMQP" class="headerlink" title="②：SpringAMQP"></a>②：SpringAMQP</h4><p><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/ae8951dce07bf71116c44a5a43025084.png" alt="在这里插入图片描述"><br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/9763bee7cffef57ec67a6739e4f29cbd.png" alt="在这里插入图片描述"><br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/16924c67832d0a5881aa02852cec7416.png" alt="在这里插入图片描述"><br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/cb43a04e508f954cbd3b5c7697f4a1a5.png" alt="在这里插入图片描述"><br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/eb4b6a41da36677fc30a695bee0b9568.png" alt="在这里插入图片描述"><br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/df1fc022c07a38c16b95afb28efcd86b.png" alt="在这里插入图片描述"><br>当预取值改为1、消费者会等响应完一条消息之后再从队列中取一条消息。这样一来就做到了“能者多劳”的效果</p><h4 id="③：发布、订阅"><a href="#③：发布、订阅" class="headerlink" title="③：发布、订阅"></a>③：发布、订阅</h4><p>发布订阅模式与之前案例的区别就是允许将同一消息发送给多个消费者。实现方式是加入了exchange(交换机)<br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/341b85b4487d4630b45ecd0a8d0e9887.png" alt="在这里插入图片描述"><br><strong>绑定队列与交换机：</strong><br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/8fd457692a661ddee1db4ba63d1a71e5.png" alt="在这里插入图片描述"></p><h4 id="④：DirectExchange"><a href="#④：DirectExchange" class="headerlink" title="④：DirectExchange"></a>④：DirectExchange</h4><p><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/ba6d77af8e8e87e3e6c4b0fd80a3bc5f.png" alt="在这里插入图片描述"><br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/0ca2cdfbd4d529fdf211675e874558b5.png" alt="在这里插入图片描述"><br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/21a9c873f0d4a97e2fabd9f6491e3360.png" alt="在这里插入图片描述"></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs aspectj">描述下Direct交换机与Fanout交换机的差异?<br>Fanout交换机将消息路由给每一个与之绑定的队列<br>Direct交换机根据RoutingKey判断路由给哪个队列<br>如果多个队列具有相同的RoutingKey，则与Fanout功能类似<br><br>基于<span class="hljs-meta">@RabbitListener</span>注解声明队列和交换机有哪些常见注解?<br><span class="hljs-meta">@Queue</span><br><span class="hljs-meta">@Exchange</span><br></code></pre></td></tr></table></figure><h4 id="⑤：TopicExchange"><a href="#⑤：TopicExchange" class="headerlink" title="⑤：TopicExchange!"></a>⑤：TopicExchange!</h4><p><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/28ddbc50392e34a0968c1bd13b619b81.png" alt="在这里插入图片描述"></p><p><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/da5ed83861909b19758bb60014a988f2.png" alt="在这里插入图片描述"><br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/35432d2323fe021a0e50329e7dadb07b.png" alt="在这里插入图片描述"></p><h4 id="⑥：SpringAMQP消息转换器"><a href="#⑥：SpringAMQP消息转换器" class="headerlink" title="⑥：SpringAMQP消息转换器"></a>⑥：SpringAMQP消息转换器</h4><p><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/efa3180762d6724c58b4dfde0fa6cbc9.png" alt="在这里插入图片描述"><br><img src="/2021/04/27/springCloud%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/1c556749c28f2839af95bffe77febe04.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>springCloud</tag>
      
      <tag>微服务</tag>
      
      <tag>RabbitMQ</tag>
      
      <tag>Nacos</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis图文详解</title>
    <link href="/2021/04/22/Redis%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/"/>
    <url>/2021/04/22/Redis%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="一、Redis-是什么"><a href="#一、Redis-是什么" class="headerlink" title="一、Redis 是什么"></a>一、Redis 是什么</h2><p>​    Redis 是Remote Dictionary Server(Redis) 的缩写，是一个使用 C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型的Key-Value数据库，并提供多种语言的API。</p><p>​    它是一种 NoSQL（not-only sql，泛指非关系型数据库）的数据库，可以用作数据库、缓存、消息中间件、分布式锁等。</p><h2 id="二、Redis-的特点和功能"><a href="#二、Redis-的特点和功能" class="headerlink" title="二、Redis 的特点和功能"></a>二、Redis 的特点和功能</h2><ul><li><p>性能优秀，数据在内存中，读写速度非常快，支持并发 10W QPS（每秒查询量）。</p></li><li><p>单进程单线程，是线程安全的，采用 IO 多路复用机制。</p></li><li><p>丰富的数据类型，支持字符串（strings）、散列（hashes）、列表（lists）、集合（sets）、有序集合（sorted sets）等。</p></li><li><p>支持数据持久化。</p><p>可以将内存中数据保存在磁盘中，重启时加载。</p></li><li><p>主从复制，哨兵，高可用。</p></li><li><p>可以用作分布式锁。</p></li><li><p>可以作为消息中间件使用，支持发布订阅</p></li></ul><h2 id="三、缓存和数据库数据一致性问题"><a href="#三、缓存和数据库数据一致性问题" class="headerlink" title="三、缓存和数据库数据一致性问题"></a>三、缓存和数据库<a href="https://so.csdn.net/so/search?q=%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7&spm=1001.2101.3001.7020">数据一致性</a>问题</h2><p>​    分布式环境下非常容易出现缓存和数据库间数据一致性问题，针对这一点，如果项目对缓存的要求是强一致性的，那么就不要使用缓存。</p><p>​    我们只能采取合适的策略来降低缓存和数据库间数据不一致的概率，而无法保证两者间的强一致性。</p><p>​    合适的策略包括合适的缓存更新策略，更新数据库后及时更新缓存、缓存失败时增加重试机制，以及使用canal同步mysql到redis，具体可见如下链接：</p><p><a href="https://blog.csdn.net/zxljsbk/article/details/80055544?spm=1001.2014.3001.5502">linux 利用canal充当中间件同步mysql数据到redis_linux下canal实现mysql数据同步-CSDN博客</a>。</p><h2 id="四、缓存选型（Redis-和-Memcached-的区别）"><a href="#四、缓存选型（Redis-和-Memcached-的区别）" class="headerlink" title="四、缓存选型（Redis 和 Memcached 的区别）"></a>四、缓存选型（Redis 和 Memcached 的区别）</h2><p>Redis 和 Memcached 的区别</p><ul><li>**存储方式上：**Memcache 会把数据全部存在内存之中，断电后会挂掉，数据不能超过内存大小。Redis 有部分数据存在硬盘上，这样能保证数据的持久性。</li><li>**数据支持类型上：**Memcache 对数据类型的支持简单，只支持简单的 key-value，，而 Redis 支持五种数据类型。</li><li>**使用底层模型不同：**它们之间底层实现方式以及与客户端之间通信的应用协议不一样。Redis 直接自己构建了 VM 机制，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求。</li><li>**Value 的大小：**Redis 可以达到 1GB，而 Memcache 只有 1MB</li></ul><h2 id="五、Redis-为什么能这么快"><a href="#五、Redis-为什么能这么快" class="headerlink" title="五、Redis 为什么能这么快"></a>五、Redis 为什么能这么快</h2><p>​    官方提供的数据可以达到 100000+ 的 QPS（每秒内的查询次数），这个数据不比 Memcached 差。</p><ul><li>Redis 完全基于内存，绝大部分请求是纯粹的内存操作，非常迅速，数据存在内存中，类似于 HashMap，HashMap 的优势就是查找和操作的时间复杂度是 O(1)。</li><li>数据结构简单，对数据操作也简单。</li><li>采用单线程，避免了不必要的上下文切换和竞争条件，不存在多线程导致的 CPU 切换，不用去考虑各种锁的问题，不存在加锁释放锁操作，没有死锁问题导致的性能消耗。</li><li>使用多路复用 IO 模型，非阻塞 IO。</li></ul><h2 id="六、-Redis-缓存-https-so-csdn-net-so-search-q-Redis-缓存-spm-1001-2101-3001-7020-的淘汰策略"><a href="#六、-Redis-缓存-https-so-csdn-net-so-search-q-Redis-缓存-spm-1001-2101-3001-7020-的淘汰策略" class="headerlink" title="六、[Redis 缓存](https://so.csdn.net/so/search?q=Redis 缓存&amp;spm&#x3D;1001.2101.3001.7020)的淘汰策略"></a>六、[Redis 缓存](<a href="https://so.csdn.net/so/search?q=Redis">https://so.csdn.net/so/search?q=Redis</a> 缓存&amp;spm&#x3D;1001.2101.3001.7020)的淘汰策略</h2><p>Redis 有六种淘汰策略，如下图：</p><p><img src="/2021/04/22/Redis%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/3c9b78d0ad34dd35dfc885222b799e02.png" alt="img"></p><p>Redis 4.0 加入了 LFU（least frequency use）淘汰策略，包括 volatile-lfu 和 allkeys-lfu，通过统计访问频率，将访问频率最少，即最不经常使用的 KV 淘汰</p><h2 id="七、Redis-持久化"><a href="#七、Redis-持久化" class="headerlink" title="七、Redis 持久化"></a>七、Redis 持久化</h2><h3 id="1-为什么需要持久化"><a href="#1-为什么需要持久化" class="headerlink" title="1.为什么需要持久化"></a><strong>1.为什么需要持久化</strong></h3><p>​    比如redis里有10gb数据，突然停电或者意外宕机了，再启动的时候10gb都没了！所以需要持久化，宕机后再通过持久化文件将数据恢复。</p><h3 id="2-Redis-的持久化策略的两种方式"><a href="#2-Redis-的持久化策略的两种方式" class="headerlink" title="2.Redis 的持久化策略的两种方式"></a>2.Redis 的持久化策略的两种方式</h3><ul><li>**RDB（默认）：**快照形式是直接把内存中的数据保存到 dump.rdb 文件中，定时全量保存，保存的是数据。</li><li>**AOF：**把所有的对 Redis 的服务器进行修改的命令都保存到 appendonly.aof 文件中，定时向文件中追加，保存的是命令。</li></ul><h3 id="3-RDB的特点"><a href="#3-RDB的特点" class="headerlink" title="3.RDB的特点"></a>3.RDB的特点</h3><p>RDB性能高，速率快，全量持久化，但数据可靠性低。</p><p>(1)rdb文件</p><p>​    RDB(Redis DataBase)：基于时间的快照，Redis默认是会以快照”RDB”的形式将数据持久化到磁盘的一个二进制文件 dump.rdb中，其默认只保留当前最新的一次快照，特点是执行速度比较快，缺点是可能会丢失从上次快照到当前时间点之间未做快照的数据。</p><p>​    但是我们可以通过配置文件配置多个时间点的备份,这样就可以保留多个备份,当出现问题时候方便恢复到不同时间节点,很适合备份,并且此文件格式支持不少第三方工具可以进行后续的数据分析。比如:可以在最近24小时内,每小时进行一次备份RDB文件，并且在每个月的每一天，也备份一个RDB文件，这样的话，即便遇上问题，也可以随时将数据集还原到不同的版本，所以RDB 非常适合灾难恢复。</p><p>(2)优点</p><p>​    由于rdb文件都是二进制文件，所以很小，在灾难恢复的时候会快些。</p><p>​    他的效率（宕机恢复的效率，而不是持久化的效率）相对于aof要高（bgsave而不是save），因为每来个请求他都不会处理任何事，只是bgsave的时候他会fork()子进程且可能copyonwrite，但copyonwrite只是一个寻址的过程，纳秒级别的。而aof每次都是写盘操作，毫秒级别。没法比。</p><p>注：fork()子进程以及copyonwrite（写时复制）的详解可见文末的参考“RDB原理”</p><p>(3)缺点</p><p>​    数据可靠性比aof低，也就是会丢失的多。因为aof可以配置每秒都持久化或者每个命令处理完就持久化一次这种高频率的操作，而rdb的话虽然也是靠配置进行bgsave，但是没有aof配置那么灵活，也没aof持久化快，因为rdb每次全量，aof每次只追加。</p><h3 id="4-AOF的特点"><a href="#4-AOF的特点" class="headerlink" title="4.AOF的特点"></a>4.AOF的特点</h3><p>AOF数据可靠性高，增量持久化，但宕机恢复的效率相比于RDB还是略低。</p><p>(1)aof文件</p><p>​     AOF(Append Only File)：只追加文件，使用 AOF 做持久化，每一个写命令都通过 write 函数追加到 appendonly.aof 中。而RDB是压缩成<a href="https://so.csdn.net/so/search?q=%E4%BA%8C%E8%BF%9B%E5%88%B6&spm=1001.2101.3001.7020">二进制</a>等时机开子进程去干这件事。</p><p>(2)优点</p><p>①持久化的速度快，因为每次都只是追加，rdb每次都全量持久化。</p><p>②全程持久化，只需要在配置中开启 appendonly yes。这样 Redis 每执行一个修改数据的命令，都会把它添加到 AOF 文件中，当 Redis 重启时，将会读取 AOF 文件进行重放，恢复到 Redis 关闭前的最后时刻。</p><p>③数据相对更可靠，丢失少，使用 AOF 的优点是会让 Redis 变得非常耐久。可以设置不同的 Fsync 策略，AOF的默认策略是每秒钟 Fsync 一次，在这种配置下，就算发生故障停机，也最多丢失一秒钟的数据。</p><p>(3)缺点</p><p>​    灾难性恢复的时候过慢，因为aof每次都只追加原命令，导致aof文件过大，但是后面会rewrite，但是相对于rdb也是慢的。</p><h3 id="5-项目中如何选择这两种方式"><a href="#5-项目中如何选择这两种方式" class="headerlink" title="5.项目中如何选择这两种方式"></a>5.项目中如何选择这两种方式</h3><p>如果你追求性能，同时仍然可以承受数分钟内的数据丢失的话，那么可以使用 RDB 持久化。</p><p>如果你非常关心你的数据，并且性能对性能要求不是那么高的话，那么可以使用 AOF 持久化。</p><p>注：Redis 支持同时开启 RDB 和 AOF，系统重启后，Redis 会优先使用 AOF 来恢复数据，这样丢失的数据会最少。</p><h2 id="八、Redis-集群模式选择"><a href="#八、Redis-集群模式选择" class="headerlink" title="八、Redis 集群模式选择"></a>八、Redis 集群模式选择</h2><p>​    redis集群有三种模式  1.主从复制  2.哨兵模式  3.Cluster集群模式</p><p>主从复制：选取有三台（奇数）服务器，一主两从，主节点负责写入，从节点负责读取，达到读写分离，此时三台集群上的数据一致，但是有个不好的点在于 当主节点挂了的话，就需要人为操作，来重启主节点。</p><p>哨兵模式：哨兵模式在原有主从复制的基础上加了哨兵机制，简单理解就是监测各个节点活性，假如主节点挂了，还可以自动重启主节点。</p><p>Cluster集群模式：将数据均分到所有主节点上。与主从复制不同，集群中的节点不存储全量数据，而是分片存储。这种方式适合数据量较大的场景，可以均摊服务器压力</p><h2 id="九、Redis-哨兵的基本原理"><a href="#九、Redis-哨兵的基本原理" class="headerlink" title="九、Redis 哨兵的基本原理"></a>九、Redis 哨兵的基本原理</h2><p><img src="/2021/04/22/Redis%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/470bac817637351a0240be4294be8f4b.jpeg" alt="图片"></p><p>如图，是 Redis Sentinel（哨兵）的架构图。Redis Sentinel（哨兵）主要功能包括主节点存活检测、主从运行情况检测、自动故障转移、主从切换。</p><p>Redis Sentinel 最小配置是一主一从。Redis 的 Sentinel 系统可以用来管理多个 Redis 服务器。</p><p>该系统可以执行以下四个任务：</p><ul><li>**监控：**不断检查主服务器和从服务器是否正常运行。</li><li>**通知：**当被监控的某个 Redis 服务器出现问题，Sentinel 通过 API 脚本向管理员或者其他应用程序发出通知。</li><li>**自动故障转移：**当主节点不能正常工作时，Sentinel 会开始一次自动的故障转移操作，它会将与失效主节点是主从关系的其中一个从节点升级为新的主节点，并且将其他的从节点指向新的主节点，这样人工干预就可以免了。</li><li>**配置提供者：**在 Redis Sentinel 模式下，客户端应用在初始化时连接的是 Sentinel 节点集合，从中获取主节点的信息。</li></ul><p>哨兵的工作原理：</p><p><img src="/2021/04/22/Redis%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/ffb3a31699849f207318312704875795.jpeg" alt="图片"></p><p>①每个 Sentinel 节点都需要定期执行以下任务：每个 Sentinel 以每秒一次的频率，向它所知的主服务器、从服务器以及其他的 Sentinel 实例发送一个 PING 命令。（如上图）</p><p><img src="/2021/04/22/Redis%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/2c3e23d30640c78d9e979e30271f2aec.jpeg" alt="图片"></p><p>②如果一个实例距离最后一次有效回复 PING 命令的时间超过 down-after-milliseconds 所指定的值，那么这个实例会被 Sentinel 标记为主观下线。（如上图）</p><p><img src="/2021/04/22/Redis%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/7bffd1f46d77e42a2a693a6798623090.jpeg" alt="图片"></p><p>③如果一个主服务器被标记为主观下线，那么正在监视这个服务器的所有 Sentinel 节点，要以每秒一次的频率确认主服务器的确进入了主观下线状态。</p><p><img src="/2021/04/22/Redis%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/772194763db4a8ef9b863643906d8670.jpeg" alt="图片"></p><p>④如果一个主服务器被标记为主观下线，并且有足够数量的 Sentinel（至少要达到配置文件指定的数量）在指定的时间范围内同意这一判断，那么这个主服务器被标记为客观下线。</p><p><img src="/2021/04/22/Redis%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/b4682bde082521063221016e22b3ff37.jpeg" alt="图片"></p><p>⑤一般情况下，每个 Sentinel 会以每 10 秒一次的频率向它已知的所有主服务器和从服务器发送 INFO 命令。</p><p>当一个主服务器被标记为客观下线时，Sentinel 向下线主服务器的所有从服务器发送 INFO 命令的频率，会从 10 秒一次改为每秒一次。</p><p><img src="/2021/04/22/Redis%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/307d347ba48f473e8e957fc735932186.jpeg" alt="图片"></p><p>⑥Sentinel 和其他 Sentinel 协商客观下线的主节点的状态，如果处于 SDOWN 状态，则投票自动选出新的主节点，将剩余从节点指向新的主节点进行数据复制。</p><p><img src="/2021/04/22/Redis%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/a3af2976aff3ddb91e0ef0aac7893923.jpeg" alt="图片"></p><p>⑦当没有足够数量的 Sentinel 同意主服务器下线时，主服务器的客观下线状态就会被移除。</p><p>当主服务器重新向 Sentinel 的 PING 命令返回有效回复时，主服务器的主观下线状态就会被移除。</p><h2 id="十、Redis缓存雪崩、穿透、击穿概念及解决办法"><a href="#十、Redis缓存雪崩、穿透、击穿概念及解决办法" class="headerlink" title="十、Redis缓存雪崩、穿透、击穿概念及解决办法"></a>十、Redis缓存雪崩、穿透、击穿概念及解决办法</h2><p><strong>雪崩场景：</strong></p><p>​     如果首页所有 Key 的失效时间都是 12 小时，中午 12 点刷新的，我零点有个大促活动大量用户涌入，假设每秒 6000 个请求，本来缓存可以抗住每秒 5000 个请求，但是缓存中所有 Key 都失效了，此时 6000 个&#x2F;秒的请求全部落在了数据库上，数据库必然扛不住，真实情况可能 数据库都没反应过来直接挂了，此时，如果没什么特别的方案来处理，DBA 很着急，重启数据库，但是数据库立马又被新流量给打死了。这就是我理解的缓存雪崩。</p><p><strong>雪崩解决方案：</strong></p><p>​    在批量往 Redis 存数据的时候，把每个 Key 的失效时间都加个随机值就好了，这样可以保证数据不会再同一时间大面积失效，或者设置热点数据永不过期。</p><p><strong>穿透场景：</strong></p><p>​    缓存穿透是指缓存和数据库中都没有的数据，而用户（黑客）不断发起请求，这样的不断攻击导致数据库压力很大，严重会击垮数据库</p><p><strong>穿透解决方案：</strong></p><p>​    缓存穿透我会在接口层增加校验，比如用户鉴权，参数做校验，不合法的校验直接 return，或者 使用高级用法布隆过滤器（Bloom Filter）这个也能很好的预防缓存穿透的发生。</p><p><strong>击穿场景：</strong></p><p>​    缓存击穿，这个跟缓存雪崩有点像，但是又有一点不一样，缓存雪崩是因为大面积的缓存失效，打崩了 DB。而缓存击穿不同的是缓存击穿是指一个 Key 非常热点，在不停地扛着大量的请求，大并发集中对这一个点进行访问，当这个 Key 在失效的瞬间，持续的大并发直接落到了数据库上，就在这个 Key 的点上击穿了缓存。</p><p><strong>击穿解决方案：</strong></p><p>​    使用互斥锁或者分布式锁来对并发请求进行控制，避免对同一资源的并发读写竞争，另外也可以使用热点数据预加载等机制来提前将热点数据加入缓存，在其失效时快速刷新缓存</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>非关系型数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>数据库</tag>
      
      <tag>非关系型数据库</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MongoDB图文详解</title>
    <link href="/2021/03/17/MongoDB%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/"/>
    <url>/2021/03/17/MongoDB%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h3 id="1-1-MongoDB概述"><a href="#1-1-MongoDB概述" class="headerlink" title="1.1 MongoDB概述"></a>1.1 <code>MongoDB</code>概述</h3><p><code>MongoDB</code>是一个基于<a href="https://so.csdn.net/so/search?q=%E5%88%86%E5%B8%83%E5%BC%8F&spm=1001.2101.3001.7020">分布式</a>文件存储的数据库。由<code>C++</code>语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。</p><p><code>MongoDB</code>是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。</p><p>它支持的数据结构非常松散，是类似<code>json</code>的<code>bson</code>格式，因此可以存储比较复杂的数据类型。<code>Mongo</code>最大的特点是它支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。</p><p><code>MongoDB</code>服务端可运行在<code>Linux</code>、<code>Windows</code>平台，支持<code>32</code>位和<code>64</code>位应用，默认端口为<code>27017</code>。<br>推荐运行在<code>64</code>位平台，因为<code>MongoD</code>B在<code>32</code>位模式运行时支持的最大文件尺寸为<code>2</code>GB。</p><h3 id="1-2-MongoDB-主要特点"><a href="#1-2-MongoDB-主要特点" class="headerlink" title="1.2 MongoDB 主要特点"></a>1.2 <code>MongoDB </code>主要特点</h3><h4 id="1-2-1-文档"><a href="#1-2-1-文档" class="headerlink" title="1.2.1 文档"></a>1.2.1 文档</h4><p><code>MongoDB</code>中的记录是一个文档，它是由字段和值对组成的数据结构。<br>多个键及其关联的值有序地放在一起就构成了文档。<br><code>MongoDB</code>文档类似于<code>JSON</code>对象。字段的值可以包括其他文档，数组和文档数组。<br><img src="/2021/03/17/MongoDB%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/68af6e5064f5dc8e5693bd4cacd973ff.png" alt="在这里插入图片描述"><br><code>&#123;“greeting”:“hello,world”&#125;</code>这个文档只有一个键<code>“greeting”</code>，对应的值为<code>“hello,world”</code>。多数情况下，文档比这个更复杂，它包含多个键&#x2F;值对。</p><p>例如：<code>&#123;“greeting”:“hello,world”,“foo”: 3&#125;</code> 文档中的键&#x2F;值对是有序的，下面的文档与上面的文档是完全不同的两个文档。<code>&#123;“foo”: 3 ,“greeting”:“hello,world”&#125;</code></p><p><strong>文档中的值不仅可以是双引号中的字符串，也可以是其他的数据类型，例如，整型、布尔型等，也可以是另外一个文档，即文档可以嵌套。文档中的键类型只能是字符串</strong>。</p><p>使用文档的优点是：</p><ul><li>文档（即对象）对应于许多编程语言中的本机数据类型</li><li>嵌入式文档和数组减少了对昂贵连接的需求</li><li>动态模式支持流畅的多态性</li></ul><h4 id="1-3-2-集合"><a href="#1-3-2-集合" class="headerlink" title="1.3.2 集合"></a>1.3.2 集合</h4><p><strong>集合就是一组文档，类似于关系数据库中的表。</strong></p><p>集合是无模式的，集合中的文档可以是各式各样的。例如，<code>&#123;“hello,word”:“Mike”&#125;</code>和<code>&#123;“foo”: 3&#125;</code>，它们的键不同，值的类型也不同，但是它们可以存放在同一个集合中，也就是不同模式的文档都可以放在同一个集合中。</p><p><strong>既然集合中可以存放任何类型的文档，那么为什么还需要使用多个集合？</strong><br>这是因为所有文档都放在同一个集合中，无论对于开发者还是管理员，都很难对集合进行管理，而且这种情形下，对集合的查询等操作效率都不高。所以在实际使用中，往往将文档分类存放在不同的集合中。<br>例如，对于网站的日志记录，可以根据日志的级别进行存储，<code>Info</code>级别日志存放在<code>Info</code> 集合中，<code>Debug</code> 级别日志存放在<code>Debug</code> 集合中，这样既方便了管理，也提供了查询性能。<br>但是需要注意的是，这种对文档进行划分来分别存储并不是<code>MongoDB</code> 的强制要求，用户可以灵活选择。</p><p>可以使用<code>“.”</code>按照命名空间将集合划分为子集合。<br>例如，对于一个博客系统，可能包括<code>blog.user </code>和<code>blog.article </code>两个子集合，这样划分只是让组织结构更好一些，<code>blog </code>集合和<code>blog.user</code>、<code>blog.article </code>没有任何关系。虽然子集合没有任何特殊的地方，但是使用子集合组织数据结构清晰，这也是<code>MongoDB </code>推荐的方法。</p><h4 id="1-3-3-数据库"><a href="#1-3-3-数据库" class="headerlink" title="1.3.3 数据库"></a>1.3.3 数据库</h4><p><code>MongoDB</code> 中多个文档组成集合，多个集合组成数据库。</p><p>一个<code>MongoDB </code>实例可以承载多个数据库。它们之间可以看作相互独立，每个数据库都有独立的权限控制。在磁盘上，不同的数据库存放在不同的文件中。</p><p><code>MongoDB </code>中存在以下系统数据库。</p><ul><li><code>Admin</code> 数据库：一个权限数据库，如果创建用户的时候将该用户添加到<code>admin</code> 数据库中，那么该用户就自动继承了所有数据库的权限。</li><li><code>Local</code> 数据库：这个数据库永远不会被复制，可以用来存储本地单台服务器的任意集合。</li><li><code>Config</code> 数据库：当<code>MongoDB</code> 使用分片模式时，<code>config </code>数据库在内部使用，用于保存分片的信息。</li></ul><h4 id="1-3-4-数据模型"><a href="#1-3-4-数据模型" class="headerlink" title="1.3.4 数据模型"></a>1.3.4 数据模型</h4><p>一个<code>MongoDB </code>实例可以包含一组数据库，一个<code>DataBase </code>可以包含一组<code>Collection</code>（集合），一个集合可以包含一组<code>Document</code>（文档）。</p><p>一个<code>Document</code>包含一组<code>field</code>（字段），每一个字段都是一个<code>key/value pair</code></p><ul><li><p><code>key</code>: 必须为字符串类型</p></li><li><pre><code class="hljs">value<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs mel"><br>  ：可以包含如下类型<br><br>  - 基本类型，例如，<span class="hljs-string">`string，int，float，timestamp，binary`</span> 等类型<br>  - 一个<span class="hljs-string">`document`</span><br>  - 数组类型<br><br>### <span class="hljs-number">1.4</span> <span class="hljs-string">`Windows`</span>安装<span class="hljs-string">`MongoDB`</span><br><br>#### <span class="hljs-number">1.4</span><span class="hljs-number">.1</span> 下载<span class="hljs-string">`MongoDB`</span><br><br><span class="hljs-string">`MongoDB`</span>提供了可用于<span class="hljs-string">`32`</span>位系统和<span class="hljs-string">`64`</span>位系统的预编译二进制包（新版本没有了<span class="hljs-string">`32`</span>位系统的安装文件），你可以进入<span class="hljs-string">`MongoDB`</span>官网下载安装，<span class="hljs-string">`MongoDB`</span>的预编译二进制包的下载地址为：<span class="hljs-string">`https://www.mongodb.com/download-center/community`</span>，打开之后会看到如下图，直接点击<span class="hljs-string">`Download`</span>下载即可，也可以在<span class="hljs-string">`Version`</span>中选择你想要的版本：<br>![在这里插入图片描述](MongoDB%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/bd2180a0c430025e845b7511892c190a.png)<br><br>#### <span class="hljs-number">1.4</span><span class="hljs-number">.2</span> 安装<span class="hljs-string">`MongoDB`</span><br><br>双击打开文件进行安装，在安装过程中，可以通过点击 “<span class="hljs-string">`Custom`</span>(自定义)” 按钮来设置你的安装目录。<br>![在这里插入图片描述](MongoDB%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/dd6b8a5125d14b0813d4b894a6e0b4cf.png)<br>这里我选择安装在<span class="hljs-string">`E:\MongoDB`</span>这个目录下（安装目录会影响我们后面的配置）<br>![在这里插入图片描述](MongoDB%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/e4175bec094c93c2fa3198f6f422af4f.png)<br>这里选择直接<span class="hljs-string">`next`</span><br>![在这里插入图片描述](MongoDB%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/<span class="hljs-number">48135</span>ad76119ee06d10d5f09144dc754.png)<br>这里安装 <span class="hljs-string">`&quot;Install MongoDB Compass&quot; `</span>不勾选，否则可能要很长时间都一直在执行安装，<span class="hljs-string">`MongoDB Compass`</span>是一个图形界面管理工具，这里不安装也是没有问题的，可以自己去下载一个图形界面管理工具，比如<span class="hljs-string">`Robo3T`</span>。<br>![在这里插入图片描述](MongoDB%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/c2dcf56dcbf9af84bea01400cd1152e2.png)<br>之后稍微等待一会就安装好了。<br><br>#### <span class="hljs-number">1.4</span><span class="hljs-number">.3</span> 配置<span class="hljs-string">`MongoDB`</span><br><br><span class="hljs-string">`MongoDB`</span>的安装过程是很简单的，但是配置就比较麻烦了，可能会遇到各种各样的问题，需要你有足够的耐心和仔细。<br><br>首先要在<span class="hljs-string">`MongoDB`</span>的<span class="hljs-string">`data`</span>文件夹里新建一个<span class="hljs-string">`db`</span>文件夹和一个<span class="hljs-string">`log`</span>文件夹：<br>![在这里插入图片描述](MongoDB%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/<span class="hljs-number">169019</span>bfed75c0179558a73189cd6f03.png)<br>然后在<span class="hljs-keyword">log</span>文件夹下新建一个mongo.<span class="hljs-keyword">log</span>：<br>![在这里插入图片描述](MongoDB%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/<span class="hljs-number">0e8</span>f5e360b032fd9ce90dd7ee77b5a0b.png)<br>然后将<span class="hljs-string">`E:\MongoDB\bin`</span>添加到环境变量<span class="hljs-string">`path`</span>中，此时打开<span class="hljs-string">`cmd`</span>窗口运行一下<span class="hljs-string">`mongo`</span>命令，出现如下情况：<br>![在这里插入图片描述](MongoDB%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/ce17513c47fef290e9eb3df60d61042b.png)<br>这是为什么呢？这是因为我们还没有启动<span class="hljs-string">`MongoDB`</span>服务，自然也就连接不上服务了。那要怎么启动呢？在<span class="hljs-string">`cmd`</span>窗口中运行如下命令：<br><br></code></pre></td></tr></table></figure> mongod --dbpath E:\MongoDB\data\db</code></pre></li></ul><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mel"><br>需要注意的是：如果你没有提前创建<span class="hljs-string">`db`</span>文件夹，是无法启动成功的。运行成功之后，我们打开浏览器，输入<span class="hljs-string">`127.0.0.1:27017`</span>，看到如下图，就说明<span class="hljs-string">`MongoDB`</span>服务已经成功启动了。<br>![在这里插入图片描述](MongoDB%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/<span class="hljs-number">77</span>b1547194546cc209c76a5e957e7c05.png)<br>但是如果每次都要这么启动服务的话也太麻烦了吧，这里你可以选择设置成开机自启动，也可以选择用命令<span class="hljs-string">`net start mongodb`</span>来手动启动，这里我选择使用后者，具体方法如下。<br><br>还是打开<span class="hljs-string">`cmd`</span>窗口，不过这次是以管理员身份运行，然后输入如下命令：<br><br></code></pre></td></tr></table></figure><p>mongod –dbpath “E:\MongoDB\data\db” –logpath “E:\MongoDB\data\log\mongo.log” -install -serviceName “MongoDB”</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mel"><br>如果没有报错的话就说明成功添加到服务里了，可以使用<span class="hljs-string">`win+R`</span>然后输入<span class="hljs-string">`services.msc`</span>命令进行查看：<br>![在这里插入图片描述](MongoDB%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/<span class="hljs-number">062</span>bd6f16a9ea746ab2c48e7fea5d6cf.png)<br>默认是自动运行的，这里我选择把它改成手动的。然后在<span class="hljs-string">`cmd`</span>窗口中运行<span class="hljs-string">`net start mongodb`</span>：<br>![在这里插入图片描述](MongoDB%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/ee7ba8a2a7ab7622231d53efd99b3a06.png)<br>怎么解决呢？两个步骤：<br><span class="hljs-number">1</span>）运行<span class="hljs-string">`sc delete mongodb`</span>删除服务；<br><span class="hljs-number">2</span>）再运行一次配置服务的命令：<br><br></code></pre></td></tr></table></figure><p>mongod –dbpath “E:\MongoDB\data\db” –logpath “E:\MongoDB\data\log\mongo.log” -install -serviceName “MongoDB”</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs mel"><br>然后再运行<span class="hljs-string">`net start mongodb`</span>，服务启动成功：<br>![在这里插入图片描述](MongoDB%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/<span class="hljs-number">9</span>acc9b0204dcb2419f6f35d385d11240.png)<br>可能遇到的问题：<br><span class="hljs-number">1</span>、<span class="hljs-string">`mongod`</span>不是内部或外部命令<br>出现这种问题说明你没有把<span class="hljs-string">`bin`</span>目录添加到环境变量之中，重新添加一下即可解决。<br><br><span class="hljs-number">2</span>、服务名无效<br>首先是看你输入的服务名称是否有误，然后再查看本地服务中有没有<span class="hljs-string">`MongoDB`</span>服务，如果没有服务，则运行命令添加服务即可。<br><br><span class="hljs-number">3</span>、发生服务特定错误：<span class="hljs-string">`100`</span><br>删除<span class="hljs-string">`db`</span>文件夹下的<span class="hljs-string">`mongod.lock`</span>和<span class="hljs-string">`storage.bson`</span>两个文件，若删除完之后仍然出现这种问题，用<span class="hljs-string">`sc delete mongodb`</span>删除服务，再配置一下服务就能解决了。<br><br>#### <span class="hljs-number">1.4</span><span class="hljs-number">.4</span> 安装一个可视化工具<br><br>官网下载 <span class="hljs-string">`RoBo 3T（Robomongo is now Robo 3T）`</span><br>下载地址：<span class="hljs-string">`https://robomongo.org/download`</span><br>![在这里插入图片描述](MongoDB%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/<span class="hljs-number">25</span>f0054494c50492de62a0a9914e7b9b.png)<br>![在这里插入图片描述](MongoDB%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/<span class="hljs-number">8834336317</span>f5dcd45bc70aba13d9e37d.png)<br>双击安装包安装，修改安装路径，不停下一步，点击安装。<br>![在这里插入图片描述](MongoDB%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/<span class="hljs-number">6</span>c7a608d50f395156924853d955fc91c.png)<br>打开后，有一个填信息的页面，<span class="hljs-string">`name`</span>、<span class="hljs-string">`email`</span>，暂时不用管，直接<span class="hljs-string">`finish`</span>。<br>启动<span class="hljs-string">`MongoDB`</span>服务。<br>点击弹出框中的<span class="hljs-string">`create`</span>，创建新连接，可以修改连接名<span class="hljs-string">`name`</span>，连接<span class="hljs-string">`IP`</span>(下图<span class="hljs-string">`IP`</span>为本地<span class="hljs-string">`IP`</span>)，端口(默认)<br>![在这里插入图片描述](MongoDB%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/e6abf43c32cc63b4ac3e908ee2f14a31.png)<br>连接成功后，右击<span class="hljs-string">`localhost`</span>，选择<span class="hljs-string">`create Database`</span>，创建数据库<br>![在这里插入图片描述](MongoDB%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/<span class="hljs-number">459</span>bc287cc9e026bcfcc2bacbf52e21e.png)<br>创建数据库<span class="hljs-string">`firstTest`</span>，然后右击<span class="hljs-string">`firstTest`</span>，选择<span class="hljs-string">`open Shell`</span>，开始进行<span class="hljs-string">`shell`</span>命令来创建数据库中的集合和文档。<br>![在这里插入图片描述](MongoDB%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/cc05db6938fda3ac46b54c6a9b507cbe.png)<br><br>### <span class="hljs-number">1.5</span> <span class="hljs-string">`Linux`</span>安装<span class="hljs-string">`MongoDB`</span><br><br>#### <span class="hljs-number">1.5</span><span class="hljs-number">.1</span> 下载<span class="hljs-string">`MongoDB`</span><br><br>官方下载地址：<span class="hljs-string">`https://www.mongodb.com/download-center/community`</span><br><br></code></pre></td></tr></table></figure><p>wget <a href="https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-4.2.1.tgz">https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-4.2.1.tgz</a></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>#### <span class="hljs-number">1.5</span><span class="hljs-number">.2</span> 解压安装<br><br><span class="hljs-number">1</span>、解压<br><br></code></pre></td></tr></table></figure><p>tar -zxvf mongodb-linux-x86_64-rhel70-4.2.1.tgz</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br><span class="hljs-number">2</span>、创建目录`/usr/local/mongo`，并将解压完的`mongodb`目录移动到`/usr/local/mongo`下<br><br></code></pre></td></tr></table></figure><p>mkdir -p &#x2F;usr&#x2F;local&#x2F;mongo<br>mv mongodb-linux-x86_64-rhel70-4.2.1&#x2F;* &#x2F;usr&#x2F;local&#x2F;mongo&#x2F; </p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br><span class="hljs-number">3</span>、切到`/usr/local/mongo`目录下，创建目录<br><br></code></pre></td></tr></table></figure><p>mkdir -p data&#x2F;db        #数据库目录<br>mkdir -p logs           #日志目录<br>mkdir -p conf           #配置文件目录<br>mkdir -p pids           #进程描述文件目录</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mel"><br>创建好的目录如下：<br>![在这里插入图片描述](MongoDB%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/<span class="hljs-number">38e7</span>faedc4fb67843c2d61728be8d764.png)<br><span class="hljs-number">4</span>、在<span class="hljs-string">`conf`</span>目录，增加配置文件<span class="hljs-string">`mongo.conf`</span><br><br></code></pre></td></tr></table></figure><p>vi &#x2F;usr&#x2F;local&#x2F;mongo&#x2F;conf&#x2F;mongo.conf<br>1<br>#数据保存路径<br>dbpath&#x3D;&#x2F;usr&#x2F;local&#x2F;mongo&#x2F;data&#x2F;db&#x2F;<br>#日志保存路径<br>logpath&#x3D;&#x2F;usr&#x2F;local&#x2F;mongo&#x2F;logs&#x2F;mongo.log<br>#进程描述文件<br>pidfilepath&#x3D;&#x2F;usr&#x2F;local&#x2F;mongo&#x2F;pids&#x2F;mongo.pid<br>#日志追加写入<br>logappend&#x3D;true<br>bind_ip_all&#x3D;true<br>#mongo默认端口<br>port&#x3D;27017<br>#操作日志容量<br>oplogSize&#x3D;10000<br>#开启子进程<br>fork&#x3D;true</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br><span class="hljs-number">5</span>、通过配置文件启动`mongo`服务端<br><br></code></pre></td></tr></table></figure><p>&#x2F;usr&#x2F;local&#x2F;mongo&#x2F;bin&#x2F;mongod -f &#x2F;usr&#x2F;local&#x2F;mongo&#x2F;conf&#x2F;mongo.conf</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><br>启动成功如下：<br>![在这里插入图片描述](MongoDB<span class="hljs-variable">%E5</span><span class="hljs-variable">%9</span>B<span class="hljs-variable">%BE</span><span class="hljs-variable">%E6</span><span class="hljs-variable">%96</span><span class="hljs-variable">%87</span><span class="hljs-variable">%E8</span><span class="hljs-variable">%AF</span><span class="hljs-variable">%A6</span><span class="hljs-variable">%E8</span><span class="hljs-variable">%A7</span><span class="hljs-variable">%A3</span>/<span class="hljs-number">80e16519452</span>b<span class="hljs-number">5</span>d<span class="hljs-number">3</span>a<span class="hljs-number">6</span><span class="hljs-keyword">c</span><span class="hljs-number">03</span>a<span class="hljs-number">584</span>ac<span class="hljs-number">115288</span>.png)<br><span class="hljs-number">6</span>、启动`mongo`客户端<br><br></code></pre></td></tr></table></figure><p>&#x2F;usr&#x2F;local&#x2F;mongo&#x2F;bin&#x2F;mongo –host 127.0.0.1 –port 27017</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mel"><br>启动成功如下：<br>![在这里插入图片描述](MongoDB%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/<span class="hljs-number">1</span>ff26f58a735150ecc53eabf255e7e32.png)<br>至此安装完成~<br><br>### <span class="hljs-number">1.6</span> <span class="hljs-string">`MongoDB`</span>基本操作及增删改查<br><br>#### <span class="hljs-number">1.6</span><span class="hljs-number">.1</span> 基本操作<br><br>登陆数据库<br><br></code></pre></td></tr></table></figure><p>mongo</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><br><span class="hljs-strong">**查看数据库**</span><br><br></code></pre></td></tr></table></figure><p>show databases;</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><br>![在这里插入图片描述](MongoDB<span class="hljs-variable">%E5</span><span class="hljs-variable">%9</span>B<span class="hljs-variable">%BE</span><span class="hljs-variable">%E6</span><span class="hljs-variable">%96</span><span class="hljs-variable">%87</span><span class="hljs-variable">%E8</span><span class="hljs-variable">%AF</span><span class="hljs-variable">%A6</span><span class="hljs-variable">%E8</span><span class="hljs-variable">%A7</span><span class="hljs-variable">%A3</span>/b<span class="hljs-number">0</span>f<span class="hljs-number">3754</span>b<span class="hljs-number">7</span>a<span class="hljs-number">816333</span><span class="hljs-keyword">c</span><span class="hljs-number">126</span><span class="hljs-keyword">cc</span><span class="hljs-number">110380</span>a<span class="hljs-number">0</span>a<span class="hljs-number">8</span>.png)<br>**选择数据库**<br>`use `数据库名<br>![在这里插入图片描述](MongoDB<span class="hljs-variable">%E5</span><span class="hljs-variable">%9</span>B<span class="hljs-variable">%BE</span><span class="hljs-variable">%E6</span><span class="hljs-variable">%96</span><span class="hljs-variable">%87</span><span class="hljs-variable">%E8</span><span class="hljs-variable">%AF</span><span class="hljs-variable">%A6</span><span class="hljs-variable">%E8</span><span class="hljs-variable">%A7</span><span class="hljs-variable">%A3</span>/<span class="hljs-number">8</span>d<span class="hljs-number">8141</span>b<span class="hljs-number">608</span>b<span class="hljs-number">16</span>ae<span class="hljs-number">288</span>da<span class="hljs-number">0</span>b<span class="hljs-number">8</span>bc<span class="hljs-number">8</span>da<span class="hljs-number">6</span><span class="hljs-keyword">c</span><span class="hljs-number">6</span><span class="hljs-keyword">c</span>.png)<br>如果切换到一个没有的数据库，例如`use admin<span class="hljs-number">2</span>`，那么会隐式创建这个数据库。（后期当该数据库有数据时，系统自动创建）<br><br></code></pre></td></tr></table></figure><p>use admin2</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><br>![在这里插入图片描述](MongoDB<span class="hljs-variable">%E5</span><span class="hljs-variable">%9</span>B<span class="hljs-variable">%BE</span><span class="hljs-variable">%E6</span><span class="hljs-variable">%96</span><span class="hljs-variable">%87</span><span class="hljs-variable">%E8</span><span class="hljs-variable">%AF</span><span class="hljs-variable">%A6</span><span class="hljs-variable">%E8</span><span class="hljs-variable">%A7</span><span class="hljs-variable">%A3</span>/<span class="hljs-number">5458</span>a<span class="hljs-number">870</span>b<span class="hljs-number">09</span>d<span class="hljs-number">88</span>a<span class="hljs-number">1</span>f<span class="hljs-number">1</span>ed<span class="hljs-number">3</span>fd<span class="hljs-number">93e847320</span>.png)<br>**查看集合**<br><br></code></pre></td></tr></table></figure><p>show collections</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><br>![在这里插入图片描述](MongoDB<span class="hljs-variable">%E5</span><span class="hljs-variable">%9</span>B<span class="hljs-variable">%BE</span><span class="hljs-variable">%E6</span><span class="hljs-variable">%96</span><span class="hljs-variable">%87</span><span class="hljs-variable">%E8</span><span class="hljs-variable">%AF</span><span class="hljs-variable">%A6</span><span class="hljs-variable">%E8</span><span class="hljs-variable">%A7</span><span class="hljs-variable">%A3</span>/<span class="hljs-number">404</span>ea<span class="hljs-number">355</span>cfced<span class="hljs-number">9</span>a<span class="hljs-number">1</span>fc<span class="hljs-number">82</span>cdf<span class="hljs-number">5</span>f<span class="hljs-number">6e7</span>e<span class="hljs-number">5</span>d<span class="hljs-number">6</span>.png)<br>**创建集合**<br><br></code></pre></td></tr></table></figure><p>db.createCollection(‘集合名’)</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><br>![在这里插入图片描述](MongoDB<span class="hljs-variable">%E5</span><span class="hljs-variable">%9</span>B<span class="hljs-variable">%BE</span><span class="hljs-variable">%E6</span><span class="hljs-variable">%96</span><span class="hljs-variable">%87</span><span class="hljs-variable">%E8</span><span class="hljs-variable">%AF</span><span class="hljs-variable">%A6</span><span class="hljs-variable">%E8</span><span class="hljs-variable">%A7</span><span class="hljs-variable">%A3</span>/ed<span class="hljs-number">4</span><span class="hljs-keyword">c</span><span class="hljs-number">38322</span>cdb<span class="hljs-number">8</span><span class="hljs-keyword">cc</span><span class="hljs-number">4</span>aefa<span class="hljs-number">3878</span>b<span class="hljs-number">45</span>f<span class="hljs-number">9</span>a<span class="hljs-number">31</span>.png)<br>**删除集合**<br><br></code></pre></td></tr></table></figure><p><code>db.集合名.drop()</code></p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mel"><br>![在这里插入图片描述](MongoDB%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/<span class="hljs-number">52703</span>c7fbd07175e5dbde2a479a6ad75.png)<br>**删除数据库**<br>通过<span class="hljs-string">`use`</span>语法选择数据<br>通过<span class="hljs-string">`db.dropDataBase()`</span>删除数据库<br>![在这里插入图片描述](MongoDB%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/<span class="hljs-number">9e0</span>cbbdfb3b19b72b9bb48024dbd39db.png)<br><br>#### <span class="hljs-number">1.6</span><span class="hljs-number">.2</span> 增删改查<br><br>##### <span class="hljs-number">1.6</span><span class="hljs-number">.2</span><span class="hljs-number">.1</span> 增加<br><br></code></pre></td></tr></table></figure><p>db.集合名.insert(JSON数据)</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>如果集合存在，那么直接插入数据。如果集合不存在，那么会隐式创建。<br><br>示例：在`test2`数据库的`c1`集合中插入数据（姓名叫`webopenfather`年龄`18`岁）<br><br></code></pre></td></tr></table></figure><p>use test2 db.c1.insert({uname:”webopenfather”,age:18})</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><br><span class="hljs-bullet">- </span>数据库和集合不存在都隐式创建<br><br><span class="hljs-bullet">- </span>对象的键统一不加引号（方便看），但是查看集合数据时系统会自动加<br><br><span class="hljs-bullet">- </span><span class="hljs-code">```</span><br><span class="hljs-code">  mongodb</span><br></code></pre></td></tr></table></figure><p>  会给每条数据增加一个全球唯一的</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">_<span class="hljs-built_in">id</span><br></code></pre></td></tr></table></figure><p>  键</p><ul><li><p><code>_id</code>键的组成<br><img src="/2021/03/17/MongoDB%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/a2e72a45461564de9265d5ffde408e09.png" alt="在这里插入图片描述"></p></li><li><p>自己增加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">_<span class="hljs-built_in">id</span><br></code></pre></td></tr></table></figure><p>可以，只需要给插入的</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">JSON</span><br></code></pre></td></tr></table></figure><p>数据增加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">_<span class="hljs-built_in">id</span><br></code></pre></td></tr></table></figure><p>键即可覆盖（但实战强烈不推荐）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">db.c1.<span class="hljs-title function_ invoke__">insert</span>(&#123;<span class="hljs-attr">_id</span>:<span class="hljs-number">1</span>, <span class="hljs-attr">uname</span>:<span class="hljs-string">&quot;webopenfather&quot;</span>, <span class="hljs-attr">age</span>:<span class="hljs-number">18</span>&#125;)<br></code></pre></td></tr></table></figure></li></ul><p><strong>一次性插入多条数据</strong><br>传递数据，数组中写一个个<code>JSON</code>数据即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">db.c1.<span class="hljs-title function_ invoke__">insert</span>([     &#123;<span class="hljs-attr">uname</span>:<span class="hljs-string">&quot;z3&quot;</span>, <span class="hljs-attr">age</span>:<span class="hljs-number">3</span>&#125;,     &#123;<span class="hljs-attr">uname</span>:<span class="hljs-string">&quot;z4&quot;</span>, <span class="hljs-attr">age</span>:<span class="hljs-number">4</span>&#125;,     &#123;<span class="hljs-attr">uname</span>:<span class="hljs-string">&quot;w5&quot;</span>, <span class="hljs-attr">age</span>:<span class="hljs-number">5</span>&#125; ])<br></code></pre></td></tr></table></figure><p><strong>快速插入<code>10</code>条数据</strong><br>由于<code>mongodb</code>底层使用<code>JS</code>引擎实现的，所以支持部分<code>js</code>语法。因此：可以写<code>for</code>循环</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i=<span class="hljs-number">1</span>; i&lt;=<span class="hljs-number">10</span>; i++) &#123;     db.c2.<span class="hljs-title function_ invoke__">insert</span>(&#123;<span class="hljs-attr">uanme</span>: <span class="hljs-string">&quot;a&quot;</span>+i, <span class="hljs-attr">age</span>: i&#125;) &#125;<br></code></pre></td></tr></table></figure><p><strong>查询文档</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">db.集合名.<span class="hljs-built_in">find</span>(条件[,查询的列])<br></code></pre></td></tr></table></figure><table><thead><tr><th>条件</th><th>写法</th></tr></thead><tbody><tr><td>查询所有的数据</td><td>{}或者不写</td></tr><tr><td>查询age&#x3D;6的数据</td><td>{age:6}</td></tr><tr><td>既要age&#x3D;6又要性别&#x3D;男</td><td>{age:6,sex:‘男’}</td></tr></tbody></table><table><thead><tr><th>查询的列（可选参数）</th><th>写法</th></tr></thead><tbody><tr><td>查询全部列（字段）</td><td>不写</td></tr><tr><td>只显示age列（字段）</td><td>{age:1}</td></tr><tr><td>除了age列（字段）都显示</td><td>{age:0}</td></tr></tbody></table><p>其他语法</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">db.集合名.<span class="hljs-built_in">find</span>(&#123;<br>            键:&#123;运算符：值&#125;<br>            &#125;)<br></code></pre></td></tr></table></figure><table><thead><tr><th>运算符</th><th>作用</th></tr></thead><tbody><tr><td>$gt</td><td>大于</td></tr><tr><td>$gte</td><td>大于等于</td></tr><tr><td>$lt</td><td>小于</td></tr><tr><td>$lte</td><td>小于等于</td></tr><tr><td>$ne</td><td>不等于</td></tr><tr><td>$in</td><td>in</td></tr><tr><td>$nin</td><td>not in</td></tr><tr><td><strong>实例练习</strong></td><td></td></tr><tr><td>查询所有数据</td><td></td></tr></tbody></table><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">db.c1.<span class="hljs-built_in">find</span>()<br></code></pre></td></tr></table></figure><p><img src="/2021/03/17/MongoDB%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/110264d03c2d08d0a2befa2d2bb676e1.png" alt="在这里插入图片描述"><br>系统的<code>_id</code>无论如何都会存在</p><p>1、查询<code>age</code>大于<code>5</code>的数据</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">db.c1.<span class="hljs-built_in">find</span>(&#123;age:&#123;<span class="hljs-variable">$gt</span>:5&#125;&#125;)<br></code></pre></td></tr></table></figure><p><img src="/2021/03/17/MongoDB%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/a1eea168bea875edbded0059f8574caa.png" alt="在这里插入图片描述"><br>2、查询年龄是<code>5</code>岁、<code>8</code>岁、<code>10</code>岁的数据</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">db<span class="hljs-selector-class">.c2</span><span class="hljs-selector-class">.find</span>(&#123;age:&#123;<span class="hljs-variable">$in</span>:<span class="hljs-selector-attr">[5,8,10]</span>&#125;&#125;)<br></code></pre></td></tr></table></figure><p><img src="/2021/03/17/MongoDB%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/f7997d7b39e0ed11ac53b6c26f6fc009.png" alt="在这里插入图片描述"><br>3、只看年龄列，或者年龄以外的列<br><img src="/2021/03/17/MongoDB%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/9f638c9025983e6c94eba99365175ca1.png" alt="在这里插入图片描述"></p><h4 id="1-6-3-修改文档"><a href="#1-6-3-修改文档" class="headerlink" title="1.6.3 修改文档"></a>1.6.3 修改文档</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">db</span>.集合名.<span class="hljs-keyword">update</span>(条件,新数据[是否新增,是否修改多条,])<br></code></pre></td></tr></table></figure><ul><li>新数据此数据需要使用修改器，如果不使用，那么会将新数据替换原来的数据。<code>1db.集合名.update(条件,&#123;修改器:&#123;键:值&#125;&#125;[是否新增,是否修改多条,])</code><br>修改器作用<code>inc</code>递增<code>rename</code>重命名列<code>set</code>修改列值<code>unset</code>删除列</li><li>是否新增<br>指条件匹配不到数据则插入(<code>true</code>是插入，<code>false</code>否不插入默认)<br><code>db.c3.update(&#123;uname:&quot;zs30&quot;&#125;,&#123;$set:&#123;age:30&#125;&#125;,true)</code><br><img src="/2021/03/17/MongoDB%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/03ae1eb7f3e9be02847d94e606f57f23.png" alt="在这里插入图片描述"></li><li>是否修改多条<br>指将匹配成功的数据都修改（<code>true</code>是，<code>false</code>否默认）<br><code>db.c3.update(&#123;uname:&quot;zs2&quot;&#125;,&#123;$set:&#123;age:30&#125;&#125;,false,true)</code></li></ul><p><strong>实例练习</strong><br>准备工作</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-keyword">use</span> test2;<br><span class="hljs-keyword">for</span>(var i = <span class="hljs-number">1</span>; i&lt;= <span class="hljs-number">10</span>; i++)&#123;<br>db.c3.insert( &#123;<span class="hljs-string">&quot;uname&quot;</span><span class="hljs-symbol">:<span class="hljs-string">&quot;zs&quot;</span>+i</span>,<span class="hljs-string">&quot;age&quot;</span><span class="hljs-symbol">:i</span>&#125; );<br>&#125;<br></code></pre></td></tr></table></figure><p>1、将<code>&#123;uname:&quot;zs1&quot;&#125;</code>改为<code>&#123;uname:&quot;zs2&quot;&#125;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">db.c3.update(&#123;<span class="hljs-built_in">uname</span>:<span class="hljs-string">&quot;zs1&quot;</span>&#125;,&#123;<span class="hljs-variable">$set</span>:&#123;<span class="hljs-built_in">uname</span>:<span class="hljs-string">&quot;zs2&quot;</span>&#125;&#125;)<br></code></pre></td></tr></table></figure><p><img src="/2021/03/17/MongoDB%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/fca89a535c7e20bc0c1ad3d5d6af10ea.png" alt="在这里插入图片描述"><br>2、给<code>&#123;uname:&quot;zs10&quot;&#125;</code>的年龄加<code>2</code>岁或减<code>2</code>岁</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">db.c3.<span class="hljs-title function_ invoke__">update</span>(&#123;<span class="hljs-attr">uname</span>:<span class="hljs-string">&quot;zs10&quot;</span>&#125;,&#123;<span class="hljs-variable">$inc</span>:&#123;<span class="hljs-attr">age</span>:<span class="hljs-number">2</span>&#125;&#125;)<br></code></pre></td></tr></table></figure><p><img src="/2021/03/17/MongoDB%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/71d0d67de8fec5f2ca7ae77de9acab86.png" alt="在这里插入图片描述"><br>递减只需要将<code>2</code>改为<code>-2</code>即可。</p><p>综合练习插入数据：<br><code>db.c4.insert( &#123;uname:&quot;神龙教主&quot;,age:888,who:&quot;男&quot;,other:&quot;非国人&quot;&#125;)</code>;</p><h4 id="1-6-4-删除文档"><a href="#1-6-4-删除文档" class="headerlink" title="1.6.4 删除文档"></a>1.6.4 删除文档</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">db.集合名.<span class="hljs-built_in">remove</span>(条件[,是否删除一条])<br></code></pre></td></tr></table></figure><ul><li>是否删除一条<br><code>true</code>：是（删除的数据为第一条）</li></ul><p><img src="/2021/03/17/MongoDB%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/b2c72ba0f3e05ec7b6a69887af149811.png" alt="在这里插入图片描述"></p><p><code>false</code>：否</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">db.c3.<span class="hljs-built_in">remove</span>(&#123;uname:<span class="hljs-string">&quot;zs3&quot;</span>&#125;)<br></code></pre></td></tr></table></figure><p><img src="/2021/03/17/MongoDB%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/a288057288a936fc18516a170b455573.png" alt="在这里插入图片描述"></p><h4 id="1-6-5-总结"><a href="#1-6-5-总结" class="headerlink" title="1.6.5 总结"></a>1.6.5 总结</h4><p>高级开发攻城狮统称：所有数据库都需要增删改查<code>CURD</code>标识</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">MongoDB`删除语法：`remove<br></code></pre></td></tr></table></figure><p>增<code>Create</code></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">db.集合名.<span class="hljs-keyword">insert</span>(<span class="hljs-type">JSON</span>数据)<br></code></pre></td></tr></table></figure><p>删<code>Delete</code></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">db.集合名.<span class="hljs-built_in">remove</span>(条件 [,是否删除一条<span class="hljs-literal">true</span>是<span class="hljs-literal">false</span>否默认])<br><br>也就是默认删除多条<br></code></pre></td></tr></table></figure><p>改<code>Update</code></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">db</span>.集合名.<span class="hljs-keyword">update</span>(条件， 新数据  [,是否新增,是否修改多条])<br><br>升级语法<span class="hljs-keyword">db</span>.集合名.<span class="hljs-keyword">update</span>(条件，&#123;修改器：&#123;键：值&#125;&#125;)<br></code></pre></td></tr></table></figure><p>查<code>Read</code></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">db.集合名.<span class="hljs-built_in">find</span>(条件 [,查询的列])<br></code></pre></td></tr></table></figure><h3 id="1-7-MongoDB存储数据类型"><a href="#1-7-MongoDB存储数据类型" class="headerlink" title="1.7 MongoDB存储数据类型"></a>1.7 <code>MongoDB</code>存储数据类型</h3><p><code>MongoDB</code>中每条记录称作一个文档，这个文档和我们平时用的<code>JSON</code>有点像，但也不完全一样。<code>JSON</code>是一种轻量级的数据交换格式。简洁和清晰的层次结构使得<code>JSON</code>成为理想的数据交换语言，<code>JSON</code>易于阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率，但是<code>JSON</code>也有它的局限性，比如它只有<code>null</code>、布尔、数字、字符串、数组和对象这几种数据类型，<strong>没有日期类型，只有一种数字类型，无法区分浮点数和整数，也没法表示正则表达式或者函数</strong>。由于这些局限性，<code>BSON</code>闪亮登场啦，<code>BSON</code>是一种类<code>JSON</code>的二进制形式的存储格式，简称<code>Binary JSON</code>，它和<code>JSON</code>一样，支持内嵌的文档对象和数组对象，但是<code>BSON</code>有<code>JSON</code>没有的一些数据类型，如<code>Date</code>和<code>BinData</code>类型，<code>MongoDB</code>使用<code>BSON</code>做为文档数据存储和网络传输格式。</p><h4 id="1-7-1-数字"><a href="#1-7-1-数字" class="headerlink" title="1.7.1 数字"></a>1.7.1 数字</h4><p><code>shell</code>默认使用<code>64</code>位浮点型数值，如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">db<span class="hljs-selector-class">.sang_collec</span><span class="hljs-selector-class">.insert</span>(&#123;<span class="hljs-attribute">x</span>:<span class="hljs-number">3.1415926</span>&#125;)<br>db<span class="hljs-selector-class">.sang_collec</span><span class="hljs-selector-class">.insert</span>(&#123;<span class="hljs-attribute">x</span>:<span class="hljs-number">3</span>&#125;)<br></code></pre></td></tr></table></figure><p>对于整型值，我们可以使用<code>NumberInt</code>或者<code>NumberLong</code>表示，如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">db<span class="hljs-selector-class">.sang_collec</span><span class="hljs-selector-class">.insert</span>(&#123;<span class="hljs-attribute">x</span>:<span class="hljs-built_in">NumberInt</span>(<span class="hljs-number">10</span>)&#125;)<br>db<span class="hljs-selector-class">.sang_collec</span><span class="hljs-selector-class">.insert</span>(&#123;<span class="hljs-attribute">x</span>:<span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">12</span>)&#125;)<br></code></pre></td></tr></table></figure><h4 id="1-7-2-字符串"><a href="#1-7-2-字符串" class="headerlink" title="1.7.2 字符串"></a>1.7.2 字符串</h4><p>字符串也可以直接存储，如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">db<span class="hljs-selector-class">.sang_collec</span><span class="hljs-selector-class">.insert</span>(&#123;<span class="hljs-attribute">x</span>:<span class="hljs-string">&quot;hello MongoDB!&quot;</span>&#125;)<br></code></pre></td></tr></table></figure><h4 id="1-7-3-正则表达式"><a href="#1-7-3-正则表达式" class="headerlink" title="1.7.3 正则表达式"></a>1.7.3 正则表达式</h4><p>正则表达式主要用在查询里边，查询时我们可以使用正则表达式，语法和<code>JavaScript</code>中正则表达式的语法相同，比如查询所有<code>key</code>为<code>x</code>，<code>value</code>以<code>hello</code>开始的文档且不区分大小写：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">db.sang_collec.<span class="hljs-built_in">find</span>(&#123;<span class="hljs-attr">x</span>:<span class="hljs-regexp">/^(hello)(.[a-zA-Z0-9])+/i</span>&#125;)<br></code></pre></td></tr></table></figure><h4 id="1-7-4-数组"><a href="#1-7-4-数组" class="headerlink" title="1.7.4 数组"></a>1.7.4 数组</h4><p>数组一样也是被支持的，如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">db</span>.sang_collec.insert(&#123;x:[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,new Date()]&#125;)<br></code></pre></td></tr></table></figure><p>数组中的数据类型可以是多种多样的。</p><h4 id="1-7-5-日期"><a href="#1-7-5-日期" class="headerlink" title="1.7.5 日期"></a>1.7.5 日期</h4><p><code>MongoDB</code>支持<code>Date</code>类型的数据，可以直接<code>new</code>一个<code>Date</code>对象，如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">db<span class="hljs-selector-class">.sang_collec</span><span class="hljs-selector-class">.insert</span>(&#123;<span class="hljs-attribute">x</span>:new <span class="hljs-built_in">Date</span>()&#125;)<br></code></pre></td></tr></table></figure><h4 id="1-7-6-内嵌文档"><a href="#1-7-6-内嵌文档" class="headerlink" title="1.7.6 内嵌文档"></a>1.7.6 内嵌文档</h4><p>一个文档也可以作为另一个文档的<code>value</code>，这个其实很好理解，如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">db.sang_collect.<span class="hljs-title function_ invoke__">insert</span>(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;三国演义&quot;</span>,<span class="hljs-attr">author</span>:&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;罗贯中&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">99</span>&#125;&#125;);<br></code></pre></td></tr></table></figure><p>书有一个属性是作者，作者又有<code>name</code>，年龄等属性。</p><h3 id="1-8-MongoDB-中的索引"><a href="#1-8-MongoDB-中的索引" class="headerlink" title="1.8 MongoDB 中的索引"></a>1.8 <code>MongoDB</code> 中的索引</h3><h4 id="1-8-1-索引创建"><a href="#1-8-1-索引创建" class="headerlink" title="1.8.1 索引创建"></a>1.8.1 索引创建</h4><p>默认情况下，集合中的<code>_id</code>字段就是索引，我们可以通过<code>getIndexes()</code>方法来查看一个集合中的索引：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">db<span class="hljs-selector-class">.sang_collect</span><span class="hljs-selector-class">.getIndexes</span>()<br></code></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ada">[<br>    &#123;<br>        <span class="hljs-string">&quot;v&quot;</span> : 2,<br>        <span class="hljs-string">&quot;key&quot;</span> : &#123;<br>            <span class="hljs-string">&quot;_id&quot;</span> : 1<br>        &#125;,<br>        <span class="hljs-string">&quot;name&quot;</span> : &quot;_<span class="hljs-type">id</span>_<span class="hljs-string">&quot;,</span><br><span class="hljs-string">        &quot;</span>ns<span class="hljs-string">&quot; : &quot;</span>sang.sang_collect<span class="hljs-string">&quot;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">]</span><br></code></pre></td></tr></table></figure><p>我们看到这里只有一个索引，就是<code>_id</code>。</p><p>现在我的集合中有<code>10000</code>个文档，我想要查询<code>x</code>为<code>1</code>的文档，我的查询操作如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">db<span class="hljs-selector-class">.sang_collect</span><span class="hljs-selector-class">.find</span>(&#123;<span class="hljs-attribute">x</span>:<span class="hljs-number">1</span>&#125;)<br></code></pre></td></tr></table></figure><p>这种查询默认情况下会做全表扫描，我们可以用上篇文章介绍的<code>explain()</code>来查看一下查询计划，如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">db.sang_collect.<span class="hljs-built_in">find</span>(&#123;x:1&#125;).explain(<span class="hljs-string">&quot;executionStats&quot;</span>)<br></code></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs ada">&#123;<br>    <span class="hljs-string">&quot;queryPlanner&quot;</span> : &#123;<br>    &#125;,<br>    <span class="hljs-string">&quot;executionStats&quot;</span> : &#123;<br>        <span class="hljs-string">&quot;executionSuccess&quot;</span> : <span class="hljs-type">true</span>,<br>        <span class="hljs-string">&quot;nReturned&quot;</span> : 1,<br>        <span class="hljs-string">&quot;executionTimeMillis&quot;</span> : 15,<br>        <span class="hljs-string">&quot;totalKeysExamined&quot;</span> : 0,<br>        <span class="hljs-string">&quot;totalDocsExamined&quot;</span> : 10000,<br>        <span class="hljs-string">&quot;executionStages&quot;</span> : &#123;<br>            <span class="hljs-string">&quot;stage&quot;</span> : &quot;<span class="hljs-type">COLLSCAN</span><span class="hljs-string">&quot;,</span><br><span class="hljs-string">            &quot;</span>filter<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">                &quot;</span>x<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">                    &quot;</span>$eq<span class="hljs-string">&quot; : 1.0</span><br><span class="hljs-string">                &#125;</span><br><span class="hljs-string">            &#125;,</span><br><span class="hljs-string">            &quot;</span>nReturned<span class="hljs-string">&quot; : 1,</span><br><span class="hljs-string">            &quot;</span>executionTimeMillisEstimate<span class="hljs-string">&quot; : 29,</span><br><span class="hljs-string">            &quot;</span>works<span class="hljs-string">&quot; : 10002,</span><br><span class="hljs-string">            &quot;</span>advanced<span class="hljs-string">&quot; : 1,</span><br><span class="hljs-string">            &quot;</span>needTime<span class="hljs-string">&quot; : 10000,</span><br><span class="hljs-string">            &quot;</span>needYield<span class="hljs-string">&quot; : 0,</span><br><span class="hljs-string">            &quot;</span>saveState<span class="hljs-string">&quot; : 78,</span><br><span class="hljs-string">            &quot;</span>restoreState<span class="hljs-string">&quot; : 78,</span><br><span class="hljs-string">            &quot;</span>isEOF<span class="hljs-string">&quot; : 1,</span><br><span class="hljs-string">            &quot;</span>invalidates<span class="hljs-string">&quot; : 0,</span><br><span class="hljs-string">            &quot;</span>direction<span class="hljs-string">&quot; : &quot;</span>forward<span class="hljs-string">&quot;,</span><br><span class="hljs-string">            &quot;</span>docsExamined<span class="hljs-string">&quot; : 10000</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;,</span><br><span class="hljs-string">    &quot;</span>serverInfo<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">    &#125;,</span><br><span class="hljs-string">    &quot;</span>ok<span class="hljs-string">&quot; : 1.0</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p>结果比较长，我摘取了关键的一部分。我们可以看到查询方式是全表扫描，一共扫描了<code>10000</code>个文档才查出来我要的结果。实际上我要的文档就排第二个，但是系统不知道这个集合中一共有多少个<code>x</code>为<code>1</code>的文档，所以会把全表扫描完，这种方式当然很低效，但是如果我加上<code> limit</code>，如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">db</span>.sang_collect.find(&#123;x:<span class="hljs-number">1</span>&#125;).limit(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>此时再看查询计划发现只扫描了两个文档就有结果了，但是如果我要查询<code>x</code>为<code>9999</code>的记录，那还是得把全表扫描一遍，此时，我们就可以给该字段建立索引，索引建立方式如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">db<span class="hljs-selector-class">.sang_collect</span><span class="hljs-selector-class">.ensureIndex</span>(&#123;<span class="hljs-attribute">x</span>:<span class="hljs-number">1</span>&#125;)<br></code></pre></td></tr></table></figure><p>1表示升序，-1表示降序。当我们给x字段建立索引之后，再根据x字段去查询，速度就非常快了，我们看下面这个查询操作的执行计划：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">db.sang_collect.<span class="hljs-built_in">find</span>(&#123;x:9999&#125;).explain(<span class="hljs-string">&quot;executionStats&quot;</span>)<br></code></pre></td></tr></table></figure><p>这个查询计划过长我就不贴出来了，我们可以重点关注查询要耗费的时间大幅度下降。</p><p>此时调用<code>getIndexes()</code>方法可以看到我们刚刚创建的索引，如下：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs ada">[<br>    &#123;<br>        <span class="hljs-string">&quot;v&quot;</span> : 2,<br>        <span class="hljs-string">&quot;key&quot;</span> : &#123;<br>            <span class="hljs-string">&quot;_id&quot;</span> : 1<br>        &#125;,<br>        <span class="hljs-string">&quot;name&quot;</span> : &quot;_<span class="hljs-type">id</span>_<span class="hljs-string">&quot;,</span><br><span class="hljs-string">        &quot;</span>ns<span class="hljs-string">&quot; : &quot;</span>sang.sang_collect<span class="hljs-string">&quot;</span><br><span class="hljs-string">    &#125;,</span><br><span class="hljs-string">    &#123;</span><br><span class="hljs-string">        &quot;</span>v<span class="hljs-string">&quot; : 2,</span><br><span class="hljs-string">        &quot;</span>key<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">            &quot;</span>x<span class="hljs-string">&quot; : 1.0</span><br><span class="hljs-string">        &#125;,</span><br><span class="hljs-string">        &quot;</span>name<span class="hljs-string">&quot; : &quot;</span>x_1<span class="hljs-string">&quot;,</span><br><span class="hljs-string">        &quot;</span>ns<span class="hljs-string">&quot; : &quot;</span>sang.sang_collect<span class="hljs-string">&quot;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">]</span><br></code></pre></td></tr></table></figure><p>我们看到每个索引都有一个名字，默认的索引名字为字段名_排序值，当然我们也可以在创建索引时自定义索引名字，如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">db<span class="hljs-selector-class">.sang_collect</span><span class="hljs-selector-class">.ensureIndex</span>(&#123;<span class="hljs-attribute">x</span>:<span class="hljs-number">1</span>&#125;,&#123;name:<span class="hljs-string">&quot;myfirstindex&quot;</span>&#125;)<br></code></pre></td></tr></table></figure><p>此时创建好的索引如下：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ada">&#123;<br>    <span class="hljs-string">&quot;v&quot;</span> : 2,<br>    <span class="hljs-string">&quot;key&quot;</span> : &#123;<br>        <span class="hljs-string">&quot;x&quot;</span> : 1.0<br>    &#125;,<br>    <span class="hljs-string">&quot;name&quot;</span> : &quot;<span class="hljs-type">myfirstindex</span><span class="hljs-string">&quot;,</span><br><span class="hljs-string">    &quot;</span>ns<span class="hljs-string">&quot; : &quot;</span>sang.sang_collect<span class="hljs-string">&quot;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p>当然索引在创建的过程中还有许多其他可选参数，如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">db.sang_collect.<span class="hljs-title function_ invoke__">ensureIndex</span>(&#123;<span class="hljs-attr">x</span>:<span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;myfirstindex&quot;</span>,<span class="hljs-attr">dropDups</span>:<span class="hljs-literal">true</span>,<span class="hljs-attr">background</span>:<span class="hljs-literal">true</span>,<span class="hljs-attr">unique</span>:<span class="hljs-literal">true</span>,<span class="hljs-attr">sparse</span>:<span class="hljs-literal">true</span>,<span class="hljs-attr">v</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">weights</span>:<span class="hljs-number">99999</span>&#125;)<br></code></pre></td></tr></table></figure><p>关于这里的参数，我说一下：</p><blockquote><p>1.<code>name</code>表示索引的名称<br>2.<code>dropDups</code>表示创建唯一性索引时如果出现重复，则将重复的删除，只保留第一个<br>3.<code>background</code>是否在后台创建索引，在后台创建索引不影响数据库当前的操作，默认为<code>false</code><br>4.<code>unique</code>是否创建唯一索引，默认<code>false</code><br>5.<code>sparse</code>对文档中不存在的字段是否不起用索引，默认<code>false</code><br>6.<code>v</code>表示索引的版本号，默认为<code>2</code><br>7.<code>weights</code>表示索引的权重</p></blockquote><p>此时创建好的索引如下：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ada">&#123;<br>    <span class="hljs-string">&quot;v&quot;</span> : 1,<br>    <span class="hljs-string">&quot;unique&quot;</span> : <span class="hljs-type">true</span>,<br>    <span class="hljs-string">&quot;key&quot;</span> : &#123;<br>        <span class="hljs-string">&quot;x&quot;</span> : 1.0<br>    &#125;,<br>    <span class="hljs-string">&quot;name&quot;</span> : &quot;<span class="hljs-type">myfirstindex</span><span class="hljs-string">&quot;,</span><br><span class="hljs-string">    &quot;</span>ns<span class="hljs-string">&quot; : &quot;</span>sang.sang_collect<span class="hljs-string">&quot;,</span><br><span class="hljs-string">    &quot;</span>background<span class="hljs-string">&quot; : true,</span><br><span class="hljs-string">    &quot;</span>sparse<span class="hljs-string">&quot; : true,</span><br><span class="hljs-string">    &quot;</span>weights<span class="hljs-string">&quot; : 99999.0</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="1-8-2-查看索引"><a href="#1-8-2-查看索引" class="headerlink" title="1.8.2 查看索引"></a>1.8.2 查看索引</h4><p><code>getIndexes()</code>可以用来查看索引，我们还可以通过<code>totalIndexSize()</code>来查看索引的大小，如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">db<span class="hljs-selector-class">.sang_collect</span><span class="hljs-selector-class">.totalIndexSize</span>()<br></code></pre></td></tr></table></figure><h4 id="1-8-3-删除索引"><a href="#1-8-3-删除索引" class="headerlink" title="1.8.3 删除索引"></a>1.8.3 删除索引</h4><p>我们可以按名称删除索引，如下：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">db.sang_collect.<span class="hljs-keyword">drop</span><span class="hljs-meta">Index</span>(<span class="hljs-string">&quot;xIndex&quot;</span>)<br></code></pre></td></tr></table></figure><p>表示删除一个名为<code>xIndex</code>的索引，当然我们也可以删除所有索引，如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">db<span class="hljs-selector-class">.sang_collect</span><span class="hljs-selector-class">.dropIndexes</span>()<br></code></pre></td></tr></table></figure><h4 id="1-8-4-总结"><a href="#1-8-4-总结" class="headerlink" title="1.8.4 总结"></a>1.8.4 总结</h4><p>索引是个好东西，可以有效的提高查询速度，但是索引会降低插入、更新和删除的速度，因为这些操作不仅要更新文档，还要更新索引，<code>MongoDB</code> 限制每个集合上最多有<code>64</code>个索引，我们在创建索引时要仔细斟酌索引的字段。</p><h3 id="1-9-Java操作MongoDB"><a href="#1-9-Java操作MongoDB" class="headerlink" title="1.9 Java操作MongoDB"></a>1.9 <code>Java</code>操作<code>MongoDB</code></h3><h4 id="1-9-1-方式一"><a href="#1-9-1-方式一" class="headerlink" title="1.9.1 方式一"></a>1.9.1 方式一</h4><p>方式一采用的原生<code>Java</code>操作<code>MongoDB</code></p><h5 id="1-9-1-1-前期准备"><a href="#1-9-1-1-前期准备" class="headerlink" title="1.9.1.1 前期准备"></a>1.9.1.1 前期准备</h5><p>首先我们需要驱动，<code>MongoDB</code>的<code>Java</code>驱动我们可以直接在<code>Maven</code>中央仓库去下载，也可以创建<code>Maven</code>工程添加如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mongodb<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mongodb-driver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>建议通过<code>Maven</code>来添加依赖，如果自己下载jar，需要下载如下三个jar：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>.org.mongodb:bson:jar:<span class="hljs-number">3</span>.<span class="hljs-number">5</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">2</span>.org.mongodb:mongodb-driver-core:jar:<span class="hljs-number">3</span>.<span class="hljs-number">5</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">3</span>.org.mongodb:mongodb-driver:jar:<span class="hljs-number">3</span>.<span class="hljs-number">5</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>另外，在使用<code>Java</code>操作 <code>MongoDB </code>之前，记得启动 <code>MongoDB</code></p><h5 id="1-9-1-2-获取集合"><a href="#1-9-1-2-获取集合" class="headerlink" title="1.9.1.2 获取集合"></a>1.9.1.2 获取集合</h5><p>所有准备工作完成之后，我们首先需要一个MongoClient，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">MongoClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MongoClient</span>(<span class="hljs-string">&quot;192.168.248.136&quot;</span>, <span class="hljs-number">27017</span>);<br></code></pre></td></tr></table></figure><p>然后通过如下方式获取一个数据库，如果要获取的数据库本身就存在，直接获取到，不存在<code>MongoDB</code>会自动创建：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">MongoDatabase</span> <span class="hljs-variable">sang</span> <span class="hljs-operator">=</span> client.getDatabase(<span class="hljs-string">&quot;sang&quot;</span>);<br></code></pre></td></tr></table></figure><p>然后通过如下方式获取一个名为c1的集合，这个集合存在的话就直接获取到，不存在的话<code>MongoDB</code>会自动创建出来，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">MongoCollection&lt;Document&gt; c = sang.getCollection(<span class="hljs-string">&quot;c1&quot;</span>);<br></code></pre></td></tr></table></figure><p>有了集合之后，我们就可以向集合中插入数据了。</p><p>1、<strong>增加操作</strong><br>和在<code>shell</code>中的操作一样，我们可以一条一条的添加数据，也可以批量添加，添加单条数据操作如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Document</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Document</span>();<br>d1.append(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;三国演义&quot;</span>).append(<span class="hljs-string">&quot;author&quot;</span>, <span class="hljs-string">&quot;罗贯中&quot;</span>);<br>c.insertOne(d1);<br></code></pre></td></tr></table></figure><p>添加多条数据的操作如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Document&gt; collections = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Document&gt;();<br><span class="hljs-type">Document</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Document</span>();<br>d1.append(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;三国演义&quot;</span>).append(<span class="hljs-string">&quot;author&quot;</span>, <span class="hljs-string">&quot;罗贯中&quot;</span>);<br>collections.add(d1);<br><span class="hljs-type">Document</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Document</span>();<br>d2.append(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;红楼梦&quot;</span>).append(<span class="hljs-string">&quot;author&quot;</span>, <span class="hljs-string">&quot;曹雪芹&quot;</span>);<br>collections.add(d2);<br>c.insertMany(collections);<br></code></pre></td></tr></table></figure><p>当然也可以通过 <code>Robo 3T</code>查看修改结果：<code>db.集合名.find()</code><br><img src="/2021/03/17/MongoDB%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/c0f4f0d5d94a332fbdd3ee69582176dc.png" alt="在这里插入图片描述"><br>2、<strong>修改操作</strong><br>可以修改查到的第一条数据，操作如下：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">c.updateOne(Filters.e<span class="hljs-string">q(&quot;author&quot;, &quot;罗贯中&quot;)</span>, new Document(<span class="hljs-string">&quot;<span class="hljs-variable">$set</span>&quot;</span>, new Document(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;三国演义123&quot;</span>)));<br></code></pre></td></tr></table></figure><p>上例中小伙伴们也看到了修改器要如何使用，不管是<code>inc</code>，用法都一致，我这里不再一个一个演示。也可以修改查到的所有数据，如下：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">c.updateMany(Filters.e<span class="hljs-string">q(&quot;author&quot;, &quot;罗贯中&quot;)</span>, new Document(<span class="hljs-string">&quot;<span class="hljs-variable">$set</span>&quot;</span>, new Document(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;三国演义456&quot;</span>)));<br></code></pre></td></tr></table></figure><p>3、<strong>删除操作</strong><br>可以删除查到的一条数据，如下：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">c.deleteOne(Filters.e<span class="hljs-string">q(&quot;author&quot;, &quot;罗贯中&quot;)</span>);<br></code></pre></td></tr></table></figure><p>也可以删除查到的所有数据：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">c.deleteMany(Filters.e<span class="hljs-string">q(&quot;author&quot;, &quot;罗贯中&quot;)</span>);<br></code></pre></td></tr></table></figure><p><code>Filters</code>里边还有其他的查询条件，都是见名知意，不赘述。</p><p>4、 <strong>查询操作</strong><br>可以直接查询所有文档：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">FindIterable&lt;Document&gt; documents = c.find();<br>MongoCursor&lt;Document&gt; iterator = documents.iterator();<br><span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>    System.out.println(iterator.next());<br>&#125;<br></code></pre></td></tr></table></figure><p>也可以按照条件查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">FindIterable&lt;Document&gt; documents = c.find(Filters.eq(<span class="hljs-string">&quot;author&quot;</span>, <span class="hljs-string">&quot;罗贯中&quot;</span>));<br>MongoCursor&lt;Document&gt; iterator = documents.iterator();<br><span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>    System.out.println(iterator.next());<br>&#125;<br></code></pre></td></tr></table></figure><p>其他的方法基本都是见名知意，这里不再赘述。</p><p>5、<strong>验证问题</strong><br>上面我们演示的获取一个集合是不需要登录<code>MongoDB</code>数据库的，如果需要登录，我们获取集合的方式改为下面这种：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ServerAddress</span> <span class="hljs-variable">serverAddress</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerAddress</span>(<span class="hljs-string">&quot;192.168.248.128&quot;</span>, <span class="hljs-number">27017</span>);<br>List&lt;MongoCredential&gt; credentialsList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;MongoCredential&gt;();<br><span class="hljs-type">MongoCredential</span> <span class="hljs-variable">mc</span> <span class="hljs-operator">=</span> MongoCredential.createScramSha1Credential(<span class="hljs-string">&quot;readuser&quot;</span>,<span class="hljs-string">&quot;sang&quot;</span>,<span class="hljs-string">&quot;123&quot;</span>.toCharArray());<br>credentialsList.add(mc);<br><span class="hljs-type">MongoClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MongoClient</span>(serverAddress,credentialsList);<br><span class="hljs-type">MongoDatabase</span> <span class="hljs-variable">sang</span> <span class="hljs-operator">=</span> client.getDatabase(<span class="hljs-string">&quot;sang&quot;</span>);<br>c = sang.getCollection(<span class="hljs-string">&quot;c1&quot;</span>);<br></code></pre></td></tr></table></figure><p><code>MongoCredential</code>是一个凭证，第一个参数为用户名，第二个参数是要在哪个数据库中验证，第三个参数是密码的<code>char</code>数组，然后将登录地址封装成一个<code>ServerAddress</code>，最后将两个参数都传入<code>MongoClient</code>中实现登录功能。</p><p>6、<strong>其他配置</strong><br>在连接数据库的时候也可以设置连接超时等信息，在<code>MongoClientOptions</code>中设置即可，设置方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ServerAddress</span> <span class="hljs-variable">serverAddress</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerAddress</span>(<span class="hljs-string">&quot;192.168.248.128&quot;</span>, <span class="hljs-number">27017</span>);<br>List&lt;MongoCredential&gt; credentialsList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;MongoCredential&gt;();<br><span class="hljs-type">MongoCredential</span> <span class="hljs-variable">mc</span> <span class="hljs-operator">=</span> MongoCredential.createScramSha1Credential(<span class="hljs-string">&quot;rwuser&quot;</span>,<span class="hljs-string">&quot;sang&quot;</span>,<span class="hljs-string">&quot;123&quot;</span>.toCharArray());<br>credentialsList.add(mc);<br><span class="hljs-type">MongoClientOptions</span> <span class="hljs-variable">options</span> <span class="hljs-operator">=</span> MongoClientOptions.builder()<br>        <span class="hljs-comment">//设置连接超时时间为10s</span><br>        .connectTimeout(<span class="hljs-number">1000</span>*<span class="hljs-number">10</span>)<br>        <span class="hljs-comment">//设置最长等待时间为10s</span><br>        .maxWaitTime(<span class="hljs-number">1000</span>*<span class="hljs-number">10</span>)<br>        .build();<br><span class="hljs-type">MongoClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MongoClient</span>(serverAddress,credentialsList,options);<br><span class="hljs-type">MongoDatabase</span> <span class="hljs-variable">sang</span> <span class="hljs-operator">=</span> client.getDatabase(<span class="hljs-string">&quot;sang&quot;</span>);<br>c = sang.getCollection(<span class="hljs-string">&quot;c1&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="1-9-2-方式二"><a href="#1-9-2-方式二" class="headerlink" title="1.9.2 方式二"></a>1.9.2 方式二</h4><p>主要讲解<code>SpringBoot</code>操作<code>MongoDB</code>实现增删改查的功能</p><p>1、<code>pom.xml</code>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、创建<code>application.yml</code></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">spring:</span><br><span class="hljs-symbol">  data:</span><br><span class="hljs-symbol">    mongodb:</span><br><span class="hljs-symbol">      host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.72</span><span class="hljs-number">.129</span><br><span class="hljs-symbol">      database:</span> studentdb<br></code></pre></td></tr></table></figure><p>3、创建实体类<br>创建包<code>com.changan.mongodb</code>，包下建包<code>pojo </code>用于存放实体类，创建实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.changan.mongdb.pojo;<br><br><span class="hljs-keyword">import</span> org.springframework.data.annotation.Id;<br><span class="hljs-keyword">import</span> org.springframework.data.mongodb.core.mapping.Document;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-meta">@Document(collection = &quot;student&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">private</span> String sex;<br><br>    <span class="hljs-keyword">private</span> String age;<br><br>    <span class="hljs-keyword">private</span> String introduce;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSex</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sex;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSex</span><span class="hljs-params">(String sex)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(String age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getIntroduce</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> introduce;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setIntroduce</span><span class="hljs-params">(String introduce)</span> &#123;<br>        <span class="hljs-built_in">this</span>.introduce = introduce;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Long id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4、创建数据访问接口<br><code>com.changan.mongodb</code>包下创建<code>dao</code>包，包下创建接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.changan.mongdb.dao;<br><br><span class="hljs-keyword">import</span> com.changan.mongdb.pojo.Student;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentDao</span> &#123;<br><br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(Student student)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Student student)</span>;<br><br>    List&lt;Student&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>5、创建业务逻辑类<br><code>com.changan.mongodb</code>包下创建<code>impl</code>包，包下创建类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.changan.mongdb.dao.impl;<br><br><span class="hljs-keyword">import</span> com.changan.mongdb.dao.StudentDao;<br><span class="hljs-keyword">import</span> com.changan.mongdb.pojo.Student;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.data.mongodb.core.MongoTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.mongodb.core.aggregation.Aggregation;<br><span class="hljs-keyword">import</span> org.springframework.data.mongodb.core.aggregation.LookupOperation;<br><span class="hljs-keyword">import</span> org.springframework.data.mongodb.core.query.Criteria;<br><span class="hljs-keyword">import</span> org.springframework.data.mongodb.core.query.Query;<br><span class="hljs-keyword">import</span> org.springframework.data.mongodb.core.query.Update;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">StudentDao</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MongoTemplate mongoTemplate;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 新增信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> student</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(Student student)</span> &#123;<br>        mongoTemplate.save(student);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> student</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Student student)</span> &#123;<br>        <span class="hljs-comment">//修改的条件</span><br>        <span class="hljs-type">Query</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Query</span>(Criteria.where(<span class="hljs-string">&quot;id&quot;</span>).is(student.getId()));<br><br>        <span class="hljs-comment">//修改的内容</span><br>        <span class="hljs-type">Update</span> <span class="hljs-variable">update</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Update</span>();<br>        update.set(<span class="hljs-string">&quot;name&quot;</span>,student.getName());<br><br>        mongoTemplate.updateFirst(query,update,Student.class);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询所有信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Student&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> mongoTemplate.findAll(Student.class);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据id查询所有信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">byId</span> <span class="hljs-operator">=</span> mongoTemplate.findById(<span class="hljs-number">1</span>,Student.class);<br>        mongoTemplate.remove(byId);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>6、创建测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.changan.mongdb;<br><br><span class="hljs-keyword">import</span> com.changan.mongdb.dao.StudentDao;<br><span class="hljs-keyword">import</span> com.changan.mongdb.pojo.Student;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MongdbApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StudentDao studentDao;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询所有信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Student&gt; all = studentDao.findAll();<br>        System.out.println(all.size());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 新增信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        student.setId(<span class="hljs-number">6l</span>);<br>        student.setName(<span class="hljs-string">&quot;宋人头&quot;</span>);<br>        studentDao.save(student);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        student.setId(<span class="hljs-number">2l</span>);<br>        student.setName(<span class="hljs-string">&quot;吴很帅&quot;</span>);<br>        studentDao.update(student);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span> &#123;<br>        studentDao.delete(<span class="hljs-number">3</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-10-MongoDB之副本集配置"><a href="#1-10-MongoDB之副本集配置" class="headerlink" title="1.10 MongoDB之副本集配置"></a>1.10 <code>MongoDB</code>之副本集配置</h3><h4 id="1-10-1-MongoDB主从复制"><a href="#1-10-1-MongoDB主从复制" class="headerlink" title="1.10.1 MongoDB主从复制"></a>1.10.1 <code>MongoDB</code>主从复制</h4><p>主从复制是<code>MongoDB</code>最早使用的复制方式， 该复制方式易于配置，并且可以支持任意数量的从节点服务器，与使用单节点模式相比有如下优点：</p><p>在从服务器上存储数据副本，提高了数据的可用性， 并可以保证数据的安全性。</p><p>可配置读写分离，主节点负责写操作，从节点负责读操作，将读写压力分开，提高系统的稳定性。<br><img src="/2021/03/17/MongoDB%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/5aee83169015789b07f22b9beb8b04b5.png" alt="在这里插入图片描述"></p><p><code>MongoDB </code>的主从复制至少需要两个服务器或者节点。其中一个是主节点，负责处理客户端请求，其它的都是从节点，负责同步主节点的数据。</p><p>主节点记录在其上执行的所有写操作，从节点定期轮询主节点获取这些操作，然后再对自己的数据副本执行这些操作。由于和主节点执行了相同的操作，从节点就能保持与主节点的数据同步。</p><p>主节点的操作记录称为<code>oplog(operation log)</code>，它被存储在<code> MongoDB</code> 的 <code>local </code>数据库中。<code>oplog</code> 中的每个文档都代表主节点上执行的一个操作。需要重点强调的是<code>oplog</code>只记录改变数据库状态的操作。比如，查询操作就不会被存储在<code>oplog</code>中。这是因为<code>oplog</code>只是作为从节点与主节点保持数据同步的机制。</p><p>然而，主从复制并非生产环境下推荐的复制方式，主要原因如下两点：</p><p>1、灾备都是完全人工的 如果主节点发生故障失败，管理员必须关闭一个从服务器，然后作为主节点重新启动它。然后应用程序必须重新配置连接新的主节点。<br>2、数据恢复困难 因为<code>oplog</code>只在主节点存在，故障失败需要在新的服务器上创建新的<code>oplog</code>，这意味着任意存在的节点需要重新从新的主节点同步<code>oplog</code>。</p><p>因此，在新版本的<code>MongoDB</code>中已经不再支持使用主从复制这种复制方式了，取而代之的是使用副本集复制方式。</p><h4 id="1-10-2-MongoDB副本集"><a href="#1-10-2-MongoDB副本集" class="headerlink" title="1.10.2 MongoDB副本集"></a>1.10.2 <code>MongoDB</code>副本集</h4><p><code>MongoDB</code>副本集<code>（Replica Set）</code>其实就是具有自动故障恢复功能的主从集群，和主从复制最大的区别就是在副本集中没有固定的“主节点；整个副本集会选出一个节点作为“主节点”，当其挂掉后，再在剩下的从节点中选举一个节点成为新的“主节点”，在副本集中总有一个主节点<code>(primary)</code>和一个或多个备份节点<code>(secondary)</code>。</p><p>除了<code>primary</code>和<code>secondary</code>之外，副本集中的节点还可以是以下角色：</p><table><thead><tr><th></th><th>成为primary</th><th>对客户端可见</th><th>参与投票</th><th>延迟同步</th><th>复制数据</th></tr></thead><tbody><tr><td>Default</td><td>√</td><td>√</td><td>√</td><td>∕</td><td>√</td></tr><tr><td>Secondary-Only</td><td>∕</td><td>√</td><td>√</td><td>∕</td><td>√</td></tr><tr><td>Hidden</td><td>∕</td><td>∕</td><td>√</td><td>∕</td><td>√</td></tr><tr><td>Delayed∕</td><td>√</td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>Arbiters</td><td>∕</td><td>∕</td><td>√</td><td>∕</td><td>∕</td></tr><tr><td>Non-Voting</td><td>√</td><td>√</td><td>∕</td><td>∕</td><td>√</td></tr></tbody></table><p>官方推荐的副本集最小配置需要有三个节点：一个主节点接收和处理所有的写操作，两个备份节点通过复制主节点的操作来对主节点的数据进行同步备份。<br><img src="/2021/03/17/MongoDB%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/0e4dfe349ae74b8f9737f9e3f6ff57b1.png" alt="在这里插入图片描述"></p><h5 id="1-10-2-1-配置副本集"><a href="#1-10-2-1-配置副本集" class="headerlink" title="1.10.2.1 配置副本集"></a>1.10.2.1 配置副本集</h5><p>1、环境准备<br>副本集各节点<code>IP</code>如下：</p><blockquote><p>172.16.250.234<br>172.16.250.239<br>172.16.250.240</p></blockquote><p>首先，先对三个<code>MongoDB</code> 节点进行安装。</p><p>然后，依次修改各个节点的 <code>mongodb.conf </code>配置文件，增加副本集相关配置，内容如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">dbpath</span>=/usr/local/mongodb-4.0.2/data<br><span class="hljs-attribute">logpath</span>=/usr/local/mongodb-4.0.2/log/mongodb.log<br><span class="hljs-attribute">fork</span>=<span class="hljs-literal">true</span><br><span class="hljs-attribute">logappend</span>=<span class="hljs-literal">true</span><br>bind_ip= # 此处填写服务器的IP<br><span class="hljs-attribute">port</span>=27017<br><br><span class="hljs-comment"># 设置副本集名称，在各个配置文件中，其值必须相同</span><br><span class="hljs-attribute">replSet</span>=rs0<br></code></pre></td></tr></table></figure><p>配置完成之后，分别在三个节点上执行如下命令通过加载文件配置来启动<code>MongoDB</code>服务：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mongod</span> -config /usr/local/mongodb-<span class="hljs-number">4</span>.<span class="hljs-number">0</span>.<span class="hljs-number">2</span>/mongodb.conf<br><span class="hljs-comment"># 或者</span><br><span class="hljs-attribute">mongod</span> -f /usr/local/mongodb-<span class="hljs-number">4</span>.<span class="hljs-number">0</span>.<span class="hljs-number">2</span>/mongodb.conf<br></code></pre></td></tr></table></figure><p>至此，<code>3</code>个<code>MongoDB</code>实例都已经以副本集方式启动，但它们彼此之间现在还不会进行通信，仍需要进行一些配置。</p><p>2、<strong>副本集初始化</strong><br>通过<code>Shell</code>连接到任意一个<code>MongoDB</code>实例，执行<code>rs.initiate()</code>方法对副本集进行初始化。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[root@hadoop34 mongodb-4.0.2]</span># mongo <span class="hljs-number">172.16</span>.<span class="hljs-number">250.234</span>:<span class="hljs-number">27017</span><br>&gt; conf=<br>    &#123;<br>    &quot;_id&quot; : <span class="hljs-string">&quot;rs0&quot;</span>,<br>    <span class="hljs-string">&quot;members&quot;</span> : [<br>        &#123; &quot;_id&quot; : <span class="hljs-number">0</span>, <span class="hljs-string">&quot;host&quot;</span> : <span class="hljs-string">&quot;172.16.250.234:27017&quot;</span> &#125;,<br>        &#123; &quot;_id&quot; : <span class="hljs-number">1</span>, <span class="hljs-string">&quot;host&quot;</span> : <span class="hljs-string">&quot;172.16.250.239:27017&quot;</span> &#125;,<br>        &#123; &quot;_id&quot; : <span class="hljs-number">2</span>, <span class="hljs-string">&quot;host&quot;</span> : <span class="hljs-string">&quot;172.16.250.240:27017&quot;</span> &#125;<br>        ]<br>    &#125;<br>&gt; rs<span class="hljs-selector-class">.initiate</span>(conf)<br>&#123;<br>    &quot;ok&quot; : <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;operationTime&quot;</span> : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542247326</span>, <span class="hljs-number">1</span>),<br>    <span class="hljs-string">&quot;$clusterTime&quot;</span> : &#123;<br>        &quot;clusterTime&quot; : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542247326</span>, <span class="hljs-number">1</span>),<br>        <span class="hljs-string">&quot;signature&quot;</span> : &#123;<br>            &quot;hash&quot; : <span class="hljs-built_in">BinData</span>(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA=&quot;</span>),<br>            <span class="hljs-string">&quot;keyId&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">0</span>)<br>        &#125;<br>    &#125;<br>&#125;<br>rs0:SECONDARY&gt;<br></code></pre></td></tr></table></figure><p>如果在执行<code>rs.initiate()</code>方法时不传入任何参数，<code>MongoDB </code>将以默认的配置文档对副本集进行初始化，后续可以再通过<code>rs.add()</code>方法来向副本集中添加成员。</p><p>3、<strong>副本集更新</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 向副本集中添加成员</span><br>rs.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;172.16.250.240:27017&quot;</span>)<br> <br><span class="hljs-comment"># 从副本集中删除成员</span><br>rs.<span class="hljs-built_in">remove</span>(<span class="hljs-string">&quot;172.16.250.240:27017&quot;</span>)<br> <br><span class="hljs-comment"># 向副本集中添加仲裁</span><br>rs.addArb(<span class="hljs-string">&quot;172.16.250.240:27017&quot;</span>)<br> <br><span class="hljs-comment"># 向副本集中添加备份节点</span><br>rs.<span class="hljs-built_in">add</span>(&#123;<span class="hljs-string">&quot;_id&quot;</span>:3,<span class="hljs-string">&quot;host&quot;</span>:<span class="hljs-string">&quot;172.16.250.240:27017&quot;</span>,<span class="hljs-string">&quot;priority&quot;</span>:0,<span class="hljs-string">&quot;hidden&quot;</span>:true&#125;)<br></code></pre></td></tr></table></figure><hr><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs ada"># 更改副本集配置<br>rs0:PRIMARY&gt; var conf=rs.conf()<br>rs0:PRIMARY&gt; conf.members[<span class="hljs-number">1</span>].priority = <span class="hljs-number">5</span><br> <br># PRIMARY节点上执行如下命令<br>rs0:PRIMARY&gt; rs.reconfig(conf)<br>&#123;<br>    <span class="hljs-string">&quot;ok&quot;</span> : 1,<br>    <span class="hljs-string">&quot;operationTime&quot;</span> : <span class="hljs-type">Timestamp</span>(<span class="hljs-number">1542248518</span>, <span class="hljs-number">1</span>),<br>    <span class="hljs-string">&quot;$clusterTime&quot;</span> : &#123;<br>        <span class="hljs-string">&quot;clusterTime&quot;</span> : <span class="hljs-type">Timestamp</span>(<span class="hljs-number">1542248518</span>, <span class="hljs-number">1</span>),<br>        <span class="hljs-string">&quot;signature&quot;</span> : &#123;<br>            <span class="hljs-string">&quot;hash&quot;</span> : <span class="hljs-type">BinData</span>(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA=&quot;</span>),<br>            <span class="hljs-string">&quot;keyId&quot;</span> : <span class="hljs-type">NumberLong</span>(<span class="hljs-number">0</span>)<br>        &#125;<br>    &#125;<br>&#125;<br> <br># SECONDARY节点上执行如下命令，需增加 force 参数<br>rs0:SECONDARY&gt; rs.reconfig(conf,&#123;force:<span class="hljs-literal">true</span>&#125;)<br>&#123;<br>    <span class="hljs-string">&quot;ok&quot;</span> : 1,<br>    <span class="hljs-string">&quot;operationTime&quot;</span> : <span class="hljs-type">Timestamp</span>(<span class="hljs-number">1542248726</span>, <span class="hljs-number">1</span>),<br>    <span class="hljs-string">&quot;$clusterTime&quot;</span> : &#123;<br>        <span class="hljs-string">&quot;clusterTime&quot;</span> : <span class="hljs-type">Timestamp</span>(<span class="hljs-number">1542248726</span>, <span class="hljs-number">1</span>),<br>        <span class="hljs-string">&quot;signature&quot;</span> : &#123;<br>            <span class="hljs-string">&quot;hash&quot;</span> : <span class="hljs-type">BinData</span>(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA=&quot;</span>),<br>            <span class="hljs-string">&quot;keyId&quot;</span> : <span class="hljs-type">NumberLong</span>(<span class="hljs-number">0</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>例如，强制让一个节点成为<code>Primary</code>，可以将该节点的优先级设置成最高。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">cfg = rs<span class="hljs-selector-class">.conf</span>()<br>cfg<span class="hljs-selector-class">.members</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.priority</span> = <span class="hljs-number">5</span><br>cfg<span class="hljs-selector-class">.members</span><span class="hljs-selector-attr">[1]</span><span class="hljs-selector-class">.priority</span> = <span class="hljs-number">1</span><br>cfg<span class="hljs-selector-class">.members</span><span class="hljs-selector-attr">[2]</span><span class="hljs-selector-class">.priority</span> = <span class="hljs-number">1</span><br>rs<span class="hljs-selector-class">.reconfig</span>(cfg)<br></code></pre></td></tr></table></figure><p>4、<strong>副本集监控</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><code class="hljs css"># 查看副本集的配置信息<br>rs0:PRIMARY&gt; rs.<span class="hljs-built_in">conf</span>()<br>&#123;<br>    &quot;_id&quot; : <span class="hljs-string">&quot;rs0&quot;</span>,<br>    <span class="hljs-string">&quot;version&quot;</span> : <span class="hljs-number">104658</span>,<br>    <span class="hljs-string">&quot;protocolVersion&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">1</span>),<br>    <span class="hljs-string">&quot;writeConcernMajorityJournalDefault&quot;</span> : true,<br>    <span class="hljs-string">&quot;members&quot;</span> : [<br>    &#123;<br>        &quot;_id&quot; : <span class="hljs-number">0</span>,<br>        <span class="hljs-string">&quot;host&quot;</span> : <span class="hljs-string">&quot;172.16.250.234:27017&quot;</span>,<br>        <span class="hljs-string">&quot;arbiterOnly&quot;</span> : false,<br>        <span class="hljs-string">&quot;buildIndexes&quot;</span> : true,<br>        <span class="hljs-string">&quot;hidden&quot;</span> : false,<br>        <span class="hljs-string">&quot;priority&quot;</span> : <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;tags&quot;</span> : &#123;&#125;,<br>        &quot;slaveDelay&quot; : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">0</span>),<br>        <span class="hljs-string">&quot;votes&quot;</span> : <span class="hljs-number">1</span><br>    &#125;,<br>    &#123;<br>        &quot;_id&quot; : <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;host&quot;</span> : <span class="hljs-string">&quot;172.16.250.239:27017&quot;</span>,<br>        <span class="hljs-string">&quot;arbiterOnly&quot;</span> : false,<br>        <span class="hljs-string">&quot;buildIndexes&quot;</span> : true,<br>        <span class="hljs-string">&quot;hidden&quot;</span> : false,<br>        <span class="hljs-string">&quot;priority&quot;</span> : <span class="hljs-number">5</span>,<br>        <span class="hljs-string">&quot;tags&quot;</span> : &#123;&#125;,<br>        &quot;slaveDelay&quot; : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">0</span>),<br>        <span class="hljs-string">&quot;votes&quot;</span> : <span class="hljs-number">1</span><br>    &#125;,<br>    &#123;<br>        &quot;_id&quot; : <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&quot;host&quot;</span> : <span class="hljs-string">&quot;172.16.250.240:27017&quot;</span>,<br>        <span class="hljs-string">&quot;arbiterOnly&quot;</span> : false,<br>        <span class="hljs-string">&quot;buildIndexes&quot;</span> : true,<br>        <span class="hljs-string">&quot;hidden&quot;</span> : false,<br>        <span class="hljs-string">&quot;priority&quot;</span> : <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;tags&quot;</span> : &#123;&#125;,<br>        &quot;slaveDelay&quot; : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">0</span>),<br>        <span class="hljs-string">&quot;votes&quot;</span> : <span class="hljs-number">1</span><br>    &#125;],<br>    &quot;settings&quot; : &#123;<br>        &quot;chainingAllowed&quot; : true,<br>        <span class="hljs-string">&quot;heartbeatIntervalMillis&quot;</span> : <span class="hljs-number">2000</span>,<br>        <span class="hljs-string">&quot;heartbeatTimeoutSecs&quot;</span> : <span class="hljs-number">10</span>,<br>        <span class="hljs-string">&quot;electionTimeoutMillis&quot;</span> : <span class="hljs-number">10000</span>,<br>        <span class="hljs-string">&quot;catchUpTimeoutMillis&quot;</span> : -<span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;catchUpTakeoverDelayMillis&quot;</span> : <span class="hljs-number">30000</span>,<br>        <span class="hljs-string">&quot;getLastErrorModes&quot;</span> : &#123;&#125;,<br>        &quot;getLastErrorDefaults&quot; : &#123;<br>            &quot;w&quot; : <span class="hljs-number">1</span>,<br>            <span class="hljs-string">&quot;wtimeout&quot;</span> : <span class="hljs-number">0</span><br>        &#125;,<br>        &quot;replicaSetId&quot; : <span class="hljs-built_in">ObjectId</span>(<span class="hljs-string">&quot;5becd39e360189766762e057&quot;</span>)<br>    &#125;<br>&#125;<br># 查看副本集运行状态<br>rs0:PRIMARY&gt; rs.<span class="hljs-built_in">status</span>()<br>&#123;<br>    &quot;set&quot; : <span class="hljs-string">&quot;rs0&quot;</span>,<br>    <span class="hljs-string">&quot;date&quot;</span> : <span class="hljs-built_in">ISODate</span>(<span class="hljs-string">&quot;2018-11-15T02:46:15.138Z&quot;</span>),<br>    <span class="hljs-string">&quot;myState&quot;</span> : <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;term&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">2</span>),<br>    <span class="hljs-string">&quot;syncingTo&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;syncSourceHost&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;syncSourceId&quot;</span> : -<span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;heartbeatIntervalMillis&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">2000</span>),<br>    <span class="hljs-string">&quot;optimes&quot;</span> : &#123;<br>        &quot;lastCommittedOpTime&quot; : &#123;<br>            &quot;ts&quot; : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542249966</span>, <span class="hljs-number">1</span>),<br>            <span class="hljs-string">&quot;t&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">2</span>)<br>        &#125;,<br>        &quot;readConcernMajorityOpTime&quot; : &#123;<br>            &quot;ts&quot; : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542249966</span>, <span class="hljs-number">1</span>),<br>            <span class="hljs-string">&quot;t&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">2</span>)<br>        &#125;,<br>        &quot;appliedOpTime&quot; : &#123;<br>            &quot;ts&quot; : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542249966</span>, <span class="hljs-number">1</span>),<br>            <span class="hljs-string">&quot;t&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">2</span>)<br>        &#125;,<br>        &quot;durableOpTime&quot; : &#123;<br>            &quot;ts&quot; : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542249966</span>, <span class="hljs-number">1</span>),<br>            <span class="hljs-string">&quot;t&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">2</span>)<br>        &#125;<br>    &#125;,<br>    &quot;lastStableCheckpointTimestamp&quot; : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542249916</span>, <span class="hljs-number">1</span>),<br>    <span class="hljs-string">&quot;members&quot;</span> : [<br>    &#123;<br>        &quot;_id&quot; : <span class="hljs-number">0</span>,<br>        <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;172.16.250.234:27017&quot;</span>,<br>        <span class="hljs-string">&quot;health&quot;</span> : <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;state&quot;</span> : <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&quot;stateStr&quot;</span> : <span class="hljs-string">&quot;SECONDARY&quot;</span>,<br>        <span class="hljs-string">&quot;uptime&quot;</span> : <span class="hljs-number">2651</span>,<br>        <span class="hljs-string">&quot;optime&quot;</span> : &#123;<br>            &quot;ts&quot; : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542249966</span>, <span class="hljs-number">1</span>),<br>            <span class="hljs-string">&quot;t&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">2</span>)<br>        &#125;,<br>        &quot;optimeDurable&quot; : &#123;<br>            &quot;ts&quot; : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542249966</span>, <span class="hljs-number">1</span>),<br>            <span class="hljs-string">&quot;t&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">2</span>)<br>        &#125;,<br>        &quot;optimeDate&quot; : <span class="hljs-built_in">ISODate</span>(<span class="hljs-string">&quot;2018-11-15T02:46:06Z&quot;</span>),<br>        <span class="hljs-string">&quot;optimeDurableDate&quot;</span> : <span class="hljs-built_in">ISODate</span>(<span class="hljs-string">&quot;2018-11-15T02:46:06Z&quot;</span>),<br>        <span class="hljs-string">&quot;lastHeartbeat&quot;</span> : <span class="hljs-built_in">ISODate</span>(<span class="hljs-string">&quot;2018-11-15T02:46:13.520Z&quot;</span>),<br>        <span class="hljs-string">&quot;lastHeartbeatRecv&quot;</span> : <span class="hljs-built_in">ISODate</span>(<span class="hljs-string">&quot;2018-11-15T02:46:13.519Z&quot;</span>),<br>        <span class="hljs-string">&quot;pingMs&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">0</span>),<br>        <span class="hljs-string">&quot;lastHeartbeatMessage&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;syncingTo&quot;</span> : <span class="hljs-string">&quot;172.16.250.239:27017&quot;</span>,<br>        <span class="hljs-string">&quot;syncSourceHost&quot;</span> : <span class="hljs-string">&quot;172.16.250.239:27017&quot;</span>,<br>        <span class="hljs-string">&quot;syncSourceId&quot;</span> : <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;infoMessage&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;configVersion&quot;</span> : <span class="hljs-number">104658</span><br>        &#125;,<br>    &#123;<br>        &quot;_id&quot; : <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;172.16.250.239:27017&quot;</span>,<br>        <span class="hljs-string">&quot;health&quot;</span> : <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;state&quot;</span> : <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;stateStr&quot;</span> : <span class="hljs-string">&quot;PRIMARY&quot;</span>,<br>        <span class="hljs-string">&quot;uptime&quot;</span> : <span class="hljs-number">2799</span>,<br>        <span class="hljs-string">&quot;optime&quot;</span> : &#123;<br>            &quot;ts&quot; : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542249966</span>, <span class="hljs-number">1</span>),<br>            <span class="hljs-string">&quot;t&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">2</span>)<br>        &#125;,<br>        &quot;optimeDate&quot; : <span class="hljs-built_in">ISODate</span>(<span class="hljs-string">&quot;2018-11-15T02:46:06Z&quot;</span>),<br>        <span class="hljs-string">&quot;syncingTo&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;syncSourceHost&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;syncSourceId&quot;</span> : -<span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;infoMessage&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;electionTime&quot;</span> : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542248524</span>, <span class="hljs-number">1</span>),<br>        <span class="hljs-string">&quot;electionDate&quot;</span> : <span class="hljs-built_in">ISODate</span>(<span class="hljs-string">&quot;2018-11-15T02:22:04Z&quot;</span>),<br>        <span class="hljs-string">&quot;configVersion&quot;</span> : <span class="hljs-number">104658</span>,<br>        <span class="hljs-string">&quot;self&quot;</span> : true,<br>        <span class="hljs-string">&quot;lastHeartbeatMessage&quot;</span> : <span class="hljs-string">&quot;&quot;</span><br>    &#125;,<br>    &#123;<br>        &quot;_id&quot; : <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;172.16.250.240:27017&quot;</span>,<br>        <span class="hljs-string">&quot;health&quot;</span> : <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;state&quot;</span> : <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&quot;stateStr&quot;</span> : <span class="hljs-string">&quot;SECONDARY&quot;</span>,<br>        <span class="hljs-string">&quot;uptime&quot;</span> : <span class="hljs-number">1855</span>,<br>        <span class="hljs-string">&quot;optime&quot;</span> : &#123;<br>            &quot;ts&quot; : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542249966</span>, <span class="hljs-number">1</span>),<br>            <span class="hljs-string">&quot;t&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">2</span>)<br>        &#125;,<br>        &quot;optimeDurable&quot; : &#123;<br>            &quot;ts&quot; : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542249966</span>, <span class="hljs-number">1</span>),<br>            <span class="hljs-string">&quot;t&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">2</span>)<br>        &#125;,<br>        &quot;optimeDate&quot; : <span class="hljs-built_in">ISODate</span>(<span class="hljs-string">&quot;2018-11-15T02:46:06Z&quot;</span>),<br>        <span class="hljs-string">&quot;optimeDurableDate&quot;</span> : <span class="hljs-built_in">ISODate</span>(<span class="hljs-string">&quot;2018-11-15T02:46:06Z&quot;</span>),<br>        <span class="hljs-string">&quot;lastHeartbeat&quot;</span> : <span class="hljs-built_in">ISODate</span>(<span class="hljs-string">&quot;2018-11-15T02:46:13.520Z&quot;</span>),<br>        <span class="hljs-string">&quot;lastHeartbeatRecv&quot;</span> : <span class="hljs-built_in">ISODate</span>(<span class="hljs-string">&quot;2018-11-15T02:46:13.520Z&quot;</span>),<br>        <span class="hljs-string">&quot;pingMs&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">0</span>),<br>        <span class="hljs-string">&quot;lastHeartbeatMessage&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;syncingTo&quot;</span> : <span class="hljs-string">&quot;172.16.250.239:27017&quot;</span>,<br>        <span class="hljs-string">&quot;syncSourceHost&quot;</span> : <span class="hljs-string">&quot;172.16.250.239:27017&quot;</span>,<br>        <span class="hljs-string">&quot;syncSourceId&quot;</span> : <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;infoMessage&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;configVersion&quot;</span> : <span class="hljs-number">104658</span><br>    &#125;],<br>    &quot;ok&quot; : <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;operationTime&quot;</span> : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542249966</span>, <span class="hljs-number">1</span>),<br>    <span class="hljs-string">&quot;$clusterTime&quot;</span> : &#123;<br>        &quot;clusterTime&quot; : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542249966</span>, <span class="hljs-number">1</span>),<br>        <span class="hljs-string">&quot;signature&quot;</span> : &#123;<br>            &quot;hash&quot; : <span class="hljs-built_in">BinData</span>(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA=&quot;</span>),<br>            <span class="hljs-string">&quot;keyId&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">0</span>)<br>        &#125;<br>    &#125;<br>&#125;<br># 查看备份节点的复制信息<br>rs0:PRIMARY&gt; db.<span class="hljs-built_in">printSlaveReplicationInfo</span>()<br>source: <span class="hljs-number">172.16</span>.<span class="hljs-number">250.234</span>:<span class="hljs-number">27017</span><br>    syncedTo: Thu Nov <span class="hljs-number">15</span> <span class="hljs-number">2018</span> <span class="hljs-number">11</span>:<span class="hljs-number">08</span>:<span class="hljs-number">36</span> GMT+<span class="hljs-number">0800</span> (CST)<br>    <span class="hljs-number">0</span> secs (<span class="hljs-number">0</span> hrs) behind the primary<br>source: <span class="hljs-number">172.16</span>.<span class="hljs-number">250.240</span>:<span class="hljs-number">27017</span><br>    syncedTo: Thu Jan <span class="hljs-number">01</span> <span class="hljs-number">1970</span> <span class="hljs-number">08</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> GMT+<span class="hljs-number">0800</span> (CST)<br>    <span class="hljs-number">1542251316</span> secs (<span class="hljs-number">428403.14</span> hrs) behind the primary<br></code></pre></td></tr></table></figure><h5 id="1-10-2-2-副本集测试"><a href="#1-10-2-2-副本集测试" class="headerlink" title="1.10.2.2 副本集测试"></a>1.10.2.2 副本集测试</h5><p>在<code>Primary </code>上插入一万条客户数据：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">rs0:PRIMARY&gt; <span class="hljs-built_in">for</span>(var i=<span class="hljs-number">0</span>;<span class="hljs-selector-tag">i</span>&lt;<span class="hljs-number">10000</span>;<span class="hljs-selector-tag">i</span>++)&#123;db<span class="hljs-selector-class">.customer</span><span class="hljs-selector-class">.insert</span>(&#123;&quot;name&quot;:<span class="hljs-string">&quot;user&quot;</span>+i&#125;)&#125;<br>WriteResult(&#123; &quot;nInserted&quot; : <span class="hljs-number">1</span> &#125;)<br>rs0:PRIMARY&gt; db.customer.<span class="hljs-built_in">count</span>()<br><span class="hljs-number">10000</span><br></code></pre></td></tr></table></figure><p>在<code>Secondary</code>上查看客户数据是否已经同步：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">rs0:SECONDARY&gt; rs<span class="hljs-selector-class">.slaveOk</span>()<br>rs0:SECONDARY&gt; db<span class="hljs-selector-class">.customer</span><span class="hljs-selector-class">.count</span>()<br><span class="hljs-number">10000</span><br></code></pre></td></tr></table></figure><p><strong>故障转移测试</strong><br>执行如下命令关闭<code>Primary</code>节点，查看其他<code>2</code>个节点的情况：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br></pre></td><td class="code"><pre><code class="hljs css">mongod <span class="hljs-attr">--shutdown</span> <span class="hljs-attr">--dbpath</span> /usr/local/mongodb-<span class="hljs-number">4.0</span>.<span class="hljs-number">2</span>/data<br># 查看Primary节点关闭之前的状态<br>rs0:PRIMARY&gt; rs.<span class="hljs-built_in">status</span>()<br>&#123;<br>    &quot;set&quot; : <span class="hljs-string">&quot;rs0&quot;</span>,<br>    <span class="hljs-string">&quot;date&quot;</span> : <span class="hljs-built_in">ISODate</span>(<span class="hljs-string">&quot;2018-11-15T03:36:31.393Z&quot;</span>),<br>    <span class="hljs-string">&quot;myState&quot;</span> : <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;term&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">4</span>),<br>    <span class="hljs-string">&quot;syncingTo&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;syncSourceHost&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;syncSourceId&quot;</span> : -<span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;heartbeatIntervalMillis&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">2000</span>),<br>    <span class="hljs-string">&quot;optimes&quot;</span> : &#123;<br>        &quot;lastCommittedOpTime&quot; : &#123;<br>            &quot;ts&quot; : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542252988</span>, <span class="hljs-number">1</span>),<br>            <span class="hljs-string">&quot;t&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">4</span>)<br>        &#125;,<br>        &quot;readConcernMajorityOpTime&quot; : &#123;<br>            &quot;ts&quot; : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542252988</span>, <span class="hljs-number">1</span>),<br>            <span class="hljs-string">&quot;t&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">4</span>)<br>        &#125;,<br>        &quot;appliedOpTime&quot; : &#123;<br>            &quot;ts&quot; : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542252988</span>, <span class="hljs-number">1</span>),<br>            <span class="hljs-string">&quot;t&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">4</span>)<br>        &#125;,<br>        &quot;durableOpTime&quot; : &#123;<br>            &quot;ts&quot; : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542252988</span>, <span class="hljs-number">1</span>),<br>            <span class="hljs-string">&quot;t&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">4</span>)<br>        &#125;<br>    &#125;,<br>    &quot;lastStableCheckpointTimestamp&quot; : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542252978</span>, <span class="hljs-number">1</span>),<br>    <span class="hljs-string">&quot;members&quot;</span> : [<br>    &#123;<br>        &quot;_id&quot; : <span class="hljs-number">0</span>,<br>        <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;172.16.250.234:27017&quot;</span>,<br>        <span class="hljs-string">&quot;health&quot;</span> : <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;state&quot;</span> : <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&quot;stateStr&quot;</span> : <span class="hljs-string">&quot;SECONDARY&quot;</span>,<br>        <span class="hljs-string">&quot;uptime&quot;</span> : <span class="hljs-number">425</span>,<br>        <span class="hljs-string">&quot;optime&quot;</span> : &#123;<br>            &quot;ts&quot; : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542252988</span>, <span class="hljs-number">1</span>),<br>            <span class="hljs-string">&quot;t&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">4</span>)<br>        &#125;,<br>        &quot;optimeDurable&quot; : &#123;<br>            &quot;ts&quot; : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542252988</span>, <span class="hljs-number">1</span>),<br>            <span class="hljs-string">&quot;t&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">4</span>)<br>        &#125;,<br>        &quot;optimeDate&quot; : <span class="hljs-built_in">ISODate</span>(<span class="hljs-string">&quot;2018-11-15T03:36:28Z&quot;</span>),<br>        <span class="hljs-string">&quot;optimeDurableDate&quot;</span> : <span class="hljs-built_in">ISODate</span>(<span class="hljs-string">&quot;2018-11-15T03:36:28Z&quot;</span>),<br>        <span class="hljs-string">&quot;lastHeartbeat&quot;</span> : <span class="hljs-built_in">ISODate</span>(<span class="hljs-string">&quot;2018-11-15T03:36:31.243Z&quot;</span>),<br>        <span class="hljs-string">&quot;lastHeartbeatRecv&quot;</span> : <span class="hljs-built_in">ISODate</span>(<span class="hljs-string">&quot;2018-11-15T03:36:30.233Z&quot;</span>),<br>        <span class="hljs-string">&quot;pingMs&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">0</span>),<br>        <span class="hljs-string">&quot;lastHeartbeatMessage&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;syncingTo&quot;</span> : <span class="hljs-string">&quot;172.16.250.239:27017&quot;</span>,<br>        <span class="hljs-string">&quot;syncSourceHost&quot;</span> : <span class="hljs-string">&quot;172.16.250.239:27017&quot;</span>,<br>        <span class="hljs-string">&quot;syncSourceId&quot;</span> : <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;infoMessage&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;configVersion&quot;</span> : <span class="hljs-number">104666</span><br>    &#125;,<br>    &#123;<br>        &quot;_id&quot; : <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;172.16.250.239:27017&quot;</span>,<br>        <span class="hljs-string">&quot;health&quot;</span> : <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;state&quot;</span> : <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;stateStr&quot;</span> : <span class="hljs-string">&quot;PRIMARY&quot;</span>,<br>        <span class="hljs-string">&quot;uptime&quot;</span> : <span class="hljs-number">428</span>,<br>        <span class="hljs-string">&quot;optime&quot;</span> : &#123;<br>            &quot;ts&quot; : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542252988</span>, <span class="hljs-number">1</span>),<br>            <span class="hljs-string">&quot;t&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">4</span>)<br>        &#125;,<br>        &quot;optimeDate&quot; : <span class="hljs-built_in">ISODate</span>(<span class="hljs-string">&quot;2018-11-15T03:36:28Z&quot;</span>),<br>        <span class="hljs-string">&quot;syncingTo&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;syncSourceHost&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;syncSourceId&quot;</span> : -<span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;infoMessage&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;electionTime&quot;</span> : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542252577</span>, <span class="hljs-number">2</span>),<br>        <span class="hljs-string">&quot;electionDate&quot;</span> : <span class="hljs-built_in">ISODate</span>(<span class="hljs-string">&quot;2018-11-15T03:29:37Z&quot;</span>),<br>        <span class="hljs-string">&quot;configVersion&quot;</span> : <span class="hljs-number">104666</span>,<br>        <span class="hljs-string">&quot;self&quot;</span> : true,<br>        <span class="hljs-string">&quot;lastHeartbeatMessage&quot;</span> : <span class="hljs-string">&quot;&quot;</span><br>    &#125;,<br>    &#123;<br>        &quot;_id&quot; : <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;172.16.250.240:27017&quot;</span>,<br>        <span class="hljs-string">&quot;health&quot;</span> : <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;state&quot;</span> : <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&quot;stateStr&quot;</span> : <span class="hljs-string">&quot;SECONDARY&quot;</span>,<br>        <span class="hljs-string">&quot;uptime&quot;</span> : <span class="hljs-number">78</span>,<br>        <span class="hljs-string">&quot;optime&quot;</span> : &#123;<br>            &quot;ts&quot; : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542252988</span>, <span class="hljs-number">1</span>),<br>            <span class="hljs-string">&quot;t&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">4</span>)<br>        &#125;,<br>        &quot;optimeDurable&quot; : &#123;<br>            &quot;ts&quot; : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542252988</span>, <span class="hljs-number">1</span>),<br>            <span class="hljs-string">&quot;t&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">4</span>)<br>        &#125;,<br>        &quot;optimeDate&quot; : <span class="hljs-built_in">ISODate</span>(<span class="hljs-string">&quot;2018-11-15T03:36:28Z&quot;</span>),<br>        <span class="hljs-string">&quot;optimeDurableDate&quot;</span> : <span class="hljs-built_in">ISODate</span>(<span class="hljs-string">&quot;2018-11-15T03:36:28Z&quot;</span>),<br>        <span class="hljs-string">&quot;lastHeartbeat&quot;</span> : <span class="hljs-built_in">ISODate</span>(<span class="hljs-string">&quot;2018-11-15T03:36:31.376Z&quot;</span>),<br>        <span class="hljs-string">&quot;lastHeartbeatRecv&quot;</span> : <span class="hljs-built_in">ISODate</span>(<span class="hljs-string">&quot;2018-11-15T03:36:29.597Z&quot;</span>),<br>        <span class="hljs-string">&quot;pingMs&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">0</span>),<br>        <span class="hljs-string">&quot;lastHeartbeatMessage&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;syncingTo&quot;</span> : <span class="hljs-string">&quot;172.16.250.239:27017&quot;</span>,<br>        <span class="hljs-string">&quot;syncSourceHost&quot;</span> : <span class="hljs-string">&quot;172.16.250.239:27017&quot;</span>,<br>        <span class="hljs-string">&quot;syncSourceId&quot;</span> : <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;infoMessage&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;configVersion&quot;</span> : <span class="hljs-number">104666</span><br>    &#125;],<br>    &quot;ok&quot; : <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;operationTime&quot;</span> : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542252988</span>, <span class="hljs-number">1</span>),<br>    <span class="hljs-string">&quot;$clusterTime&quot;</span> : &#123;<br>        &quot;clusterTime&quot; : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542252988</span>, <span class="hljs-number">1</span>),<br>        <span class="hljs-string">&quot;signature&quot;</span> : &#123;<br>            &quot;hash&quot; : <span class="hljs-built_in">BinData</span>(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA=&quot;</span>),<br>            <span class="hljs-string">&quot;keyId&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">0</span>)<br>        &#125;<br>    &#125;<br>&#125;<br># 在任意其他节点上查看Primary节点关闭之后的状态<br>&gt; rs<span class="hljs-selector-class">.status</span>()<br>&#123;<br>    &quot;set&quot; : <span class="hljs-string">&quot;rs0&quot;</span>,<br>    <span class="hljs-string">&quot;date&quot;</span> : <span class="hljs-built_in">ISODate</span>(<span class="hljs-string">&quot;2018-11-15T03:41:31.213Z&quot;</span>),<br>    <span class="hljs-string">&quot;myState&quot;</span> : <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;term&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">5</span>),<br>    <span class="hljs-string">&quot;syncingTo&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;syncSourceHost&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;syncSourceId&quot;</span> : -<span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;heartbeatIntervalMillis&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">2000</span>),<br>    <span class="hljs-string">&quot;optimes&quot;</span> : &#123;<br>        &quot;lastCommittedOpTime&quot; : &#123;<br>            &quot;ts&quot; : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542253290</span>, <span class="hljs-number">1</span>),<br>            <span class="hljs-string">&quot;t&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">5</span>)<br>        &#125;,<br>        &quot;readConcernMajorityOpTime&quot; : &#123;<br>            &quot;ts&quot; : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542253290</span>, <span class="hljs-number">1</span>),<br>            <span class="hljs-string">&quot;t&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">5</span>)<br>        &#125;,<br>        &quot;appliedOpTime&quot; : &#123;<br>            &quot;ts&quot; : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542253290</span>, <span class="hljs-number">1</span>),<br>            <span class="hljs-string">&quot;t&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">5</span>)<br>        &#125;,<br>        &quot;durableOpTime&quot; : &#123;<br>            &quot;ts&quot; : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542253290</span>, <span class="hljs-number">1</span>),<br>            <span class="hljs-string">&quot;t&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">5</span>)<br>        &#125;<br>    &#125;,<br>    &quot;lastStableCheckpointTimestamp&quot; : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542253268</span>, <span class="hljs-number">1</span>),<br>    <span class="hljs-string">&quot;members&quot;</span> : [<br>    &#123;<br>        &quot;_id&quot; : <span class="hljs-number">0</span>,<br>        <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;172.16.250.234:27017&quot;</span>,<br>        <span class="hljs-string">&quot;health&quot;</span> : <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;state&quot;</span> : <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;stateStr&quot;</span> : <span class="hljs-string">&quot;PRIMARY&quot;</span>,<br>        <span class="hljs-string">&quot;uptime&quot;</span> : <span class="hljs-number">6115</span>,<br>        <span class="hljs-string">&quot;optime&quot;</span> : &#123;<br>            &quot;ts&quot; : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542253290</span>, <span class="hljs-number">1</span>),<br>            <span class="hljs-string">&quot;t&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">5</span>)<br>        &#125;,<br>        &quot;optimeDate&quot; : <span class="hljs-built_in">ISODate</span>(<span class="hljs-string">&quot;2018-11-15T03:41:30Z&quot;</span>),<br>        <span class="hljs-string">&quot;syncingTo&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;syncSourceHost&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;syncSourceId&quot;</span> : -<span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;infoMessage&quot;</span> : <span class="hljs-string">&quot;could not find member to sync from&quot;</span>,<br>        <span class="hljs-string">&quot;electionTime&quot;</span> : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542253288</span>, <span class="hljs-number">1</span>),<br>        <span class="hljs-string">&quot;electionDate&quot;</span> : <span class="hljs-built_in">ISODate</span>(<span class="hljs-string">&quot;2018-11-15T03:41:28Z&quot;</span>),<br>        <span class="hljs-string">&quot;configVersion&quot;</span> : <span class="hljs-number">104666</span>,<br>        <span class="hljs-string">&quot;self&quot;</span> : true,<br>        <span class="hljs-string">&quot;lastHeartbeatMessage&quot;</span> : <span class="hljs-string">&quot;&quot;</span><br>    &#125;,<br>    &#123;<br>        &quot;_id&quot; : <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;172.16.250.239:27017&quot;</span>,<br>        <span class="hljs-string">&quot;health&quot;</span> : <span class="hljs-number">0</span>,<br>        <span class="hljs-string">&quot;state&quot;</span> : <span class="hljs-number">8</span>,<br>        <span class="hljs-string">&quot;stateStr&quot;</span> : <span class="hljs-string">&quot;(not reachable/healthy)&quot;</span>,<br>        <span class="hljs-string">&quot;uptime&quot;</span> : <span class="hljs-number">0</span>,<br>        <span class="hljs-string">&quot;optime&quot;</span> : &#123;<br>            &quot;ts&quot; : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>),<br>            <span class="hljs-string">&quot;t&quot;</span> : <span class="hljs-built_in">NumberLong</span>(-<span class="hljs-number">1</span>)<br>        &#125;,<br>        &quot;optimeDurable&quot; : &#123;<br>            &quot;ts&quot; : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>),<br>            <span class="hljs-string">&quot;t&quot;</span> : <span class="hljs-built_in">NumberLong</span>(-<span class="hljs-number">1</span>)<br>        &#125;,<br>        &quot;optimeDate&quot; : <span class="hljs-built_in">ISODate</span>(<span class="hljs-string">&quot;1970-01-01T00:00:00Z&quot;</span>),<br>        <span class="hljs-string">&quot;optimeDurableDate&quot;</span> : <span class="hljs-built_in">ISODate</span>(<span class="hljs-string">&quot;1970-01-01T00:00:00Z&quot;</span>),<br>        <span class="hljs-string">&quot;lastHeartbeat&quot;</span> : <span class="hljs-built_in">ISODate</span>(<span class="hljs-string">&quot;2018-11-15T03:41:30.593Z&quot;</span>),<br>        <span class="hljs-string">&quot;lastHeartbeatRecv&quot;</span> : <span class="hljs-built_in">ISODate</span>(<span class="hljs-string">&quot;2018-11-15T03:41:18.148Z&quot;</span>),<br>        <span class="hljs-string">&quot;pingMs&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">0</span>),<br>        <span class="hljs-string">&quot;lastHeartbeatMessage&quot;</span> : <span class="hljs-string">&quot;Error connecting to 172.16.250.239:27017 :: caused by ::     Connection refused&quot;</span>,<br>        <span class="hljs-string">&quot;syncingTo&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;syncSourceHost&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;syncSourceId&quot;</span> : -<span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;infoMessage&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;configVersion&quot;</span> : -<span class="hljs-number">1</span><br>    &#125;,<br>    &#123;<br>        &quot;_id&quot; : <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;172.16.250.240:27017&quot;</span>,<br>        <span class="hljs-string">&quot;health&quot;</span> : <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;state&quot;</span> : <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&quot;stateStr&quot;</span> : <span class="hljs-string">&quot;SECONDARY&quot;</span>,<br>        <span class="hljs-string">&quot;uptime&quot;</span> : <span class="hljs-number">372</span>,<br>        <span class="hljs-string">&quot;optime&quot;</span> : &#123;<br>            &quot;ts&quot; : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542253268</span>, <span class="hljs-number">1</span>),<br>            <span class="hljs-string">&quot;t&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">4</span>)<br>        &#125;,<br>        &quot;optimeDurable&quot; : &#123;<br>            &quot;ts&quot; : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542253268</span>, <span class="hljs-number">1</span>),<br>            <span class="hljs-string">&quot;t&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">4</span>)<br>        &#125;,<br>        &quot;optimeDate&quot; : <span class="hljs-built_in">ISODate</span>(<span class="hljs-string">&quot;2018-11-15T03:41:08Z&quot;</span>),<br>        <span class="hljs-string">&quot;optimeDurableDate&quot;</span> : <span class="hljs-built_in">ISODate</span>(<span class="hljs-string">&quot;2018-11-15T03:41:08Z&quot;</span>),<br>        <span class="hljs-string">&quot;lastHeartbeat&quot;</span> : <span class="hljs-built_in">ISODate</span>(<span class="hljs-string">&quot;2018-11-15T03:41:30.591Z&quot;</span>),<br>        <span class="hljs-string">&quot;lastHeartbeatRecv&quot;</span> : <span class="hljs-built_in">ISODate</span>(<span class="hljs-string">&quot;2018-11-15T03:41:31.106Z&quot;</span>),<br>        <span class="hljs-string">&quot;pingMs&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">0</span>),<br>        <span class="hljs-string">&quot;lastHeartbeatMessage&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;syncingTo&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;syncSourceHost&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;syncSourceId&quot;</span> : -<span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;infoMessage&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;configVersion&quot;</span> : <span class="hljs-number">104666</span><br>    &#125;],<br>    &quot;ok&quot; : <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;operationTime&quot;</span> : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542253290</span>, <span class="hljs-number">1</span>),<br>    <span class="hljs-string">&quot;$clusterTime&quot;</span> : &#123;<br>        &quot;clusterTime&quot; : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542253290</span>, <span class="hljs-number">1</span>),<br>        <span class="hljs-string">&quot;signature&quot;</span> : &#123;<br>            &quot;hash&quot; : <span class="hljs-built_in">BinData</span>(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA=&quot;</span>),<br>            <span class="hljs-string">&quot;keyId&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">0</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再次启动<code>172.16.250.239:27017</code>节点，由于其选举优先级最高，自动被选举为<code>Primary</code>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs css"># 待<span class="hljs-number">172.16</span>.<span class="hljs-number">250.239</span>:<span class="hljs-number">27017</span> 节点启动后再次查看副本集状态<br>&gt; rs.<span class="hljs-built_in">status</span>()<br>&#123;<br>&quot;set&quot; : <span class="hljs-string">&quot;rs0&quot;</span>,<br><span class="hljs-string">&quot;date&quot;</span> : <span class="hljs-built_in">ISODate</span>(<span class="hljs-string">&quot;2018-11-15T03:44:01.745Z&quot;</span>),<br><span class="hljs-string">&quot;myState&quot;</span> : <span class="hljs-number">2</span>,<br><span class="hljs-string">&quot;term&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">6</span>),<br><span class="hljs-string">&quot;syncingTo&quot;</span> : <span class="hljs-string">&quot;172.16.250.239:27017&quot;</span>,<br><span class="hljs-string">&quot;syncSourceHost&quot;</span> : <span class="hljs-string">&quot;172.16.250.239:27017&quot;</span>,<br><span class="hljs-string">&quot;syncSourceId&quot;</span> : <span class="hljs-number">1</span>,<br><span class="hljs-string">&quot;heartbeatIntervalMillis&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">2000</span>),<br><span class="hljs-string">&quot;optimes&quot;</span> : &#123;<br>&quot;lastCommittedOpTime&quot; : &#123;<br>&quot;ts&quot; : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542253435</span>, <span class="hljs-number">1</span>),<br><span class="hljs-string">&quot;t&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">6</span>)<br>&#125;,<br>&quot;readConcernMajorityOpTime&quot; : &#123;<br>&quot;ts&quot; : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542253435</span>, <span class="hljs-number">1</span>),<br><span class="hljs-string">&quot;t&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">6</span>)<br>&#125;,<br>&quot;appliedOpTime&quot; : &#123;<br>&quot;ts&quot; : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542253435</span>, <span class="hljs-number">1</span>),<br><span class="hljs-string">&quot;t&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">6</span>)<br>&#125;,<br>&quot;durableOpTime&quot; : &#123;<br>&quot;ts&quot; : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542253435</span>, <span class="hljs-number">1</span>),<br><span class="hljs-string">&quot;t&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">6</span>)<br>&#125;<br>&#125;,<br>&quot;lastStableCheckpointTimestamp&quot; : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542253400</span>, <span class="hljs-number">1</span>),<br><span class="hljs-string">&quot;members&quot;</span> : [<br>&#123;<br>&quot;_id&quot; : <span class="hljs-number">0</span>,<br><span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;172.16.250.234:27017&quot;</span>,<br><span class="hljs-string">&quot;health&quot;</span> : <span class="hljs-number">1</span>,<br><span class="hljs-string">&quot;state&quot;</span> : <span class="hljs-number">2</span>,<br><span class="hljs-string">&quot;stateStr&quot;</span> : <span class="hljs-string">&quot;SECONDARY&quot;</span>,<br><span class="hljs-string">&quot;uptime&quot;</span> : <span class="hljs-number">6265</span>,<br><span class="hljs-string">&quot;optime&quot;</span> : &#123;<br>&quot;ts&quot; : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542253435</span>, <span class="hljs-number">1</span>),<br><span class="hljs-string">&quot;t&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">6</span>)<br>&#125;,<br>&quot;optimeDate&quot; : <span class="hljs-built_in">ISODate</span>(<span class="hljs-string">&quot;2018-11-15T03:43:55Z&quot;</span>),<br><span class="hljs-string">&quot;syncingTo&quot;</span> : <span class="hljs-string">&quot;172.16.250.239:27017&quot;</span>,<br><span class="hljs-string">&quot;syncSourceHost&quot;</span> : <span class="hljs-string">&quot;172.16.250.239:27017&quot;</span>,<br><span class="hljs-string">&quot;syncSourceId&quot;</span> : <span class="hljs-number">1</span>,<br><span class="hljs-string">&quot;infoMessage&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br><span class="hljs-string">&quot;configVersion&quot;</span> : <span class="hljs-number">104666</span>,<br><span class="hljs-string">&quot;self&quot;</span> : true,<br><span class="hljs-string">&quot;lastHeartbeatMessage&quot;</span> : <span class="hljs-string">&quot;&quot;</span><br>&#125;,<br>&#123;<br>&quot;_id&quot; : <span class="hljs-number">1</span>,<br><span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;172.16.250.239:27017&quot;</span>,<br><span class="hljs-string">&quot;health&quot;</span> : <span class="hljs-number">1</span>,<br><span class="hljs-string">&quot;state&quot;</span> : <span class="hljs-number">1</span>,<br><span class="hljs-string">&quot;stateStr&quot;</span> : <span class="hljs-string">&quot;PRIMARY&quot;</span>,<br><span class="hljs-string">&quot;uptime&quot;</span> : <span class="hljs-number">23</span>,<br><span class="hljs-string">&quot;optime&quot;</span> : &#123;<br>&quot;ts&quot; : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542253435</span>, <span class="hljs-number">1</span>),<br><span class="hljs-string">&quot;t&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">6</span>)<br>&#125;,<br>&quot;optimeDurable&quot; : &#123;<br>&quot;ts&quot; : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542253435</span>, <span class="hljs-number">1</span>),<br><span class="hljs-string">&quot;t&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">6</span>)<br>&#125;,<br>&quot;optimeDate&quot; : <span class="hljs-built_in">ISODate</span>(<span class="hljs-string">&quot;2018-11-15T03:43:55Z&quot;</span>),<br><span class="hljs-string">&quot;optimeDurableDate&quot;</span> : <span class="hljs-built_in">ISODate</span>(<span class="hljs-string">&quot;2018-11-15T03:43:55Z&quot;</span>),<br><span class="hljs-string">&quot;lastHeartbeat&quot;</span> : <span class="hljs-built_in">ISODate</span>(<span class="hljs-string">&quot;2018-11-15T03:44:01.228Z&quot;</span>),<br><span class="hljs-string">&quot;lastHeartbeatRecv&quot;</span> : <span class="hljs-built_in">ISODate</span>(<span class="hljs-string">&quot;2018-11-15T03:44:00.835Z&quot;</span>),<br><span class="hljs-string">&quot;pingMs&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">0</span>),<br><span class="hljs-string">&quot;lastHeartbeatMessage&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br><span class="hljs-string">&quot;syncingTo&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br><span class="hljs-string">&quot;syncSourceHost&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br><span class="hljs-string">&quot;syncSourceId&quot;</span> : -<span class="hljs-number">1</span>,<br><span class="hljs-string">&quot;infoMessage&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br><span class="hljs-string">&quot;electionTime&quot;</span> : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542253424</span>, <span class="hljs-number">1</span>),<br><span class="hljs-string">&quot;electionDate&quot;</span> : <span class="hljs-built_in">ISODate</span>(<span class="hljs-string">&quot;2018-11-15T03:43:44Z&quot;</span>),<br><span class="hljs-string">&quot;configVersion&quot;</span> : <span class="hljs-number">104666</span><br>&#125;,<br>&#123;<br>&quot;_id&quot; : <span class="hljs-number">2</span>,<br><span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;172.16.250.240:27017&quot;</span>,<br><span class="hljs-string">&quot;health&quot;</span> : <span class="hljs-number">1</span>,<br><span class="hljs-string">&quot;state&quot;</span> : <span class="hljs-number">2</span>,<br><span class="hljs-string">&quot;stateStr&quot;</span> : <span class="hljs-string">&quot;SECONDARY&quot;</span>,<br><span class="hljs-string">&quot;uptime&quot;</span> : <span class="hljs-number">522</span>,<br><span class="hljs-string">&quot;optime&quot;</span> : &#123;<br>&quot;ts&quot; : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542253435</span>, <span class="hljs-number">1</span>),<br><span class="hljs-string">&quot;t&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">6</span>)<br>&#125;,<br>&quot;optimeDurable&quot; : &#123;<br>&quot;ts&quot; : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542253435</span>, <span class="hljs-number">1</span>),<br><span class="hljs-string">&quot;t&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">6</span>)<br>&#125;,<br>&quot;optimeDate&quot; : <span class="hljs-built_in">ISODate</span>(<span class="hljs-string">&quot;2018-11-15T03:43:55Z&quot;</span>),<br><span class="hljs-string">&quot;optimeDurableDate&quot;</span> : <span class="hljs-built_in">ISODate</span>(<span class="hljs-string">&quot;2018-11-15T03:43:55Z&quot;</span>),<br><span class="hljs-string">&quot;lastHeartbeat&quot;</span> : <span class="hljs-built_in">ISODate</span>(<span class="hljs-string">&quot;2018-11-15T03:44:01.166Z&quot;</span>),<br><span class="hljs-string">&quot;lastHeartbeatRecv&quot;</span> : <span class="hljs-built_in">ISODate</span>(<span class="hljs-string">&quot;2018-11-15T03:44:01.414Z&quot;</span>),<br><span class="hljs-string">&quot;pingMs&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">0</span>),<br><span class="hljs-string">&quot;lastHeartbeatMessage&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br><span class="hljs-string">&quot;syncingTo&quot;</span> : <span class="hljs-string">&quot;172.16.250.239:27017&quot;</span>,<br><span class="hljs-string">&quot;syncSourceHost&quot;</span> : <span class="hljs-string">&quot;172.16.250.239:27017&quot;</span>,<br><span class="hljs-string">&quot;syncSourceId&quot;</span> : <span class="hljs-number">1</span>,<br><span class="hljs-string">&quot;infoMessage&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br><span class="hljs-string">&quot;configVersion&quot;</span> : <span class="hljs-number">104666</span><br>&#125;<br>],<br>&quot;ok&quot; : <span class="hljs-number">1</span>,<br><span class="hljs-string">&quot;operationTime&quot;</span> : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542253435</span>, <span class="hljs-number">1</span>),<br><span class="hljs-string">&quot;$clusterTime&quot;</span> : &#123;<br>&quot;clusterTime&quot; : <span class="hljs-built_in">Timestamp</span>(<span class="hljs-number">1542253435</span>, <span class="hljs-number">1</span>),<br><span class="hljs-string">&quot;signature&quot;</span> : &#123;<br>&quot;hash&quot; : <span class="hljs-built_in">BinData</span>(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA=&quot;</span>),<br><span class="hljs-string">&quot;keyId&quot;</span> : <span class="hljs-built_in">NumberLong</span>(<span class="hljs-number">0</span>)<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-10-2-3-开启安全认证"><a href="#1-10-2-3-开启安全认证" class="headerlink" title="1.10.2.3 开启安全认证"></a>1.10.2.3 开启安全认证</h5><p><strong>创建用户</strong><br>登录 <code>PRIMARY</code>节点创建用户，在此我们对 <code>test</code> 库开启安全认证。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">rs0:<span class="hljs-keyword">PRIMARY</span>&gt; <span class="hljs-keyword">show</span> dbs<br><span class="hljs-keyword">admin</span>   <span class="hljs-number">0.000</span>GB<br>config  <span class="hljs-number">0.000</span>GB<br><span class="hljs-keyword">local</span>   <span class="hljs-number">0.002</span>GB<br>test    <span class="hljs-number">0.000</span>GB<br>rs0:<span class="hljs-keyword">PRIMARY</span>&gt; use <span class="hljs-keyword">admin</span><br>switched <span class="hljs-keyword">to</span> db <span class="hljs-keyword">admin</span><br>rs0:<span class="hljs-keyword">PRIMARY</span>&gt; db.createUser(&#123;<span class="hljs-keyword">user</span>:&quot;root&quot;,pwd:&quot;123456&quot;,roles:[&#123;<span class="hljs-keyword">role</span>:&quot;userAdminAnyDatabase&quot;,db:&quot;admin&quot;&#125;]&#125;)<br>Successfully added <span class="hljs-keyword">user</span>: &#123;<br>&quot;user&quot; : &quot;root&quot;,<br>&quot;roles&quot; : [<br>&#123;<br>&quot;role&quot; : &quot;userAdminAnyDatabase&quot;,<br>&quot;db&quot; : &quot;admin&quot;<br>&#125;<br>]<br>&#125;<br>rs0:<span class="hljs-keyword">PRIMARY</span>&gt; use test<br>switched <span class="hljs-keyword">to</span> db test<br>rs0:<span class="hljs-keyword">PRIMARY</span>&gt; db.createUser(&#123;<span class="hljs-keyword">user</span>:&quot;admin&quot;,pwd:&quot;admin&quot;,roles:[&#123;<span class="hljs-keyword">role</span>:&quot;readWrite&quot;,db:&quot;test&quot;&#125;]&#125;)<br>Successfully added <span class="hljs-keyword">user</span>: &#123;<br>&quot;user&quot; : &quot;admin&quot;,<br>&quot;roles&quot; : [<br>&#123;<br>&quot;role&quot; : &quot;readWrite&quot;,<br>&quot;db&quot; : &quot;test&quot;<br>&#125;<br>]<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>创建<code>keyFile</code>文件</strong><br>先停掉所有<code>SECONDARY</code>节点的<code>MongoDB</code>服务，然后再停掉<code>PRIMARY</code>节点的<code>MongoDB</code>服务，并在<code>PRIMARY</code>节点所在服务器上创建<code>keyFile</code>文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@hadoop39 mongodb-4.0.2]# openssl rand -<span class="hljs-built_in">base64</span> 666 &gt; /usr/local/mongodb-4.0.2/keyfile<br>[root@hadoop39 mongodb-4.0.2]# <span class="hljs-built_in">chmod</span> 600 /usr/local/mongodb-4.0.2/keyfile<br></code></pre></td></tr></table></figure><p>将生成的<code>keyFile</code>文件拷贝到其他节点服务器上，并修改文件的操作权限为<code> 600</code>。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">chmod</span> <span class="hljs-number">600</span> /usr/local/mongodb-<span class="hljs-number">4</span>.<span class="hljs-number">0</span>.<span class="hljs-number">2</span>/keyfile<br></code></pre></td></tr></table></figure><p>更新启动配置文件<br>修改<code>PRIMARY</code>节点的 <code>mongodb.conf </code>文件，增加如下内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># Add below Config</span><br><span class="hljs-attr">auth</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">oplogSize</span>=<span class="hljs-number">100</span><br><span class="hljs-attr">keyFile</span>=/usr/local/mongodb-<span class="hljs-number">4.0</span>.<span class="hljs-number">2</span>/keyfile<br></code></pre></td></tr></table></figure><p>修改<code>SECONDARY</code>节点的 <code>mongodb.conf </code>文件，增加如下内容：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># Add below Config</span><br><span class="hljs-attribute">oplogSize</span>=<span class="hljs-number">100</span><br><span class="hljs-attribute">keyFile</span>=/usr/local/mongodb-<span class="hljs-number">4</span>.<span class="hljs-number">0</span>.<span class="hljs-number">2</span>/keyfile<br></code></pre></td></tr></table></figure><p><strong>启动副本集</strong><br>先以<code> --auth</code> 方式启动<code>PRIMARY</code>节点：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift">[root<span class="hljs-meta">@hadoop39</span> mongodb<span class="hljs-operator">-</span><span class="hljs-number">4.0</span>.<span class="hljs-number">2</span>]# mongod <span class="hljs-operator">-</span>f <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mongodb-4.0.2/</span>mongodb.conf<br></code></pre></td></tr></table></figure><p>再启动<code>SECONDARY</code>节点：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mongod</span> -f /usr/local/mongodb-<span class="hljs-number">4</span>.<span class="hljs-number">0</span>.<span class="hljs-number">2</span>/mongodb.conf<br></code></pre></td></tr></table></figure><p><strong>登录测试</strong></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[root@hadoop39 mongodb<span class="hljs-string">-4</span>.0.2]# mongo -uadmin -padmin 172.16.250.239:27017<br>MongoDB shell version v4.0.2<br>connecting to: mongodb://172.16.250.239:27017/test<br>MongoDB server version: 4.0.2<br>rs0:PRIMARY&gt; show dbs;<br><span class="hljs-keyword">test </span>0.000GB<br></code></pre></td></tr></table></figure><p><code>admin</code>用户只能看到<code>test</code>库。</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>非关系型数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MongoDB</tag>
      
      <tag>数据库</tag>
      
      <tag>非关系型数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021年度歌单</title>
    <link href="/2021/01/03/2021%E5%B9%B4%E5%BA%A6%E6%AD%8C%E5%8D%95/"/>
    <url>/2021/01/03/2021%E5%B9%B4%E5%BA%A6%E6%AD%8C%E5%8D%95/</url>
    
    <content type="html"><![CDATA[<!-- require APlayer --> <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"> <script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js"></script> <!-- require MetingJS --> <script src="https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js"></script> <p><meting-js server="netease" type="playlist" id="7183485715" autoplay="true" listmaxheight="400" theme="#3580BB"> </meting-js></p><p>十月美味可口的咖喱，需要稍等一下才能加载出来哦~</p>]]></content>
    
    
    <categories>
      
      <category>歌单</category>
      
      <category>2021</category>
      
    </categories>
    
    
    <tags>
      
      <tag>摇滚</tag>
      
      <tag>歌单</tag>
      
      <tag>日本流行</tag>
      
      <tag>二次元</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NIO图文详解</title>
    <link href="/2020/05/24/NIO%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/"/>
    <url>/2020/05/24/NIO%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="一、NIO简介"><a href="#一、NIO简介" class="headerlink" title="一、NIO简介"></a>一、<a href="https://so.csdn.net/so/search?q=NIO&spm=1001.2101.3001.7020">NIO</a>简介</h1><p>NIO 是 Java SE 1.4 引入的一组新的 I&#x2F;O 相关的 API，它提供了非阻塞式 I&#x2F;O、选择器、通道、缓冲区等新的概念和机制。相比与传统的 I&#x2F;O 多出的 N 不是单纯的 New，更多的是代表了 Non-blocking 非阻塞，NIO具有更高的并发性、可扩展性以及更少的资源消耗等优点。</p><h1 id="二、NIO-与传统BIO"><a href="#二、NIO-与传统BIO" class="headerlink" title="二、NIO 与传统BIO"></a>二、NIO 与传统BIO</h1><p><strong>NIO</strong>：是同步非阻塞的，<a href="https://so.csdn.net/so/search?q=%E6%9C%8D%E5%8A%A1%E5%99%A8&spm=1001.2101.3001.7020">服务器</a>实现模式为 一个线程处理多个连接。服务端只会创建一个线程负责管理Selector（多路复用器），Selector（多路复用器）不断的轮询注册其上的Channel（通道）中的 I&#x2F;O 事件，并将监听到的事件进行相应的处理。每个客户端与服务端建立连接时会创建一个 SocketChannel 通道，通过 SocketChannel 进行数据交互。<br><img src="/2020/05/24/NIO%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/163b0dbf7d0dd5bf43e1380b69e75c85.png" alt="在这里插入图片描述"></p><p><strong>BIO</strong>：全称是Blocking IO，同步阻塞式IO，是JDK1.4之前的传统IO模型，服务器实现模式为一个连接一个线程。每当客户端有连接请求时服务器端就需要启动一个线程进行处理。<br><img src="/2020/05/24/NIO%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/b75cadcb751432d4ce9c6aabe2f3690d.png" alt="在这里插入图片描述"><br><strong>两者主要区别如下：</strong></p><ol><li>数据处理方式‌：<ul><li>‌NIO：以块（缓冲区）的方式处理数据，是同步非阻塞的。NIO模型中，数据读取到一个缓冲区中，需要时可在缓冲区内前后移动，增加了处理过程中的灵活性。线程在等待数据完全传输过来之前不会被阻塞，可以继续处理其他任务‌。</li><li>BIO：以流的方式处理数据，是同步阻塞的。在BIO模型中，数据的读取和写入必须阻塞在一个线程内等待其完成。当进行数据读写时，如果数据没有准备好，线程会被阻塞，直到操作完成‌。</li></ul></li><li>线程模型：<ul><li>NIO‌：使用选择器（Selector）来监听多个通道的事件（如连接请求、数据到达等），因此使用单个线程就可以监听多个客户端通道。这种模型降低了线程数量和资源消耗，提高了系统的并发性和资源利用率‌。</li><li>‌BIO‌：采用一个连接一个线程的模式。当客户端有连接请求时，服务器端需要启动一个线程进行处理。如果连接不做任何事情，会造成不必要的线程开销，对服务器资源要求较高，且并发性较差‌。</li></ul></li><li>内存消耗：<ul><li>NIO 中使用的缓冲区（Buffer）可以重复利用，减少了频繁的内存分配和回收，从而减少了内存的消耗。</li><li>BIO：每个客户端连接都需要单独分配一个缓冲区，容易造成内存的浪费。</li></ul></li></ol><h1 id="三、NIO-工作流程"><a href="#三、NIO-工作流程" class="headerlink" title="三、NIO 工作流程"></a>三、NIO 工作流程</h1><ol><li>创建 Selector：Selector 是 NIO 的核心组件之一，它可以同时监听多个通道上的 I&#x2F;O 事件，并且可以通过 select() 方法等待事件的发生。</li><li>注册 Channel：通过 Channel 的 register() 方法将 Channel 注册到 Selector 上，这样 Selector 就可以监听 Channel 上的 I&#x2F;O 事件。</li><li>等待事件：调用 Selector 的 select() 方法等待事件的发生，当有事件发生时，Selector 就会通知相应的线程进行处理。</li><li>处理事件：根据不同的事件类型，调用对应的处理逻辑。</li><li>关闭 Channel：当 Channel 不再需要使用时，需要调用 Channel 的 close() 方法关闭 Channel，同时也需要调用 Buffer 的 clear() 方法清空 Buffer 中的数据，以释放内存资源。</li></ol><p><strong>Java NIO 的工作流程可以简单概括为：通过 Selector 监听多个 Channel 上的 I&#x2F;O 事件，当事件发生时，通过对应的 Channel 进行读写操作，并在 Channel 不再需要使用时关闭 Channel。</strong></p><h1 id="四、NIO-核心的组件"><a href="#四、NIO-核心的组件" class="headerlink" title="四、NIO 核心的组件"></a>四、NIO 核心的组件</h1><h2 id="1-Channel-通道"><a href="#1-Channel-通道" class="headerlink" title="1. Channel(通道)"></a>1. Channel(通道)</h2><p>Channel 是应用程序与操作系统之间交互事件和传递内容的直接交互渠道，应用程序可以从管道中读取操作系统中接收到的数据，也可以向操作系统发送数据。Channel和传统IO中的Stream很相似，其主要区别为：通道是双向的，通过一个Channel既可以进行读，也可以进行写；而Stream只能进行单向操作，通过一个Stream只能进行读或者写，比如InputStream只能进行读取操作，OutputStream只能进行写操作。</p><h3 id="1-1-常用的Channel实现类"><a href="#1-1-常用的Channel实现类" class="headerlink" title="1.1 常用的Channel实现类"></a>1.1 常用的Channel实现类</h3><ol><li>FileChannel：本地文件IO通道，从文件中读写数据。一般流程为：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.获取文件通道，通过 FileChannel 的静态方法 open() 来获取，获取时需要指定文件路径和文件打开方式<br>FileChannel channel = FileChannel.open(Paths.get(fileName), StandardOpenOption.READ);<br><br>2.创建字节缓冲区<br>ByteBuffer buf = ByteBuffer.allocate(1024);<br><br>3.读/写操作<br>(1)、读操作<br>// 循环读取通道中的数据，并写入到 buf 中<br><span class="hljs-keyword">while</span> (channel.read(buf) != -1)&#123; <br>    // 缓存区切换到读模式<br>    buf.flip(); <br>    // 读取 buf 中的数据<br>    <span class="hljs-keyword">while</span> (buf.position() &lt; buf.limit())&#123; <br>    // 将buf中的数据追加到文件中<br>        text.append((char)buf.get());<br>    &#125;<br>    // 清空已经读取完成的 buffer，以便后续使用<br>    buf.clear();<br>&#125;<br>(2)、写操作<br>// 循环读取文件中的数据，并写入到 buf 中<br><span class="hljs-keyword">for</span> (int i = 0; i &lt; text.length(); i++) &#123;<br>    // 填充缓冲区，需要将 2 字节的 char 强转为 1 自己的 byte<br>    buf.put((byte)text.charAt(i)); <br>    // 缓存区已满或者已经遍历到最后一个字符<br>    <span class="hljs-keyword">if</span> (buf.position() == buf.limit() || i == text.length() - 1) &#123; <br>        // 将缓冲区由写模式置为读模式<br>        buf.flip(); <br>        // 将缓冲区的数据写到通道<br>        channel.write(buf); <br>        // 清空已经读取完成的 buffer，以便后续使用<br>        buf.clear(); <br>    &#125;<br>&#125;<br><br>4.将数据刷出到物理磁盘<br>channel.force(<span class="hljs-literal">false</span>);<br><br>5.关闭通道<br>channel.close();<br></code></pre></td></tr></table></figure><ol><li>SocketChannel：网络套接字IO通道，TCP协议，客户端通过 SocketChannel 与服务端建立TCP连接进行通信交互。与传统的Socket操作不同的是，SocketChannel基于非阻塞IO模式，可以在同一个线程内同时管理多个通信连接，从而提高系统的并发处理能力。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.打开一个 SocketChannel 通道<br>SocketChannel channel = SocketChannel.open();<br><br>2.连接到服务端<br>channel.connect(new InetSocketAddress(<span class="hljs-string">&quot;localhost&quot;</span>, 9001));<br><br>3.分配缓冲区<br>ByteBuffer buf = ByteBuffer.allocate(1024); <br><br>4.配置是否为阻塞方式（默认为阻塞方式）<br>channel.configureBlocking(<span class="hljs-literal">false</span>); // 配置通道为非阻塞模式<br><br>5.将channel的连接、读、写等事件注册到selector中，每个chanel只能注册一个事件，最后注册的一个生效,<br>同时注册多个事件可以使用<span class="hljs-string">&quot;|&quot;</span>操作符将常量连接起来<br>Selector selector = Selector.open();<br>channel.register(selector, SelectionKey.OP_CONNECT | SelectionKey.OP_WRITE | SelectionKey.OP_READ);<br><br>6.与服务端进行读写操作<br>channel.read(buf);<br>channel.write(buf);<br><br>7.关闭通道<br>channel.close();<br></code></pre></td></tr></table></figure><ol><li>ServerSocketChannel：网络套接字IO通道，TCP协议，服务端通过ServerSocketChannel监听来自客户端的连接请求，并创建相应的SocketChannel对象进行通信交互。ServerSocketChannel同样也是基于非阻塞IO模式，可以在同一个线程内同时管理多个通信连接，从而提高系统的并发处理能力。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.打开一个 ServerSocketChannel 通道<br>ServerSocketChannel serverChannel = ServerSocketChannel.open();<br><br>2.绑定本地端口<br>serverChannel.<span class="hljs-built_in">bind</span>(new InetSocketAddress(9001));<br><br>3.配置是否为阻塞方式（默认为阻塞方式）<br>serverChannel.configureBlocking(<span class="hljs-literal">false</span>); // 配置通道为非阻塞模式<br><br>4.分配缓冲区<br>ByteBuffer buf = ByteBuffer.allocate(1024); <br><br>5.将serverChannel 的连接、读、写等事件注册到selector中，每个chanel只能注册一个事件，最后注册的一个生效,<br>同时注册多个事件可以使用<span class="hljs-string">&quot;|&quot;</span>操作符将常量连接起来<br>Selector selector = Selector.open();<br>serverChannel.register(selector, SelectionKey.OP_ACCEPT| SelectionKey.OP_WRITE | SelectionKey.OP_READ);<br><br>6.与客服端进行读写操作<br>serverChannel.<span class="hljs-built_in">read</span>(buf);<br>serverChannel.write(buf);<br><br>7.关闭通道<br>serverChannel.close();<br></code></pre></td></tr></table></figure><ol><li>DatagramChannel：DatagramChannel是Java NIO中对UDP协议通信的封装。通过DatagramChannel对象，我们可以实现发送和接收UDP数据包。它与TCP协议不同的是，UDP协议没有连接的概念，所以无需像SocketChannel一样先建立连接再开始通信。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.打开一个 DatagramChannel 通道<br>DatagramChannel channel = DatagramChannel.open();<br><br>2.分配缓冲区<br>ByteBuffer buf = ByteBuffer.allocate(1024); <br><br>3.配置是否为阻塞方式（默认为阻塞方式）<br>channel.configureBlocking(<span class="hljs-literal">false</span>); // 配置通道为非阻塞模式<br><br>4.与客服端进行读写操作<br>buffer.flip();<br>// 发送消息给服务端<br>channel.send(buffer, new InetSocketAddress(<span class="hljs-string">&quot;localhost&quot;</span>, 9001));<br>buffer.clear();<br>// 接收服务端的响应信息<br>channel.receive(buffer);<br>buffer.flip();<br>// 打印出响应信息<br><span class="hljs-keyword">while</span> (buffer.hasRemaining()) &#123;<br>     System.out.print((char) buffer.get());<br>&#125;<br>buffer.clear();<br><br>7.关闭通道<br>channel.close();<br></code></pre></td></tr></table></figure><h3 id="1-2-常用的Channel方法"><a href="#1-2-常用的Channel方法" class="headerlink" title="1.2 常用的Channel方法"></a>1.2 常用的Channel方法</h3><ol><li>read(ByteBuffer)：从 Channel 中读取数据到 ByteBuffer 中。如果 Channel 中没有可读数据，则会阻塞等待直到有数据可读。</li><li>write(ByteBuffer)：将数据写入到 Channel 中。如果 Channel 中没有可写空间，则会阻塞等待直到有可写空间。</li><li>read(ByteBuffer, long)：从 Channel 中读取数据到 ByteBuffer 中，并设置读取超时时间。如果超时时间到了还没有读取到数据，则会抛出 TimeoutException 异常。</li><li>write(ByteBuffer, long)：将数据写入到 Channel 中，并设置写入超时时间。如果超时时间到了还没有写入完成，则会抛出 TimeoutException 异常。</li><li>flush()：将 Channel 中的缓冲区数据刷新到底层设备中，如果没有数据需要刷新，则会立即返回。</li><li>register(SelectionKey, int)：将 Channel 注册到 Selector 上，并设置注册的事件类型和操作。可以通过 Selector 监听 Channel 上的事件，当有事件发生时，Selector 就会通知相应的线程进行处理。</li><li>configureBlocking(boolean)：设置 Channel 是否为阻塞模式。如果为阻塞模式，则在读取或写入数据时会一直阻塞等待，直到有数据可读或写入完成；如果为非阻塞模式，则在读取或写入数据时会立即返回，如果没有数据可读或写入完成，则会返回 -1。</li><li>socket()：获取底层的 Socket 对象。</li><li>isConnected()：判断 Channel 是否已经连接到了远程主机。</li><li>isWritable()：判断 Channel 是否可以写入数据。</li><li>isReadable()：判断 Channel 是否可以读取数据。</li><li>isOpen()：检查 Channel 是否已经打开。</li><li>getRemoteAddress()：获取 Channel 对应的远程地址。</li><li>getLocalAddress()：获取 Channel 对应的本地地址。</li></ol><h2 id="2-Buffer-缓冲区"><a href="#2-Buffer-缓冲区" class="headerlink" title="2. Buffer(缓冲区)"></a>2. Buffer(缓冲区)</h2><p>NIO 中的数据都是通过 Buffer 对象来处理的，每个 Buffer 对象都关联着一个字节数组，可以保存多个相同类型的数据。在读取数据时，是从Buffer 中读取的，在写入数据时，也是写入到 Buffer 中的。<br><img src="/2020/05/24/NIO%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/14c346135010e1c529b8112b8005ebec.png" alt="在这里插入图片描述"></p><h3 id="2-1-Buffer-常用子类"><a href="#2-1-Buffer-常用子类" class="headerlink" title="2.1 Buffer 常用子类"></a>2.1 Buffer 常用子类</h3><ol><li>ByteBuffer：用于存储字节数据；</li><li>CharBuffer：用于存储字符数据；</li><li>ShortBuffer：用于存储Short类型数据；</li><li>IntBuffer：用于存储Int类型数据；</li><li>LongBuffer：用于存储Long类型数据；</li><li>FloatBuffer：用于存储Float类型数据；</li><li>DoubleBuffer：用于存储Double类型数据；</li></ol><h3 id="2-2-Buffer-重要属性"><a href="#2-2-Buffer-重要属性" class="headerlink" title="2.2 Buffer 重要属性"></a>2.2 Buffer 重要属性</h3><ol><li>capacity(容量)：表示 Buffer 所占的内存大小，capacity不能为负，并且创建后不能更改。</li><li>limit(限制)：表示 Buffer 中可以操作数据的大小，limit不能为负，并且不能大于其capacity。写模式下，表示最多能往 Buffer 里写多少数据，即 limit 等于 Buffer 的capacity。读模式下，表示你最多能读到多少数据，其实就是能读到之前写入的所有数据。</li><li>position(位置)：表示下一个要读取或写入的数据的索引。缓冲区的位置不能为负，并且不能大于其限制。初始的 position 值为 0，最大可为 capacity – 1。当一个 byte、long 等数据写到 Buffer 后， position 会向前移动到下一个可插入数据的 Buffer 单元。</li><li>mark(标记)：表示记录当前 position 的位置。可以通过 reset() 恢复到 mark 的位置。<br><img src="/2020/05/24/NIO%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/ea4a46a653d661c353b67c11d98722ba.png" alt="在这里插入图片描述"></li></ol><h3 id="2-3-Buffer-常见方法"><a href="#2-3-Buffer-常见方法" class="headerlink" title="2.3 Buffer 常见方法"></a>2.3 Buffer 常见方法</h3><ol><li>clear()：清空缓冲区并返回对缓冲区的引用；</li><li>flip()：将缓冲区的界限设置为当前位置，并将当前位置重置为 0；</li><li>capacity()：返回 Buffer 的 capacity 大小；</li><li>limit()：返回 Buffer 的界限(limit) 的位置；</li><li>limit(int n)：将设置缓冲区界限为 n，并返回一个具有新 limit 的缓冲区对象；</li><li>position()：返回缓冲区的当前位置 position；</li><li>position(int n)：将设置缓冲区的当前位置为 n， 并返回修改后的 Buffer 对象；</li><li>mark()：对缓冲区设置标记；</li><li>reset()：将位置 position 转到以前设置的mark 所在的位置；</li><li>rewind()：将位置设为为 0， 取消设置的 mark；</li><li>hasRemaining()：判断缓冲区中是否还有元素；</li><li>get()：读取单个字节；</li><li>get(byte[] dst)：读取多个字节；</li><li>get(int index)：读取指定索引位置的字节；</li><li>put(byte b)：将给定单个字节写入缓冲区的当前位置；</li><li>put(byte[] src)：将数组中的字节从当前位置依次写入到缓冲区中；</li><li>put(int index, byte b)：将指定字节写入缓冲区的索引位置；</li></ol><h3 id="2-4-Buffer-内存分配"><a href="#2-4-Buffer-内存分配" class="headerlink" title="2.4 Buffer 内存分配"></a>2.4 Buffer 内存分配</h3><ol><li>普通缓冲区：通过allocate()方法进行分配，可以在jvm堆上申请堆上内存。如果要作IO操作，会先从本进程的堆上内存复制到直接内存，再利用本地IO处理。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ByteBuffer readBuffer = ByteBuffer.allocate(1024);<br></code></pre></td></tr></table></figure><ol><li>直接缓冲区：通过allocateDirect()方法进行分配，直接从本地内存中申请。如果要作IO操作，直接从本地内存中利用本地IO处理。使用直接内存会具有更高的效率，但是它比申请普通的堆内存需要耗费更高的性能。直接内存中的数据是在JVM之外的，因此它不会占用应用的内存，当有很大的数据要缓存，并且它的生命周期又很长，那么就比较适合使用直接内存。一般来说，如果不是能带来很明显的性能提升，还是推荐使用堆内存。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ByteBuffer directByteBuffer = ByteBuffer.allocateDirect(1024);<br></code></pre></td></tr></table></figure><ol><li>缓冲区分片：通过slice()方法可以根据现有的缓冲区对象来创建一个子缓冲区，即在现有缓冲区上切出一片来作为一个新的缓冲区，但现有的缓冲区与创建的子缓冲区在底层数组层面上是数据共享的。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ByteBuffer readBuffer = ByteBuffer.allocate(1024);<br>ByteBuffer sliceBuffer = readBuffer.slice();<br></code></pre></td></tr></table></figure><ol><li>只读缓冲区：通过asReadOnlyBuffer()方法可以将任何常规缓冲区转换为只读缓冲区，这个方法返回 一个与原缓冲区完全相同的缓冲区，并与原缓冲区共享数据，只不过它是只读的。如果原缓冲区的内容发生了变化，只读缓冲区的内容也随之发生变化。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ByteBuffer readBuffer = ByteBuffer.allocate(1024);<br>ByteBuffer readonlyBuffer = readBuffer.asReadOnlyBuffer();<br></code></pre></td></tr></table></figure><h2 id="3-Selector-选择器"><a href="#3-Selector-选择器" class="headerlink" title="3. Selector(选择器)"></a>3. Selector(选择器)</h2><p>Selector 提供了选择已经就绪的任务的能力，Selector会不断的轮询注册在上面的所有channel，进行后续的IO操作。只需通过一个单独的线程就可以管理多个channel，从而管理多个网络连接。这就是Nio与传统I&#x2F;O最大的区别，不用为每个连接都去创建一个线程。<br><img src="/2020/05/24/NIO%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/a095ecea2f1a724572567ab738334752.png" alt="在这里插入图片描述"></p><h3 id="3-1-Selector使用流程"><a href="#3-1-Selector使用流程" class="headerlink" title="3.1 Selector使用流程"></a>3.1 Selector使用流程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.获取选择器<br>Selector selector = Selector.open();<br><br>2.通道注册到选择器，进行监听<br>serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);<br><br>3.获取可操作的 Channel<br>selector.select();<br><br>4.获取可操作的 Channel 中的就绪事件集合<br>Set&lt;SelectionKey&gt; keys = selector.selectedKeys();<br><br>5.处理就绪事件<br><span class="hljs-keyword">while</span> (keys.iterator().hasNext())&#123;<br>SelectionKey key = keys.iterator().next();<br><span class="hljs-keyword">if</span> (!key.isValid())&#123;<br><span class="hljs-built_in">continue</span>;<br>&#125;<br>    <span class="hljs-keyword">if</span> (key.isAcceptable())&#123;<br>accept(key);<br>&#125;<br><span class="hljs-keyword">if</span>(key.isReadable())&#123;<br><span class="hljs-built_in">read</span>(key);<br>&#125;<br><span class="hljs-keyword">if</span> (key.isWritable())&#123;<br>write(key);<br>&#125;<br>keyIterator.remove(); //移除当前的key<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-SelectionKey事件类型"><a href="#3-2-SelectionKey事件类型" class="headerlink" title="3.2 SelectionKey事件类型"></a>3.2 SelectionKey事件类型</h3><p>每个 Channel向Selector 注册时，都会创建一个 SelectionKey 对象，通过 SelectionKey 对象向Selector 注册，且 SelectionKey 中维护了 Channel 的事件。常见的四种事件如下：</p><ol><li>OP_READ：当操作系统读缓冲区有数据可读时就绪。</li><li>OP_WRITE：当操作系统写缓冲区有空闲空间时就绪。</li><li>OP_CONNECT：当 SocketChannel.connect()请求连接成功后就绪，该操作只给客户端使用。</li><li>OP_ACCEPT：当接收到一个客户端连接请求时就绪，该操作只给服务器使用。</li></ol><h1 id="五、简单实例"><a href="#五、简单实例" class="headerlink" title="五、简单实例"></a>五、简单实例</h1><h2 id="1-服务端"><a href="#1-服务端" class="headerlink" title="1.服务端"></a>1.服务端</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs bash">import java.io.IOException;<br>import java.net.InetSocketAddress;<br>import java.nio.ByteBuffer;<br>import java.nio.channels.*;<br>import java.util.Iterator;<br>import java.util.Set;<br><br>public class NioServiceTest &#123;<br>    private Selector selector;<br>    private ServerSocketChannel serverSocketChannel;<br>    private ByteBuffer readBuffer = ByteBuffer.allocate(1024);//调整缓冲区大小为1024字节<br>    private ByteBuffer sendBuffer = ByteBuffer.allocate(1024);<br>    String str;<br><br>    public NioServiceTest(int port) throws IOException &#123;<br>        // 打开服务器套接字通道<br>        this.serverSocketChannel = ServerSocketChannel.open();<br>        // 服务器配置为非阻塞 即异步IO<br>        this.serverSocketChannel.configureBlocking(<span class="hljs-literal">false</span>);<br>        // 绑定本地端口<br>        this.serverSocketChannel.<span class="hljs-built_in">bind</span>(new InetSocketAddress(port));<br>        // 创建选择器<br>        this.selector = Selector.open();<br>        // 注册接收连接事件<br>        this.serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);<br>    &#125;<br><br>    public void handle() throws IOException &#123;<br>        // 无限判断当前线程状态，如果没有中断，就一直执行<span class="hljs-keyword">while</span>内容。<br>        <span class="hljs-keyword">while</span>(!Thread.currentThread().isInterrupted())&#123;<br>            // 获取准备就绪的channel<br>            <span class="hljs-keyword">if</span> (selector.select() == 0) &#123;<br>                <span class="hljs-built_in">continue</span>;<br>            &#125;<br><br>            // 获取到对应的 SelectionKey 对象<br>            Set&lt;SelectionKey&gt; keys = selector.selectedKeys();<br>            Iterator&lt;SelectionKey&gt; keyIterator = keys.iterator();<br>            // 遍历所有的 SelectionKey 对象<br>            <span class="hljs-keyword">while</span> (keyIterator.hasNext())&#123;<br>                // 根据不同的SelectionKey事件类型进行相应的处理<br>                SelectionKey key = keyIterator.next();<br>                <span class="hljs-keyword">if</span> (!key.isValid())&#123;<br>                    <span class="hljs-built_in">continue</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (key.isAcceptable())&#123;<br>                    accept(key);<br>                &#125;<br>                <span class="hljs-keyword">if</span>(key.isReadable())&#123;<br>                    <span class="hljs-built_in">read</span>(key);<br>                &#125;<br>                // 移除当前的key<br>                keyIterator.remove();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    /**<br>     * 客服端连接事件处理<br>     *<br>     * @param key<br>     * @throws IOException<br>     */<br>    private void accept(SelectionKey key) throws IOException &#123;<br>        SocketChannel socketChannel = this.serverSocketChannel.accept();<br>        socketChannel.configureBlocking(<span class="hljs-literal">false</span>);<br>        // 注册客户端读取事件到selector<br>        socketChannel.register(selector, SelectionKey.OP_READ);<br>        System.out.println(<span class="hljs-string">&quot;client connected &quot;</span> + socketChannel.getRemoteAddress());<br>    &#125;<br><br>    /**<br>     * 读取事件处理<br>     *<br>     * @param key<br>     * @throws IOException<br>     */<br>    private void <span class="hljs-built_in">read</span>(SelectionKey key) throws IOException&#123;<br>        SocketChannel socketChannel = (SocketChannel) key.channel();<br>        //清除缓冲区，准备接受新数据<br>        this.readBuffer.clear();<br>        int numRead;<br>        try&#123;<br>            // 从 channel 中读取数据<br>            numRead = socketChannel.<span class="hljs-built_in">read</span>(this.readBuffer);<br>        &#125;catch (IOException e)&#123;<br>            System.out.println(<span class="hljs-string">&quot;read failed&quot;</span>);<br>            key.cancel();<br>            socketChannel.close();<br>            <span class="hljs-built_in">return</span>;<br>        &#125;<br>        str = new String(readBuffer.array(),0,numRead);<br>        System.out.println(<span class="hljs-string">&quot;read String is: &quot;</span> + str);<br>    &#125;<br><br>    public static void main(String[] args) throws Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;sever start...&quot;</span>);<br>        new NioServiceTest(8000).handle();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-客户端"><a href="#2-客户端" class="headerlink" title="2. 客户端"></a>2. 客户端</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs bash">import java.io.IOException;<br>import java.net.InetSocketAddress;<br>import java.nio.ByteBuffer;<br>import java.nio.channels.SelectionKey;<br>import java.nio.channels.Selector;<br>import java.nio.channels.SocketChannel;<br>import java.util.Iterator;<br>import java.util.Scanner;<br>import java.util.Set;<br><br>public class NioClientTest &#123;<br>    ByteBuffer writeBuffer = ByteBuffer.allocate(1024);<br>    private SocketChannel sc;<br>    private Selector selector;<br><br>    public NioClientTest(String hostname, int port) throws IOException &#123;<br>        // 打开socket通道<br>        sc = SocketChannel.open();<br>        // 配置为非阻塞 即异步IO<br>        sc.configureBlocking(<span class="hljs-literal">false</span>);<br>        // 连接服务器端<br>        sc.connect(new InetSocketAddress(hostname,port));<br>        // 创建选择器<br>        selector = Selector.open();<br>        // 注册请求连接事件<br>        sc.register(selector, SelectionKey.OP_CONNECT);<br>    &#125;<br><br>    public void send() throws IOException&#123;<br>        Scanner scanner = new Scanner(System.<span class="hljs-keyword">in</span>);<br>        // 无限判断当前线程状态，如果没有中断，就一直执行<span class="hljs-keyword">while</span>内容。<br>        <span class="hljs-keyword">while</span> (!Thread.currentThread().isInterrupted())&#123;<br>            // 获取准备就绪的channel<br>            <span class="hljs-keyword">if</span> (selector.select() == 0) &#123;<br>                <span class="hljs-built_in">continue</span>;<br>            &#125;<br><br>            // 获取到对应的 SelectionKey 对象<br>            Set&lt;SelectionKey&gt; keys = selector.selectedKeys();<br>            System.out.println(<span class="hljs-string">&quot;all keys is:&quot;</span>+keys.size());<br>            Iterator&lt;SelectionKey&gt; iterator = keys.iterator();<br>            // 遍历所有的 SelectionKey 对象<br>            <span class="hljs-keyword">while</span> (iterator.hasNext())&#123;<br>                SelectionKey key = iterator.next();<br>                //判断此通道上是否在进行连接操作<br>                <span class="hljs-keyword">if</span> (key.isConnectable())&#123;<br>                    sc.finishConnect();<br>                    //注册写操作<br>                    sc.register(selector, SelectionKey.OP_WRITE);<br>                    System.out.println(<span class="hljs-string">&quot;server connected...&quot;</span>);<br>                    <span class="hljs-built_in">break</span>;<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key.isWritable())&#123;<br>                    System.out.println(<span class="hljs-string">&quot;please input message:&quot;</span>);<br>                    String message = scanner.nextLine();<br>                    writeBuffer.clear();<br>                    writeBuffer.put(message.getBytes());<br>                    //将缓冲区各标志复位,因为向里面put了数据标志被改变要想从中读取数据发向服务器,就要复位<br>                    writeBuffer.flip();<br>                    sc.write(writeBuffer);<br>                &#125;<br>                // 移除当前的key<br>                iterator.remove();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    public static void main(String[] args) throws Exception &#123;<br>        new NioClientTest(<span class="hljs-string">&quot;localhost&quot;</span>, 8000).send();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>IO</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>IO</tag>
      
      <tag>NIO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL详解</title>
    <link href="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/"/>
    <url>/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="一、SQL简述"><a href="#一、SQL简述" class="headerlink" title="一、SQL简述"></a>一、SQL简述</h2><h3 id="1-SQL的概述"><a href="#1-SQL的概述" class="headerlink" title="1.SQL的概述"></a>1.SQL的概述</h3><p>Structure Query Language(结构化查询语言)简称SQL，它被美国国家标准局(ANSI)确定为关系型数据库语言的美国标准，后被国际化标准组织(ISO)采纳为关系数据库语言的国际标准。数据库管理系统可以通过SQL管理数据库；定义和操作数据，维护数据的完整性和安全性。</p><h3 id="2-SQL的优点"><a href="#2-SQL的优点" class="headerlink" title="2.SQL的优点"></a>2.SQL的优点</h3><p>1、简单易学，具有很强的操作性<br>2、绝大多数重要的数据库管理系统均支持SQL<br>3、高度非过程化；用<a href="https://so.csdn.net/so/search?q=SQL%E6%93%8D%E4%BD%9C&spm=1001.2101.3001.7020">SQL操作</a>数据库时大部分的工作由DBMS自动完成</p><h3 id="3-SQL的分类"><a href="#3-SQL的分类" class="headerlink" title="3.SQL的分类"></a>3.SQL的分类</h3><p>1、DDL(Data Definition Language) 数据定义语言，用来操作数据库、表、列等； 常用语句：CREATE、 ALTER、DROP<br>2、DML(Data Manipulation Language) 数据操作语言，用来操作数据库中表里的数据；常用语句：INSERT、 UPDATE、 DELETE<br>3、DCL(Data Control Language) 数据控制语言，用来操作访问权限和安全级别； 常用语句：GRANT、DENY<br>4、DQL(Data Query Language) <a href="https://so.csdn.net/so/search?q=%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80&spm=1001.2101.3001.7020">数据查询语言</a>，用来查询数据 常用语句：SELECT</p><h2 id="二、数据库的三大范式"><a href="#二、数据库的三大范式" class="headerlink" title="二、数据库的三大范式"></a>二、数据库的三大范式</h2><p>1、第一范式(1NF)是指数据库表的每一列都是不可分割的基本数据线；也就是说：每列的值具有原子性，不可再分割。<br>2、第二范式(2NF)是在第一范式(1NF)的基础上建立起来得，满足第二范式(2NF)必须先满足第一范式(1NF)。如果表是单主键，那么主键以外的列必须完全依赖于主键；如果表是复合主键，那么主键以外的列必须完全依赖于主键，不能仅依赖主键的一部分。<br>3、第三范式(3NF)是在第二范式的基础上建立起来的，即满足第三范式必须要先满足第二范式。第三范式(3NF)要求：表中的非主键列必须和主键直接相关而不能间接相关；也就是说：非主键列之间不能相关依赖。</p><h2 id="三、数据库的数据类型"><a href="#三、数据库的数据类型" class="headerlink" title="三、数据库的数据类型"></a>三、数据库的数据类型</h2><p>使用MySQL数据库存储数据时，不同的数据类型决定了 MySQL存储数据方式的不同。为此，MySQL数据库提供了多种数据类型，其中包括整数类型、浮点数类型、定点 数类型、日期和时间类型、字符串类型、二进制…等等数据类型。</p><h3 id="1-整数类型"><a href="#1-整数类型" class="headerlink" title="1.整数类型"></a>1.整数类型</h3><p>根据数值取值范围的不同MySQL 中的整数类型可分为5种，分别是TINYINT、SMALUNT、MEDIUMINT、INT和 BIGINT。下图列举了 MySQL不同整数类型所对应的字节大小和取值范围而最常用的为INT类型的，</p><table><thead><tr><th>数据类型</th><th>字节数</th><th>无符号数的取值范围</th><th>有符号数的取值范围</th></tr></thead><tbody><tr><td>TINYINT</td><td>1</td><td>0~255</td><td>-128~127</td></tr><tr><td>SMALLINT</td><td>2</td><td>0~65535</td><td>-32768~32768</td></tr><tr><td>MEDIUMINT</td><td>3</td><td>0~16777215</td><td>-8388608~8388608</td></tr><tr><td>INT</td><td>4</td><td>0~4294967295</td><td>-2147483648~ 2147483648</td></tr><tr><td>BIGINT</td><td>8</td><td>0~18446744073709551615</td><td>-9223372036854775808~9223372036854775808</td></tr></tbody></table><h3 id="2-浮点数类型和定点数类型"><a href="#2-浮点数类型和定点数类型" class="headerlink" title="2.浮点数类型和定点数类型"></a>2.浮点数类型和定点数类型</h3><p>在MySQL数据库中使用浮点数和定点数来存储小数。浮点数的类型有两种：单精度浮点数类型（FLOAT)和双精度浮点数类型（DOUBLE)。而定点数类型只有一种即DECIMAL类型。下图列举了 MySQL中浮点数和定点数类型所对应的字节大小及其取值范围：</p><table><thead><tr><th>数据类型</th><th>字节数</th><th>有符号的取值范围</th><th>无符号的取值范围</th></tr></thead><tbody><tr><td>FLOAT</td><td>4</td><td>-3.402823466E+38~-1.175494351E-38</td><td>0和1.175494351E-38~3.402823466E+38</td></tr><tr><td>DOUBLE</td><td>8</td><td>-1.7976931348623157E+308~2.2250738585072014E-308</td><td>0和2.2250738585072014E-308~1.7976931348623157E+308</td></tr><tr><td>DECIMAL（M,D）</td><td>M+2</td><td>-1.7976931348623157E+308~2.2250738585072014E-308</td><td>0和2.2250738585072014E-308~1.7976931348623157E+308</td></tr><tr><td>从上图中可以看出：DECIMAL类型的取值范围与DOUBLE类型相同。但是，请注意：DECIMAL类型的有效取值范围是由M和D决定的。其中，M表示的是数据的长 度，D表示的是小数点后的长度。比如，将数据类型为DECIMAL(6,2)的数据6.5243 插入数据库后显示的结果为6.52</td><td></td><td></td><td></td></tr></tbody></table><h3 id="3-字符串类型"><a href="#3-字符串类型" class="headerlink" title="3.字符串类型"></a>3.字符串类型</h3><p>在MySQL中常用CHAR 和 VARCHAR 表示字符串。两者不同的是：VARCHAR存储可变长度的字符串。<br><strong>当数据为CHAR(M)类型时，不管插入值的长度是实际是多少它所占用的存储空间都是M个字节；而VARCHAR(M)所对应的数据所占用的字节数为实际长度加1</strong></p><table><thead><tr><th>插入值</th><th>CHAR(3)</th><th>存储需求</th><th>VARCHAR(3)</th><th>存储需求</th></tr></thead><tbody><tr><td>‘’</td><td>‘’</td><td>3个字节</td><td>‘’</td><td>1个字节</td></tr><tr><td>‘a’</td><td>‘a’</td><td>3个字节</td><td>‘a’</td><td>2个字节</td></tr><tr><td>‘ab’</td><td>‘ab’</td><td>3个字节</td><td>‘ab’</td><td>3个字节</td></tr><tr><td>‘abc’</td><td>‘ab’</td><td>3个字节</td><td>‘abc’</td><td>4个字节</td></tr><tr><td>‘abcd’</td><td>‘ab’</td><td>3个字节</td><td>‘abc’</td><td>4字节</td></tr></tbody></table><h3 id="4-字符串类型"><a href="#4-字符串类型" class="headerlink" title="4.字符串类型"></a>4.字符串类型</h3><p>文本类型用于表示大文本数据，例如，文章内容、评论、详情等，它的类型分为如下4种：</p><table><thead><tr><th>数据类型</th><th>储存范围</th></tr></thead><tbody><tr><td>TINYTEXT</td><td>0~255字节</td></tr><tr><td>TEXT</td><td>0~65535字节</td></tr><tr><td>MEDIUMTEXT</td><td>0~16777215字节</td></tr><tr><td>LONGTEXT</td><td>0~4294967295字节</td></tr></tbody></table><h3 id="5-日期与时间类型"><a href="#5-日期与时间类型" class="headerlink" title="5.日期与时间类型"></a>5.日期与时间类型</h3><p>MySQL提供的表示日期和时间的数据类型分别是 ：YEAR、DATE、TIME、DATETIME 和 TIMESTAMP。下图列举了日期和时间数据类型所对应的字节数、取值范围、日期格式以及零值：</p><table><thead><tr><th>数据类型</th><th>字节数</th><th>取值范围</th><th>日期格式</th><th>零值</th></tr></thead><tbody><tr><td>YEAR</td><td>1</td><td>1901~2155</td><td>YYYY</td><td>0000</td></tr><tr><td>DATE</td><td>4</td><td>1000-01-01~9999-12-31</td><td>YYYY-MM-DD</td><td>0000-00-00</td></tr><tr><td>TIME</td><td>3</td><td>-838：59：59~ 838：59：59</td><td>HH:MM:SS</td><td>00:00:00</td></tr><tr><td>DATETIME</td><td>8</td><td>1000-01-01 00:00:00~9999-12-31 23:59:59</td><td>YYYY-MM-DD HH:MM:SS</td><td>0000-00-00 00:00:00</td></tr><tr><td>TIMESTAMP</td><td>4</td><td>1970-01-01 00:00:01~2038-01-19 03:14:07</td><td>YYYY-MM-DD HH:MM:SS</td><td>0000-00-00 00:00:00</td></tr></tbody></table><h4 id="5-1-YEAR类型"><a href="#5-1-YEAR类型" class="headerlink" title="5.1 YEAR类型"></a>5.1 YEAR类型</h4><p>YEAR类型用于表示年份，在MySQL中，可以使用以下三种格式指定YEAR类型 的值。<br>1、使用4位字符串或数字表示，范围为’1901’—‘2155’或1901—2155。例如，输入 ‘2019’或2019插入到数据库中的值均为2019。<br>2、使用两位字符串表示，范围为’00’—‘99’。其中，‘00’—‘69’范围的值会被转换为 2000—2069范围的YEAR值，‘70’—‘99’范围的值会被转换为1970—1999范围的YEAR 值。例如，输入’19’插入到数据库中的值为2019。<br>3、使用两位数字表示，范围为1—99。其中，1—69范围的值会被转换为2001— 2069范围的YEAR值，70—99范围的值会被转换为1970—1999范围的YEAR值。例 如，输入19插入到数据库中的值为2019。<br><strong>请注意：当使用YEAR类型时，一定要区分’0’和0。因为字符串格式的’0’表示的YEAR值是2000而数字格式的0表示的YEAR值是0000。</strong></p><h4 id="5-2-TIME类型"><a href="#5-2-TIME类型" class="headerlink" title="5.2 TIME类型"></a>5.2 TIME类型</h4><p>TIME类型用于表示时间值，它的显示形式一般为HH:MM:SS，其中，HH表示小时， MM表示分,SS表示秒。在MySQL中，可以使用以下3种格式指定TIME类型的值。<br>1、以’D HH:MM:SS’字符串格式表示。其中，D表示日可取0—34之间的值, 插入数据时，小时的值等于(DX24+HH)。例如，输入’2 11:30:50’插入数据库中的日期为59:30:50。<br>2、以’HHMMSS’字符串格式或者HHMMSS数字格式表示。 例如，输入’115454’或115454,插入数据库中的日期为11:54:54<br>3、使用CURRENT_TIME或NOW()输入当前系统时间。</p><h4 id="5-3-DATETIME类型"><a href="#5-3-DATETIME类型" class="headerlink" title="5.3 DATETIME类型"></a>5.3 DATETIME类型</h4><p>DATETIME类型用于表示日期和时间，它的显示形式为’YYYY-MM-DD HH: MM:SS’，其中，YYYY表示年，MM表示月，DD表示日，HH表示小时，MM表示分，SS 表示秒。在MySQL中，可以使用以下4种格式指定DATETIME类型的值。<br>以’YYYY-MM-DD HH:MM:SS’或者’YYYYMMDDHHMMSS’字符串格式表示的日期和时间，取值范围为’1000-01-01 00:00:00’—‘9999-12-3 23:59:59’。例如，输入’2019-01-22 09:01:23’或 ‘20140122_0_90123’插入数据库中的 DATETIME 值都为 2019-01-22 09:01:23。<br>1、以’YY-MM-DD HH:MM:SS’或者’YYMMDDHHMMSS’字符串格式表示的日期和时间，其中YY表示年，取值范围为’00’—‘99’。与DATE类型中的YY相同，‘00’— ‘69’范围的值会被转换为2000—2069范围的值，‘70’—‘99’范围的值会被转换为1970—1999范围的值。<br>2、以YYYYMMDDHHMMSS或者YYMMDDHHMMSS数字格式表示的日期 和时间。例如，插入20190122090123或者190122090123,插入数据库中的DATETIME值都 为 2019-01-22 09:01:23。<br>3、使用NOW来输入当前系统的日期和时间。</p><h4 id="5-4-TIMESTAMP类型"><a href="#5-4-TIMESTAMP类型" class="headerlink" title="5.4 TIMESTAMP类型"></a>5.4 TIMESTAMP类型</h4><p>TIMESTAMP类型用于表示日期和时间，它的显示形式与DATETIME相同但取值范围比DATETIME小。在此，介绍几种TIMESTAMP类型与DATATIME类型不同的形式：<br>1、使用CURRENT_TIMESTAMP输入系统当前日期和时间。<br>2、输入NULL时系统会输入系统当前日期和时间。<br>3、无任何输入时系统会输入系统当前日期和时间。</p><h3 id="6-二进制类型"><a href="#6-二进制类型" class="headerlink" title="6.二进制类型"></a>6.二进制类型</h3><p>在MySQL中常用BLOB存储二进制类型的数据，例如：图片、PDF文档等。BLOB类型分为如下四种：</p><table><thead><tr><th>数据类型</th><th>储存范围</th></tr></thead><tbody><tr><td>TINYBLOB</td><td>0~255字节</td></tr><tr><td>BLOB</td><td>0~65535字节</td></tr><tr><td>MEDIUMBLOB</td><td>0~16777215字节</td></tr><tr><td>LONGBLOB</td><td>0~4294967295字节</td></tr></tbody></table><h2 id="四、数据库、数据表的基本操作"><a href="#四、数据库、数据表的基本操作" class="headerlink" title="四、数据库、数据表的基本操作"></a>四、数据库、数据表的基本操作</h2><h3 id="1-数据库的基本操作"><a href="#1-数据库的基本操作" class="headerlink" title="1.数据库的基本操作"></a>1.数据库的基本操作</h3><p>MySQL安装完成后，要想将数据存储到数据库的表中，首先要创建一个数据库。创 建数据库就是在数据库系统中划分一块空间存储数据，语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> database 数据库名称;<br></code></pre></td></tr></table></figure><p>创建一个叫db1的数据库MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建一个叫db1的数据库</span><br><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> database db1;<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/74ca292cdfe2d9552423ce733d2bb760.png" alt="在这里插入图片描述"><br>创建数据库后查看该数据库基本信息MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> database db1;<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/cd3ad9ecaec8e4bb88d4df97f8450659.png" alt="在这里插入图片描述"><br>删除数据库MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> database db1;<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/328bb56dfc4b92d59516743a1499c545.png" alt="在这里插入图片描述"><br>查询出MySQL中所有的数据库MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> databases;<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/426e52a4b3d2b669942ab4bc7dd93c16.png" alt="在这里插入图片描述"><br>将数据库的字符集修改为gbk MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> database db1 <span class="hljs-keyword">character set</span> gbk;<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/0a831e0deff690dd10c4679d1210695f.png" alt="在这里插入图片描述"><br>切换数据库 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">use db1;<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/de3ce61b1d603804a6d3692155e76377.png" alt="在这里插入图片描述"><br>查看当前使用的数据库 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> database();<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/1465a2c6001bd8b915f384e3183fda3b.png" alt="在这里插入图片描述"></p><h3 id="2-数据表的基本操作"><a href="#2-数据表的基本操作" class="headerlink" title="2.数据表的基本操作"></a>2.数据表的基本操作</h3><p>数据库创建成功后可在该数据库中创建数据表(简称为表)存储数据。请注意：在操作数据表之前应使用“USE 数据库名;”指定操作是在哪个数据库中进行先关操作，否则会抛出“No database selected”错误。<br>语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"> <span class="hljs-keyword">create table</span> 表名(<br>         字段<span class="hljs-number">1</span> 字段类型,<br>         字段<span class="hljs-number">2</span> 字段类型,<br>         …<br>         字段n 字段类型<br>);<br></code></pre></td></tr></table></figure><h4 id="2-1-创建数据表"><a href="#2-1-创建数据表" class="headerlink" title="2.1 创建数据表"></a>2.1 创建数据表</h4><p>示例：创建学生表 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create table</span> student(<br>id <span class="hljs-type">int</span>,<br>name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>gender <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),<br>birthday <span class="hljs-type">date</span><br>);<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/0f744f3ca11c4cd7ec3371491cef43ce.png" alt="在这里插入图片描述"></p><h4 id="2-2-查看数据表"><a href="#2-2-查看数据表" class="headerlink" title="2.2 查看数据表"></a>2.2 查看数据表</h4><p>示例：查看当前数据库中所有表 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> tables;<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/cb9c5e4b27ad3d724da7b511596eae9d.png" alt="在这里插入图片描述"><br>示例：查表的基本信息 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">create table</span> student;<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/eb086239098e5d08ad1345f92fb65706.png" alt="在这里插入图片描述"><br>示例：查看表的字段信息 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">desc</span> student;<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/dff835f260b1939e71d25e77229b08cb.png" alt="在这里插入图片描述"></p><h4 id="2-3-修改数据表"><a href="#2-3-修改数据表" class="headerlink" title="2.3 修改数据表"></a>2.3 修改数据表</h4><p>有时，希望对表中的某些信息进行修改，例如：修改表名、修改字段名、修改字段 数据类型…等等。在MySQL中使用alter table修改数据表.<br>示例：修改表名 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter table</span> student rename <span class="hljs-keyword">to</span> stu;<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/866b116cc5ed622315a991f65cdb4eb9.png" alt="在这里插入图片描述"><br>示例：修改字段名 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter table</span> stu change name sname <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>);<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/4b10a674fb667bd63ebd821ca9ed2b6b.png" alt="在这里插入图片描述"><br>示例：修改字段数据类型 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter table</span> stu modify sname <span class="hljs-type">int</span>;<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/eb1830d7b98fff9a72a941482ce34fb2.png" alt="在这里插入图片描述"><br>示例：增加字段 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter table</span> stu <span class="hljs-keyword">add</span> address <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>);<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/0b4db2d98f40df12394ab06df9d6aedd.png" alt="在这里插入图片描述"><br>示例：删除字段 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter table</span> stu <span class="hljs-keyword">drop</span> address;<br></code></pre></td></tr></table></figure><p>运行效果展示：</p><p><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/3bcd42d3ce0063b5eef081b01715c490.png" alt="在这里插入图片描述"></p><h4 id="2-4-删除数据表"><a href="#2-4-删除数据表" class="headerlink" title="2.4 删除数据表"></a>2.4 删除数据表</h4><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> 表名;<br></code></pre></td></tr></table></figure><p>示例：删除数据表 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> stu;<br></code></pre></td></tr></table></figure><p>运行效果展示：</p><p><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/63e1dc043bc1479faf1a94ba3e1c6188.png" alt="在这里插入图片描述"></p><h2 id="五、数据表的约束"><a href="#五、数据表的约束" class="headerlink" title="五、数据表的约束"></a>五、数据表的约束</h2><p>为防止错误的数据被插入到数据表，MySQL中定义了一些维护数据库完整性的规则；这些规则常称为表的约束。常见约束如下：</p><table><thead><tr><th>约束条件</th><th>说明</th></tr></thead><tbody><tr><td>PRIMARY KEY</td><td>主键约束用于唯一标识对应的记录</td></tr><tr><td>FOREIGN KEY</td><td>外键约束</td></tr><tr><td>NOT NULL</td><td>非空约束</td></tr><tr><td>UNIQUE</td><td>唯一性约束</td></tr><tr><td>DEFAULT</td><td>默认值约束，用于设置字段的默认值</td></tr><tr><td>以上五种约束条件针对表中字段进行限制从而保证数据表中数据的正确性和唯一性。换句话说，表的约束实际上就是表中数据的限制条件。</td><td></td></tr></tbody></table><h3 id="1-主键约束"><a href="#1-主键约束" class="headerlink" title="1.主键约束"></a>1.主键约束</h3><p>主键约束即primary key用于唯一的标识表中的每一行。被标识为主键的数据在表中是唯一的且其值不能为空。这点类似于我们每个人都有一个身份证号，并且这个身份证号是唯一的。<br>主键约束基本语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">字段名 数据类型 <span class="hljs-keyword">primary key</span>;<br></code></pre></td></tr></table></figure><p><strong>设置主键约束(primary key)的第一种方式</strong><br>示例：MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create table</span> student(<br>id <span class="hljs-type">int</span> <span class="hljs-keyword">primary key</span>,<br>name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>)<br>);<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/7a286321f9a4bf20af250695ac2493ee.png" alt="在这里插入图片描述"><br><strong>设置主键约束(primary key)的第二·种方式</strong><br>示例：MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create table</span> student01(<br>id <span class="hljs-type">int</span><br>name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br><span class="hljs-keyword">primary key</span>(id)<br>);<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/fa32511df33a2923cb22e460e13de4f5.png" alt="在这里插入图片描述"></p><h3 id="2-非空约束"><a href="#2-非空约束" class="headerlink" title="2.非空约束"></a>2.非空约束</h3><p>非空约束即 NOT NULL指的是字段的值不能为空，基本的语法格式如下所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">字段名 数据类型 <span class="hljs-keyword">NOT NULL</span>;<br></code></pre></td></tr></table></figure><p>示例：MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create table</span> student02(<br>id <span class="hljs-type">int</span><br>name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not null</span><br>);<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/9b46312e38de474c388d3c02510db906.png" alt="在这里插入图片描述"></p><h3 id="3-默认值约束"><a href="#3-默认值约束" class="headerlink" title="3.默认值约束"></a>3.默认值约束</h3><p>默认值约束即DEFAULT用于给数据表中的字段指定默认值，即当在表中插入一条新记录时若未给该字段赋值，那么，数据库系统会自动为这个字段插入默认值；其基本的语法格式如下所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">字段名 数据类型 <span class="hljs-keyword">DEFAULT</span> 默认值；<br></code></pre></td></tr></table></figure><p>示例：MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create table</span> student03(<br>id <span class="hljs-type">int</span>,<br>name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>gender <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;male&#x27;</span><br>);<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/b96518713738c1e1f9c177dbe56d850b.png" alt="在这里插入图片描述"></p><h3 id="5-唯一性约束"><a href="#5-唯一性约束" class="headerlink" title="5.唯一性约束"></a>5.唯一性约束</h3><p>唯一性约束即UNIQUE用于保证数据表中字段的唯一性，即表中字段的值不能重复出现，其基本的语法格式如下所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">字段名 数据类型 <span class="hljs-keyword">UNIQUE</span>;<br></code></pre></td></tr></table></figure><p>示例：MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create table</span> student04(<br>id <span class="hljs-type">int</span>,<br>name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">unique</span><br>);<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/bf704e9477a6c79ee90a20ca19dd1649.png" alt="在这里插入图片描述"></p><h3 id="6-外键约束"><a href="#6-外键约束" class="headerlink" title="6.外键约束"></a>6.外键约束</h3><p>外键约束即FOREIGN KEY常用于多张表之间的约束。基本语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 在创建数据表时语法如下：</span><br><span class="hljs-keyword">CONSTRAINT</span> 外键名 <span class="hljs-keyword">FOREIGN KEY</span> (从表外键字段) <span class="hljs-keyword">REFERENCES</span> 主表 (主键字段)<br><span class="hljs-comment">-- 将创建数据表创号后语法如下：</span><br><span class="hljs-keyword">ALTER TABLE</span> 从表名 <span class="hljs-keyword">ADD CONSTRAINT</span> 外键名 <span class="hljs-keyword">FOREIGN KEY</span> (从表外键字段) <span class="hljs-keyword">REFERENCES</span> 主表 (主键字段);<br></code></pre></td></tr></table></figure><p>示例：创建一个学生表 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create table</span> student05(<br>id <span class="hljs-type">int</span> <span class="hljs-keyword">primary key</span>,<br>name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>)<br>);<br></code></pre></td></tr></table></figure><p>示例：创建一个班级表 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create table</span> class(<br>classid <span class="hljs-type">int</span> <span class="hljs-keyword">primary key</span>,<br>studentid <span class="hljs-type">int</span><br>);<br></code></pre></td></tr></table></figure><p>示例：学生表作为主表，班级表作为副表设置外键， MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter table</span> class <span class="hljs-keyword">add constraint</span> fk_class_studentid <span class="hljs-keyword">foreign key</span>(studentid) <span class="hljs-keyword">references</span> student05(id);<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/8a27285fe24b53caf5e5a528a8b3bbe3.png" alt="在这里插入图片描述"></p><h4 id="6-1-数据一致性概念"><a href="#6-1-数据一致性概念" class="headerlink" title="6.1 数据一致性概念"></a>6.1 数据一致性概念</h4><p>大家知道：建立外键是为了保证数据的完整和统一性。但是，如果主表中的数据被删除或修改从表中对应的数据该怎么办呢？很明显，从表中对应的数据也应该被删除，否则数据库中会存在很多无意义的垃圾数据。</p><h4 id="6-2-删除外键"><a href="#6-2-删除外键" class="headerlink" title="6.2 删除外键"></a>6.2 删除外键</h4><p>语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter table</span> 从表名 <span class="hljs-keyword">drop</span> <span class="hljs-keyword">foreign key</span> 外键名；<br></code></pre></td></tr></table></figure><p>示例：删除外键 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter table</span> class <span class="hljs-keyword">drop</span> <span class="hljs-keyword">foreign key</span> fk_class_studentid;<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/65c9f290a8ce4865264e0d47405efd4d.png" alt="在这里插入图片描述"><br>外键的那个字段不在了证明删除成功了</p><h4 id="6-3-关于外键约束需要注意的细节"><a href="#6-3-关于外键约束需要注意的细节" class="headerlink" title="6.3 关于外键约束需要注意的细节"></a>6.3 关于外键约束需要注意的细节</h4><p>1、从表里的外键通常为主表的主键<br>2、从表里外键的数据类型必须与主表中主键的数据类型一致<br>3、主表发生变化时应注意主表与从表的数据一致性问题</p><h2 id="六、数据表插入数据"><a href="#六、数据表插入数据" class="headerlink" title="六、数据表插入数据"></a>六、数据表插入数据</h2><p>在MySQL通过INSERT语句向数据表中插入数据。在此，我们先准备一张学生表，代码如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create table</span> student(<br>id <span class="hljs-type">int</span>,<br>name <span class="hljs-type">varchar</span>(<span class="hljs-number">30</span>),<br>age <span class="hljs-type">int</span>,<br>gender <span class="hljs-type">varchar</span>(<span class="hljs-number">30</span>)<br>);<br></code></pre></td></tr></table></figure><h3 id="1-为表中所有字段插入数据"><a href="#1-为表中所有字段插入数据" class="headerlink" title="1. 为表中所有字段插入数据"></a>1. 为表中所有字段插入数据</h3><p>每个字段与其值是严格一一对应的。也就是说：每个值、值的顺序、值的类型必须与对应的字段相匹配。但是，各字段也无须与其在表中定义的顺序一致，它们只要与 VALUES中值的顺序一致即可。<br>语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT INTO</span> 表名（字段名<span class="hljs-number">1</span>,字段名<span class="hljs-number">2</span>,...) <span class="hljs-keyword">VALUES</span> (值 <span class="hljs-number">1</span>,值 <span class="hljs-number">2</span>,...);<br></code></pre></td></tr></table></figure><p>示例：向学生表中插入一条学生信息 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert into</span> student (id,name,age,gender) <span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;bob&#x27;</span>,<span class="hljs-number">16</span>,<span class="hljs-string">&#x27;male&#x27;</span>);<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/0fe30557fe3a4c8a8c3141995748928a.png" alt="在这里插入图片描述"></p><h3 id="2-为表中指定字段插入数据"><a href="#2-为表中指定字段插入数据" class="headerlink" title="2. 为表中指定字段插入数据"></a>2. 为表中指定字段插入数据</h3><p>语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT INTO</span> 表名（字段名<span class="hljs-number">1</span>,字段名<span class="hljs-number">2</span>,...) <span class="hljs-keyword">VALUES</span> (值 <span class="hljs-number">1</span>,值 <span class="hljs-number">2</span>,...);<br></code></pre></td></tr></table></figure><p>插入数据的方法基本和为表中所有字段插入数据，一样，只是需要插入的字段由你自己指定</p><h3 id="3-同时插入多条记录"><a href="#3-同时插入多条记录" class="headerlink" title="3. 同时插入多条记录"></a>3. 同时插入多条记录</h3><p>语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT INTO</span> 表名 [(字段名<span class="hljs-number">1</span>,字段名<span class="hljs-number">2</span>,...)]<span class="hljs-keyword">VALUES</span> (值 <span class="hljs-number">1</span>,值 <span class="hljs-number">2</span>,…),(值 <span class="hljs-number">1</span>,值 <span class="hljs-number">2</span>,…),...;<br></code></pre></td></tr></table></figure><p>在该方式中：(字段名1,字段名2,…)是可选的，它用于指定插入的字段名；(值 1,值 2,…),(值 1,值 2,…)表示要插入的记录，该记录可有多条并且每条记录之间用逗号隔开。<br>示例：向学生表中插入多条学生信息 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert into</span> student (id,name,age,gender) <span class="hljs-keyword">values</span> (<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;lucy&#x27;</span>,<span class="hljs-number">17</span>,<span class="hljs-string">&#x27;female&#x27;</span>),(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;jack&#x27;</span>,<span class="hljs-number">19</span>,<span class="hljs-string">&#x27;male&#x27;</span>),(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;tom&#x27;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&#x27;male&#x27;</span>);<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/32da9ffdf851f2eb392ecc4fa2a027ed.png" alt="在这里插入图片描述"></p><h2 id="七、更新数据"><a href="#七、更新数据" class="headerlink" title="七、更新数据"></a>七、更新数据</h2><p>在MySQL通过UPDATE语句更新数据表中的数据。在此，我们将就用六中的student学生表</p><h3 id="1-UPDATE基本语法"><a href="#1-UPDATE基本语法" class="headerlink" title="1. UPDATE基本语法"></a>1. UPDATE基本语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> 表名 <span class="hljs-keyword">SET</span> 字段名<span class="hljs-number">1</span><span class="hljs-operator">=</span>值<span class="hljs-number">1</span>[,字段名<span class="hljs-number">2</span> <span class="hljs-operator">=</span>值<span class="hljs-number">2</span>,…] [<span class="hljs-keyword">WHERE</span> 条件表达式];<br></code></pre></td></tr></table></figure><p>在该语法中：字段名1、字段名2…用于指定要更新的字段名称；值1、值 2…用于表示字段的新数据；WHERE 条件表达式 是可选的，它用于指定更新数据需要满足的条件</p><h3 id="2-UPDATE更新部分数据"><a href="#2-UPDATE更新部分数据" class="headerlink" title="2. UPDATE更新部分数据"></a>2. UPDATE更新部分数据</h3><p>示例：将name为tom的记录的age设置为20并将其gender设置为female MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> student <span class="hljs-keyword">set</span> age<span class="hljs-operator">=</span><span class="hljs-number">20</span>,gender<span class="hljs-operator">=</span><span class="hljs-string">&#x27;female&#x27;</span> <span class="hljs-keyword">where</span> name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;tom&#x27;</span>;<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/440bbbc94bb1601c058716a7e6d73102.png" alt="在这里插入图片描述"></p><h3 id="3-UPDATE更新全部数据"><a href="#3-UPDATE更新全部数据" class="headerlink" title="3. UPDATE更新全部数据"></a>3. UPDATE更新全部数据</h3><p>示例：将所有记录的age设置为18 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> student <span class="hljs-keyword">set</span> age<span class="hljs-operator">=</span><span class="hljs-number">18</span>;<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/79247bbec461e0627bbd7291d63fabf6.png" alt="在这里插入图片描述"></p><h2 id="八、删除数据"><a href="#八、删除数据" class="headerlink" title="八、删除数据"></a>八、删除数据</h2><p>在MySQL通过DELETE语句删除数据表中的数据。在此，我们先准备一张数据表，代码如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建学生表</span><br> <span class="hljs-keyword">create table</span> student(<br> id <span class="hljs-type">int</span>,<br> name <span class="hljs-type">varchar</span>(<span class="hljs-number">30</span>),<br> age <span class="hljs-type">int</span>,<br> gender <span class="hljs-type">varchar</span>(<span class="hljs-number">30</span>)<br> );<br> <span class="hljs-comment">-- 插入数据</span><br> <span class="hljs-keyword">insert into</span> student (id,name,age,gender) <span class="hljs-keyword">values</span> (<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;lucy&#x27;</span>,<span class="hljs-number">17</span>,<span class="hljs-string">&#x27;female&#x27;</span>),(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;jack&#x27;</span>,<span class="hljs-number">19</span>,<span class="hljs-string">&#x27;male&#x27;</span>),(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;tom&#x27;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&#x27;male&#x27;</span>),(<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;sal&#x27;</span>,<span class="hljs-number">19</span>,<span class="hljs-string">&#x27;female&#x27;</span>),(<span class="hljs-number">6</span>,<span class="hljs-string">&#x27;sun&#x27;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;male&#x27;</span>)<br>,(<span class="hljs-number">7</span>,<span class="hljs-string">&#x27;sad&#x27;</span>,<span class="hljs-number">13</span>,<span class="hljs-string">&#x27;female&#x27;</span>),(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;sam&#x27;</span>,<span class="hljs-number">14</span>,<span class="hljs-string">&#x27;male&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="1-DELETE基本语法"><a href="#1-DELETE基本语法" class="headerlink" title="1. DELETE基本语法"></a>1. DELETE基本语法</h3><p>在该语法中：表名用于指定要执行删除操作的表；[WHERE 条件表达式]为可选参数用于指定删除的条件。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> 表名 [<span class="hljs-keyword">WHERE</span> 条件表达式];<br></code></pre></td></tr></table></figure><h3 id="2-DELETE删除部分数据"><a href="#2-DELETE删除部分数据" class="headerlink" title="2. DELETE删除部分数据"></a>2. DELETE删除部分数据</h3><p>示例：删除age等于14的所有记录 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> age<span class="hljs-operator">=</span><span class="hljs-number">14</span>;<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/92b3e2f3a16f8d45d8e023a4e38c9bd0.png" alt="在这里插入图片描述"></p><h3 id="3-DELETE删除全部数据"><a href="#3-DELETE删除全部数据" class="headerlink" title="3. DELETE删除全部数据"></a>3. DELETE删除全部数据</h3><p>示例：删除student表中的所有记录 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> student;<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/1686dfe37a8d5503a1098db1bb939008.png" alt="在这里插入图片描述"></p><h3 id="4-TRUNCATE和DETELE的区别"><a href="#4-TRUNCATE和DETELE的区别" class="headerlink" title="4. TRUNCATE和DETELE的区别"></a>4. TRUNCATE和DETELE的区别</h3><p>TRUNCATE和DETELE都能实现删除表中的所有数据的功能，但两者也是有区别的：<br>1、DELETE语句后可跟WHERE子句，可通过指定WHERE子句中的条件表达式只删除满足条件的部分记录；但是，TRUNCATE语句只能用于删除表中的所有记录。<br>2、使用TRUNCATE语句删除表中的数据后，再次向表中添加记录时自动增加字段的默认初始值重新由1开始；使用DELETE语句删除表中所有记录后，再次向表中添加记录时自动增加字段的值为删除时该字段的最大值加1<br>3、DELETE语句是DML语句，TRUNCATE语句通常被认为是DDL语句</p><h2 id="九、MySQL数据表简单查询"><a href="#九、MySQL数据表简单查询" class="headerlink" title="九、MySQL数据表简单查询"></a>九、MySQL数据表简单查询</h2><h3 id="1-简单查询概述"><a href="#1-简单查询概述" class="headerlink" title="1.简单查询概述"></a>1.简单查询概述</h3><p>简单查询即不含where的select语句。在此，我们讲解简单查询中最常用的两种查询：查询所有字段和查询指定字段。<br>在此，先准备测试数据，代码如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建数据库</span><br><span class="hljs-keyword">DROP</span> DATABASE IF <span class="hljs-keyword">EXISTS</span> mydb;<br><span class="hljs-keyword">CREATE</span> DATABASE mydb;<br>USE mydb;<br><br><span class="hljs-comment">-- 创建student表</span><br><span class="hljs-keyword">CREATE TABLE</span> student (<br>    sid <span class="hljs-type">CHAR</span>(<span class="hljs-number">6</span>),<br>    sname <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>),<br>    age <span class="hljs-type">INT</span>,<br>    gender <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;male&#x27;</span><br>);<br><br><span class="hljs-comment">-- 向student表插入数据</span><br><span class="hljs-keyword">INSERT INTO</span> student (sid,sname,age,gender) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;S_1001&#x27;</span>, <span class="hljs-string">&#x27;lili&#x27;</span>, <span class="hljs-number">14</span>, <span class="hljs-string">&#x27;male&#x27;</span>);<br><span class="hljs-keyword">INSERT INTO</span> student (sid,sname,age,gender) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;S_1002&#x27;</span>, <span class="hljs-string">&#x27;wang&#x27;</span>, <span class="hljs-number">15</span>, <span class="hljs-string">&#x27;female&#x27;</span>);<br><span class="hljs-keyword">INSERT INTO</span> student (sid,sname,age,gender) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;S_1003&#x27;</span>, <span class="hljs-string">&#x27;tywd&#x27;</span>, <span class="hljs-number">16</span>, <span class="hljs-string">&#x27;male&#x27;</span>);<br><span class="hljs-keyword">INSERT INTO</span> student (sid,sname,age,gender) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;S_1004&#x27;</span>, <span class="hljs-string">&#x27;hfgs&#x27;</span>, <span class="hljs-number">17</span>, <span class="hljs-string">&#x27;female&#x27;</span>);<br><span class="hljs-keyword">INSERT INTO</span> student (sid,sname,age,gender) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;S_1005&#x27;</span>, <span class="hljs-string">&#x27;qwer&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;male&#x27;</span>);<br><span class="hljs-keyword">INSERT INTO</span> student (sid,sname,age,gender) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;S_1006&#x27;</span>, <span class="hljs-string">&#x27;zxsd&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-string">&#x27;female&#x27;</span>);<br><span class="hljs-keyword">INSERT INTO</span> student (sid,sname,age,gender) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;S_1007&#x27;</span>, <span class="hljs-string">&#x27;hjop&#x27;</span>, <span class="hljs-number">16</span>, <span class="hljs-string">&#x27;male&#x27;</span>);<br><span class="hljs-keyword">INSERT INTO</span> student (sid,sname,age,gender) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;S_1008&#x27;</span>, <span class="hljs-string">&#x27;tyop&#x27;</span>, <span class="hljs-number">15</span>, <span class="hljs-string">&#x27;female&#x27;</span>);<br><span class="hljs-keyword">INSERT INTO</span> student (sid,sname,age,gender) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;S_1009&#x27;</span>, <span class="hljs-string">&#x27;nhmk&#x27;</span>, <span class="hljs-number">13</span>, <span class="hljs-string">&#x27;male&#x27;</span>);<br><span class="hljs-keyword">INSERT INTO</span> student (sid,sname,age,gender) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;S_1010&#x27;</span>, <span class="hljs-string">&#x27;xdfv&#x27;</span>, <span class="hljs-number">17</span>, <span class="hljs-string">&#x27;female&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="2-查询所有字段（方法不唯一只是举例）"><a href="#2-查询所有字段（方法不唯一只是举例）" class="headerlink" title="2.查询所有字段（方法不唯一只是举例）"></a>2.查询所有字段（方法不唯一只是举例）</h3><p>查询所有字段 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student;<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/da06484a5c98cc82db06e59f17f92207.png" alt="在这里插入图片描述"></p><h3 id="3-查询指定字段（sid、sname）"><a href="#3-查询指定字段（sid、sname）" class="headerlink" title="3.查询指定字段（sid、sname）"></a>3.查询指定字段（sid、sname）</h3><p>查询指定字段（sid、sname） MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sid,sname <span class="hljs-keyword">from</span> student;<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/b9336da752c6aea366aa34cc508bea4f.png" alt="在这里插入图片描述"></p><h3 id="4-常数的查询"><a href="#4-常数的查询" class="headerlink" title="4.常数的查询"></a>4.常数的查询</h3><p>在SELECT中除了书写列名，还可以书写常数。可以用于标记<br>常数的查询日期标记 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sid,sname,<span class="hljs-string">&#x27;2021-03-02&#x27;</span> <span class="hljs-keyword">from</span> student;<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/b6e7523eb44dc8848dbac580f6247385.png" alt="在这里插入图片描述"></p><h3 id="5-从查询结果中过滤重复数据"><a href="#5-从查询结果中过滤重复数据" class="headerlink" title="5.从查询结果中过滤重复数据"></a>5.从查询结果中过滤重复数据</h3><p>在使用DISTINCT 时需要注意：<br><strong>在SELECT查询语句中DISTINCT关键字只能用在第一个所查列名之前。</strong><br>MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> gender <span class="hljs-keyword">from</span> student;<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/039e67afa663c9e858038252a5ae590c.png" alt="在这里插入图片描述"></p><h3 id="6-算术运算符（举例加运算符）"><a href="#6-算术运算符（举例加运算符）" class="headerlink" title="6.算术运算符（举例加运算符）"></a>6.算术运算符（举例加运算符）</h3><p>在SELECT查询语句中还可以使用加减乘除运算符。<br>查询学生10年后的年龄 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sname,age<span class="hljs-operator">+</span><span class="hljs-number">10</span> <span class="hljs-keyword">from</span> student;<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/17eb6e6aebae9e238763bbbaf00a5a0d.png" alt="在这里插入图片描述"></p><h2 id="十、函数"><a href="#十、函数" class="headerlink" title="十、函数"></a>十、函数</h2><p>在此，先准备测试数据，代码如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建数据库</span><br><span class="hljs-keyword">DROP</span> DATABASE IF <span class="hljs-keyword">EXISTS</span> mydb;<br><span class="hljs-keyword">CREATE</span> DATABASE mydb;<br>USE mydb;<br><br><span class="hljs-comment">-- 创建student表</span><br><span class="hljs-keyword">CREATE TABLE</span> student (<br>    sid <span class="hljs-type">CHAR</span>(<span class="hljs-number">6</span>),<br>    sname <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>),<br>    age <span class="hljs-type">INT</span>,<br>    gender <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;male&#x27;</span><br>);<br><br><span class="hljs-comment">-- 向student表插入数据</span><br><span class="hljs-keyword">INSERT INTO</span> student (sid,sname,age,gender) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;S_1001&#x27;</span>, <span class="hljs-string">&#x27;lili&#x27;</span>, <span class="hljs-number">14</span>, <span class="hljs-string">&#x27;male&#x27;</span>);<br><span class="hljs-keyword">INSERT INTO</span> student (sid,sname,age,gender) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;S_1002&#x27;</span>, <span class="hljs-string">&#x27;wang&#x27;</span>, <span class="hljs-number">15</span>, <span class="hljs-string">&#x27;female&#x27;</span>);<br><span class="hljs-keyword">INSERT INTO</span> student (sid,sname,age,gender) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;S_1003&#x27;</span>, <span class="hljs-string">&#x27;tywd&#x27;</span>, <span class="hljs-number">16</span>, <span class="hljs-string">&#x27;male&#x27;</span>);<br><span class="hljs-keyword">INSERT INTO</span> student (sid,sname,age,gender) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;S_1004&#x27;</span>, <span class="hljs-string">&#x27;hfgs&#x27;</span>, <span class="hljs-number">17</span>, <span class="hljs-string">&#x27;female&#x27;</span>);<br><span class="hljs-keyword">INSERT INTO</span> student (sid,sname,age,gender) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;S_1005&#x27;</span>, <span class="hljs-string">&#x27;qwer&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;male&#x27;</span>);<br><span class="hljs-keyword">INSERT INTO</span> student (sid,sname,age,gender) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;S_1006&#x27;</span>, <span class="hljs-string">&#x27;zxsd&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-string">&#x27;female&#x27;</span>);<br><span class="hljs-keyword">INSERT INTO</span> student (sid,sname,age,gender) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;S_1007&#x27;</span>, <span class="hljs-string">&#x27;hjop&#x27;</span>, <span class="hljs-number">16</span>, <span class="hljs-string">&#x27;male&#x27;</span>);<br><span class="hljs-keyword">INSERT INTO</span> student (sid,sname,age,gender) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;S_1008&#x27;</span>, <span class="hljs-string">&#x27;tyop&#x27;</span>, <span class="hljs-number">15</span>, <span class="hljs-string">&#x27;female&#x27;</span>);<br><span class="hljs-keyword">INSERT INTO</span> student (sid,sname,age,gender) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;S_1009&#x27;</span>, <span class="hljs-string">&#x27;nhmk&#x27;</span>, <span class="hljs-number">13</span>, <span class="hljs-string">&#x27;male&#x27;</span>);<br><span class="hljs-keyword">INSERT INTO</span> student (sid,sname,age,gender) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;S_1010&#x27;</span>, <span class="hljs-string">&#x27;xdfv&#x27;</span>, <span class="hljs-number">17</span>, <span class="hljs-string">&#x27;female&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="1-聚合函数"><a href="#1-聚合函数" class="headerlink" title="1.聚合函数"></a>1.聚合函数</h3><p>在开发中，我们常常有类似的需求：统计某个字段的最大值、最小值、 平均值等等。为此，MySQL中提供了聚合函数来实现这些功能。所谓聚合，就是将多行汇总成一行；其实，所有的聚合函数均如此——输入多行，输出一行。聚合函数具有自动滤空的功能，若某一个值为NULL，那么会自动将其过滤使其不参与运算。<br><strong>聚合函数使用规则：</strong><br>只有SELECT子句和HAVING子句、ORDER BY子句中能够使用聚合函数。例如，在WHERE子句中使用聚合函数是错误的。<br>接下来，我们学习常用聚合函数。</p><h4 id="1-1、count（）"><a href="#1-1、count（）" class="headerlink" title="1.1、count（）"></a>1.1、count（）</h4><p>统计表中数据的行数或者统计指定列其值不为NULL的数据个数<br><em>查询有多少该表中有多少人</em><br>MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> student;<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/e8562c79c7e936ffbb54e8ffd55b63b8.png" alt="在这里插入图片描述"></p><h4 id="1-2、max（）"><a href="#1-2、max（）" class="headerlink" title="1.2、max（）"></a>1.2、max（）</h4><p>计算指定列的最大值，如果指定列是字符串类型则使用字符串排序运算</p><p><em>查询该学生表中年纪最大的学生</em><br>MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">max</span>(age) <span class="hljs-keyword">from</span> student;<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/bdd583b9c961a25aa25a70fd0913fcd1.png" alt="在这里插入图片描述"></p><h4 id="1-3、min（）"><a href="#1-3、min（）" class="headerlink" title="1.3、min（）"></a>1.3、min（）</h4><p>计算指定列的最小值，如果指定列是字符串类型则使用字符串排序运算</p><p>查询该学生表中年纪最小的学生 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sname,<span class="hljs-built_in">min</span>(age) <span class="hljs-keyword">from</span> student;<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/f087fd252ca50931ce0583db2bf52287.png" alt="在这里插入图片描述"></p><h4 id="1-4、sum（）"><a href="#1-4、sum（）" class="headerlink" title="1.4、sum（）"></a>1.4、sum（）</h4><p>计算指定列的数值和，如果指定列类型不是数值类型则计算结果为0<br>查询该学生表中年纪的总和 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(age) <span class="hljs-keyword">from</span> student;<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/ef2e6e90e4c82eaa8608fac166a56e2e.png" alt="在这里插入图片描述"></p><h4 id="1-5、avg（）"><a href="#1-5、avg（）" class="headerlink" title="1.5、avg（）"></a>1.5、avg（）</h4><p>计算指定列的平均值，如果指定列类型不是数值类型则计算结果为</p><p>查询该学生表中年纪的平均数 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(age) <span class="hljs-keyword">from</span> student;<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/f7db669c17a9e8bc34478bd6586108fc.png" alt="在这里插入图片描述"></p><h3 id="2-其他常用函数"><a href="#2-其他常用函数" class="headerlink" title="2.其他常用函数"></a>2.其他常用函数</h3><p>这里我就不一一举例了，基本混个眼熟，以后用到再细说</p><h4 id="2-1、时间函数"><a href="#2-1、时间函数" class="headerlink" title="2.1、时间函数"></a>2.1、时间函数</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> NOW();<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DAY</span> (NOW());<br><span class="hljs-keyword">SELECT</span> <span class="hljs-type">DATE</span> (NOW());<br><span class="hljs-keyword">SELECT</span> <span class="hljs-type">TIME</span> (NOW());<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">YEAR</span> (NOW());<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">MONTH</span> (NOW());<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">CURRENT_DATE</span>();<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">CURRENT_TIME</span>();<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>();<br><span class="hljs-keyword">SELECT</span> ADDTIME(<span class="hljs-string">&#x27;14:23:12&#x27;</span>,<span class="hljs-string">&#x27;01:02:01&#x27;</span>);<br><span class="hljs-keyword">SELECT</span> DATE_ADD(NOW(),<span class="hljs-type">INTERVAL</span> <span class="hljs-number">1</span> <span class="hljs-keyword">DAY</span>);<br><span class="hljs-keyword">SELECT</span> DATE_ADD(NOW(),<span class="hljs-type">INTERVAL</span> <span class="hljs-number">1</span> <span class="hljs-keyword">MONTH</span>);<br><span class="hljs-keyword">SELECT</span> DATE_SUB(NOW(),<span class="hljs-type">INTERVAL</span> <span class="hljs-number">1</span> <span class="hljs-keyword">DAY</span>);<br><span class="hljs-keyword">SELECT</span> DATE_SUB(NOW(),<span class="hljs-type">INTERVAL</span> <span class="hljs-number">1</span> <span class="hljs-keyword">MONTH</span>);<br><span class="hljs-keyword">SELECT</span> DATEDIFF(<span class="hljs-string">&#x27;2019-07-22&#x27;</span>,<span class="hljs-string">&#x27;2019-05-05&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="2-2、字符串函数"><a href="#2-2、字符串函数" class="headerlink" title="2.2、字符串函数"></a>2.2、字符串函数</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--连接函数</span><br><span class="hljs-keyword">SELECT</span> CONCAT ()<br><span class="hljs-comment">--</span><br><span class="hljs-keyword">SELECT</span> INSTR ();<br><span class="hljs-comment">--统计长度</span><br><span class="hljs-keyword">SELECT</span> LENGTH();<br></code></pre></td></tr></table></figure><h4 id="2-3、数学函数"><a href="#2-3、数学函数" class="headerlink" title="2.3、数学函数"></a>2.3、数学函数</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 绝对值</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">ABS</span>(<span class="hljs-number">-136</span>);<br><span class="hljs-comment">-- 向下取整</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">3.14</span>);<br><span class="hljs-comment">-- 向上取整</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">CEILING</span>(<span class="hljs-number">3.14</span>);<br></code></pre></td></tr></table></figure><h2 id="十一、条件查询"><a href="#十一、条件查询" class="headerlink" title="十一、条件查询"></a>十一、条件查询</h2><p>数据库中存有大量数据，我们可根据需求获取指定的数据。此时，我们可在查询语句中通过WHERE子句指定查询条件对查询结果进行过滤。<br>在开始学习条件查询之前，我们先准备测试数据，代码如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建数据库</span><br><span class="hljs-keyword">DROP</span> DATABASE IF <span class="hljs-keyword">EXISTS</span> mydb;<br><span class="hljs-keyword">CREATE</span> DATABASE mydb;<br>USE mydb;<br><br><span class="hljs-comment">-- 创建student表</span><br><span class="hljs-keyword">CREATE TABLE</span> student (<br>    sid <span class="hljs-type">CHAR</span>(<span class="hljs-number">6</span>),<br>    sname <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>),<br>    age <span class="hljs-type">INT</span>,<br>    gender <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;male&#x27;</span><br>);<br><br><span class="hljs-comment">-- 向student表插入数据</span><br><span class="hljs-keyword">INSERT INTO</span> student (sid,sname,age,gender) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;S_1001&#x27;</span>, <span class="hljs-string">&#x27;lili&#x27;</span>, <span class="hljs-number">14</span>, <span class="hljs-string">&#x27;male&#x27;</span>);<br><span class="hljs-keyword">INSERT INTO</span> student (sid,sname,age,gender) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;S_1002&#x27;</span>, <span class="hljs-string">&#x27;wang&#x27;</span>, <span class="hljs-number">15</span>, <span class="hljs-string">&#x27;female&#x27;</span>);<br><span class="hljs-keyword">INSERT INTO</span> student (sid,sname,age,gender) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;S_1003&#x27;</span>, <span class="hljs-string">&#x27;tywd&#x27;</span>, <span class="hljs-number">16</span>, <span class="hljs-string">&#x27;male&#x27;</span>);<br><span class="hljs-keyword">INSERT INTO</span> student (sid,sname,age,gender) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;S_1004&#x27;</span>, <span class="hljs-string">&#x27;hfgs&#x27;</span>, <span class="hljs-number">17</span>, <span class="hljs-string">&#x27;female&#x27;</span>);<br><span class="hljs-keyword">INSERT INTO</span> student (sid,sname,age,gender) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;S_1005&#x27;</span>, <span class="hljs-string">&#x27;qwer&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;male&#x27;</span>);<br><span class="hljs-keyword">INSERT INTO</span> student (sid,sname,age,gender) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;S_1006&#x27;</span>, <span class="hljs-string">&#x27;zxsd&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-string">&#x27;female&#x27;</span>);<br><span class="hljs-keyword">INSERT INTO</span> student (sid,sname,age,gender) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;S_1007&#x27;</span>, <span class="hljs-string">&#x27;hjop&#x27;</span>, <span class="hljs-number">16</span>, <span class="hljs-string">&#x27;male&#x27;</span>);<br><span class="hljs-keyword">INSERT INTO</span> student (sid,sname,age,gender) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;S_1008&#x27;</span>, <span class="hljs-string">&#x27;tyop&#x27;</span>, <span class="hljs-number">15</span>, <span class="hljs-string">&#x27;female&#x27;</span>);<br><span class="hljs-keyword">INSERT INTO</span> student (sid,sname,age,gender) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;S_1009&#x27;</span>, <span class="hljs-string">&#x27;nhmk&#x27;</span>, <span class="hljs-number">13</span>, <span class="hljs-string">&#x27;male&#x27;</span>);<br><span class="hljs-keyword">INSERT INTO</span> student (sid,sname,age,gender) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;S_1010&#x27;</span>, <span class="hljs-string">&#x27;xdfv&#x27;</span>, <span class="hljs-number">17</span>, <span class="hljs-string">&#x27;female&#x27;</span>);<br><span class="hljs-keyword">INSERT INTO</span> student (sid,sname,age,gender) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;S_1012&#x27;</span>, <span class="hljs-string">&#x27;lili&#x27;</span>, <span class="hljs-number">14</span>, <span class="hljs-string">&#x27;male&#x27;</span>);<br><span class="hljs-keyword">INSERT INTO</span> student (sid,sname,age,gender) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;S_1013&#x27;</span>, <span class="hljs-string">&#x27;wang&#x27;</span>, <span class="hljs-number">15</span>, <span class="hljs-string">&#x27;female&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="1-使用关系运算符查询"><a href="#1-使用关系运算符查询" class="headerlink" title="1.使用关系运算符查询"></a>1.使用关系运算符查询</h3><p>在WHERE中可使用关系运算符进行条件查询，常用的关系运算符如下所示：</p><table><thead><tr><th>关系运算符</th><th>说明</th></tr></thead><tbody><tr><td>&#x3D;</td><td>等于</td></tr><tr><td>&lt;&gt;</td><td>不等于</td></tr><tr><td>!&#x3D;</td><td>不等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td></tr></tbody></table><p>查询年龄等于或大于17的学生的信息 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> age<span class="hljs-operator">&gt;=</span><span class="hljs-number">17</span>;<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/c6433fc411ed540ebeba61b71142ba9b.png" alt="在这里插入图片描述"></p><h3 id="2-使用IN关键字查询"><a href="#2-使用IN关键字查询" class="headerlink" title="2.使用IN关键字查询"></a>2.使用IN关键字查询</h3><p>IN关键字用于判断某个字段的值是否在指定集合中。如果字段的值恰好在指定的集合中，则将字段所在的记录将査询出来。</p><p>查询sid为S_1002和S_1003的学生信息 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> sid <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;S_1002&#x27;</span>,<span class="hljs-string">&#x27;S_1003&#x27;</span>);<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/0f4df021b98e2831047585aad2f5a656.png" alt="在这里插入图片描述"><br>查询sid为S_1001以外的学生的信息 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> sid <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;S_1001&#x27;</span>);<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/37155848cebf9e7a2beb5bec53b209bc.png" alt="在这里插入图片描述"></p><h3 id="3-使用BETWEEN-AND关键字查询"><a href="#3-使用BETWEEN-AND关键字查询" class="headerlink" title="3.使用BETWEEN AND关键字查询"></a>3.使用BETWEEN AND关键字查询</h3><p>BETWEEN AND用于判断某个字段的值是否在指定的范围之内。如果字段的值在指定范围内，则将所在的记录将查询出来<br>查询15到18岁的学生信息 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> age <span class="hljs-keyword">between</span> <span class="hljs-number">15</span> <span class="hljs-keyword">and</span> <span class="hljs-number">18</span>;<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/9778b7e6db51c6e3700bab249f0fe21b.png" alt="在这里插入图片描述"><br>查询不是15到18岁的学生信息 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> age <span class="hljs-keyword">not</span> <span class="hljs-keyword">between</span> <span class="hljs-number">15</span> <span class="hljs-keyword">and</span> <span class="hljs-number">18</span>;<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/8fedd978fd2a0c1c1de0159fd75ed020.png" alt="在这里插入图片描述"></p><h3 id="4-使用空值查询"><a href="#4-使用空值查询" class="headerlink" title="4.使用空值查询"></a>4.使用空值查询</h3><p>在MySQL中，使用 IS NULL关键字判断字段的值是否为空值。请注意：空值NULL不同于0，也不同于空字符串<br><strong>由于student表没有空值就不演示查询空值的了</strong><br>查询sname不为空值的学生信息 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> sname <span class="hljs-keyword">is</span> <span class="hljs-keyword">not null</span>;<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/955203835bb647b14bb8e37e9006cc30.png" alt="在这里插入图片描述"></p><h3 id="5-使用AND关键字查询"><a href="#5-使用AND关键字查询" class="headerlink" title="5.使用AND关键字查询"></a>5.使用AND关键字查询</h3><p>在MySQL中可使用AND关键字可以连接两个或者多个查询条件。<br>查询年纪大于15且性别为male的学生信息 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> age<span class="hljs-operator">&gt;</span><span class="hljs-number">15</span> <span class="hljs-keyword">and</span> gender<span class="hljs-operator">=</span><span class="hljs-string">&#x27;male&#x27;</span>;<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/7d92a168e477bcbef52a23011650a589.png" alt="在这里插入图片描述"></p><h3 id="6-使用OR关键字查询"><a href="#6-使用OR关键字查询" class="headerlink" title="6.使用OR关键字查询"></a>6.使用OR关键字查询</h3><p>在使用SELECT语句查询数据时可使用OR关键字连接多个査询条件。在使用OR关键字时，只要记录满足其中任意一个条件就会被查询出来<br>查询年纪大于15或者性别为male的学生信息 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> age<span class="hljs-operator">&gt;</span><span class="hljs-number">15</span> <span class="hljs-keyword">or</span> gender<span class="hljs-operator">=</span><span class="hljs-string">&#x27;male&#x27;</span>;<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/36893a4d17bd0e98e9d3443527d7759c.png" alt="在这里插入图片描述"></p><h3 id="7-使用LIKE关键字查询"><a href="#7-使用LIKE关键字查询" class="headerlink" title="7.使用LIKE关键字查询"></a>7.使用LIKE关键字查询</h3><p>MySQL中可使用LIKE关键字可以判断两个字符串是否相匹配</p><h4 id="7-1-普通字符串"><a href="#7-1-普通字符串" class="headerlink" title="7.1 普通字符串"></a>7.1 普通字符串</h4><p>查询sname中与wang匹配的学生信息 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> sname <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;wang&#x27;</span>;<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/b9d9c98091581af916938edb136b6238.png" alt="在这里插入图片描述"></p><h4 id="7-2-含有-通配的字符串"><a href="#7-2-含有-通配的字符串" class="headerlink" title="7.2 含有%通配的字符串"></a>7.2 含有%通配的字符串</h4><p>%用于匹配任意长度的字符串。例如，字符串“a%”匹配以字符a开始任意长度的字符串<br>查询学生姓名以li开始的记录 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> sname <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;li%&#x27;</span>;<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/6e1f54d0c26e8c3d0c75d4ca810d219e.png" alt="在这里插入图片描述"><br>查询学生姓名以g结尾的记录 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> sname <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%g&#x27;</span>;<br></code></pre></td></tr></table></figure><p>运行效果展示：<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/44b4403904f1db3900f6669d80fb8443.png" alt="在这里插入图片描述"><br>查询学生姓名包含s的记录 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> sname <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%s%&#x27;</span>;<br></code></pre></td></tr></table></figure><p>运行效果展示<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/210573b339139b3b7b8cbe371a1092c5.png" alt="在这里插入图片描述"></p><h4 id="7-3-含有-通配的字符串"><a href="#7-3-含有-通配的字符串" class="headerlink" title="7.3 含有_通配的字符串"></a>7.3 含有_通配的字符串</h4><p>下划线通配符只匹配单个字符，如果要匹配多个字符，需要连续使用多个下划线通配符。例如，字符串“ab_”匹配以字符串“ab”开始长度为3的字符串，如abc、abp等等；字符串“a__d”匹配在字符“a”和“d”之间包含两个字符的字符串，如”abcd”、”atud”等等。<br>查询学生姓名以zx开头且长度为4的记录 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> sname <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;zx__&#x27;</span>;<br></code></pre></td></tr></table></figure><p>运行效果展示<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/f1a0ad4add958fb900fe959c293b01d6.png" alt="在这里插入图片描述"></p><p>查询学生姓名以g结尾且长度为4的记录 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> sname <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;___g&#x27;</span>;<br></code></pre></td></tr></table></figure><p>运行效果展示<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/7d86eaffa793ae07ebdf17ea9e37449d.png" alt="在这里插入图片描述"></p><h3 id="8-使用LIMIT限制查询结果的数量"><a href="#8-使用LIMIT限制查询结果的数量" class="headerlink" title="8.使用LIMIT限制查询结果的数量"></a>8.使用LIMIT限制查询结果的数量</h3><p>当执行查询数据时可能会返回很多条记录，而用户需要的数据可能只是其中的一条或者几条<br>查询学生表中年纪最小的3位同学 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> age <span class="hljs-keyword">asc</span> limit <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><p>运行效果展示<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/0efb402a8ab5c83f0f7e1674e0d81dd8.png" alt="在这里插入图片描述"></p><h3 id="9-使用GROUP-BY进行分组查询"><a href="#9-使用GROUP-BY进行分组查询" class="headerlink" title="9.使用GROUP BY进行分组查询"></a>9.使用GROUP BY进行分组查询</h3><p>GROUP BY 子句可像切蛋糕一样将表中的数据进行分组，再进行查询等操作。换言之，可通俗地理解为：通过GROUP BY将原来的表拆分成了几张小表。<br>接下来，我们通过一个例子开始学习GROUP BY，代码如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建数据库</span><br><span class="hljs-keyword">DROP</span> DATABASE IF <span class="hljs-keyword">EXISTS</span> mydb;<br><span class="hljs-keyword">CREATE</span> DATABASE mydb;<br>USE mydb;<br><br><span class="hljs-comment">-- 创建员工表</span><br><span class="hljs-keyword">CREATE TABLE</span> employee (<br>    id <span class="hljs-type">int</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>),<br>    salary <span class="hljs-type">int</span>,<br>    departmentnumber <span class="hljs-type">int</span><br>);<br><br><span class="hljs-comment">-- 向员工表中插入数据</span><br><span class="hljs-keyword">INSERT INTO</span> employee <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;tome&#x27;</span>,<span class="hljs-number">2000</span>,<span class="hljs-number">1001</span>); <br><span class="hljs-keyword">INSERT INTO</span> employee <span class="hljs-keyword">values</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;lucy&#x27;</span>,<span class="hljs-number">9000</span>,<span class="hljs-number">1002</span>); <br><span class="hljs-keyword">INSERT INTO</span> employee <span class="hljs-keyword">values</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;joke&#x27;</span>,<span class="hljs-number">5000</span>,<span class="hljs-number">1003</span>); <br><span class="hljs-keyword">INSERT INTO</span> employee <span class="hljs-keyword">values</span>(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;wang&#x27;</span>,<span class="hljs-number">3000</span>,<span class="hljs-number">1004</span>); <br><span class="hljs-keyword">INSERT INTO</span> employee <span class="hljs-keyword">values</span>(<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;chen&#x27;</span>,<span class="hljs-number">3000</span>,<span class="hljs-number">1001</span>); <br><span class="hljs-keyword">INSERT INTO</span> employee <span class="hljs-keyword">values</span>(<span class="hljs-number">6</span>,<span class="hljs-string">&#x27;yukt&#x27;</span>,<span class="hljs-number">7000</span>,<span class="hljs-number">1002</span>); <br><span class="hljs-keyword">INSERT INTO</span> employee <span class="hljs-keyword">values</span>(<span class="hljs-number">7</span>,<span class="hljs-string">&#x27;rett&#x27;</span>,<span class="hljs-number">6000</span>,<span class="hljs-number">1003</span>); <br><span class="hljs-keyword">INSERT INTO</span> employee <span class="hljs-keyword">values</span>(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;mujk&#x27;</span>,<span class="hljs-number">4000</span>,<span class="hljs-number">1004</span>); <br><span class="hljs-keyword">INSERT INTO</span> employee <span class="hljs-keyword">values</span>(<span class="hljs-number">9</span>,<span class="hljs-string">&#x27;poik&#x27;</span>,<span class="hljs-number">3000</span>,<span class="hljs-number">1001</span>);<br></code></pre></td></tr></table></figure><h4 id="9-1-GROUP-BY和聚合函数一起使用"><a href="#9-1-GROUP-BY和聚合函数一起使用" class="headerlink" title="9.1 GROUP BY和聚合函数一起使用"></a>9.1 GROUP BY和聚合函数一起使用</h4><p>统计各部门员工个数 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>), departmentnumber <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> departmentnumber;<br></code></pre></td></tr></table></figure><p>运行效果展示<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/b36d44a5213bd3e99ed44018bff868c9.png" alt="在这里插入图片描述"><br>统计部门编号大于1001的各部门员工个数 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>), departmentnumber <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> departmentnumber<span class="hljs-operator">&gt;</span><span class="hljs-number">1001</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> departmentnumber;<br></code></pre></td></tr></table></figure><p>运行效果展示<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/1070919733fe5e6959dc3225bfbdc101.png" alt="在这里插入图片描述"></p><h4 id="9-2-GROUP-BY和聚合函数以及HAVING一起使用"><a href="#9-2-GROUP-BY和聚合函数以及HAVING一起使用" class="headerlink" title="9.2 GROUP BY和聚合函数以及HAVING一起使用"></a>9.2 GROUP BY和聚合函数以及HAVING一起使用</h4><p>统计工资总和大于8000的部门 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(salary),departmentnumber <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> departmentnumber <span class="hljs-keyword">having</span> <span class="hljs-built_in">sum</span>(salary)<span class="hljs-operator">&gt;</span><span class="hljs-number">8000</span>;<br></code></pre></td></tr></table></figure><p>运行效果展示<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/22220f790dc2d4cfc335734068ff708d.png" alt="在这里插入图片描述"></p><h3 id="10-使用ORDER-BY对查询结果排序"><a href="#10-使用ORDER-BY对查询结果排序" class="headerlink" title="10.使用ORDER BY对查询结果排序"></a>10.使用ORDER BY对查询结果排序</h3><p>从表中査询出来的数据可能是无序的或者其排列顺序不是我们期望的。为此，我们可以使用ORDER BY对查询结果进行排序<br>其语法格式如下所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 字段名<span class="hljs-number">1</span>,字段名<span class="hljs-number">2</span>,…<br><span class="hljs-keyword">FROM</span> 表名<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> 字段名<span class="hljs-number">1</span> [<span class="hljs-keyword">ASC</span> 丨 <span class="hljs-keyword">DESC</span>],字段名<span class="hljs-number">2</span> [<span class="hljs-keyword">ASC</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">DESC</span>];<br></code></pre></td></tr></table></figure><p>在该语法中：字段名1、字段名2是查询结果排序的依据；参数 ASC表示按照升序排序，DESC表示按照降序排序；默认情况下，按照ASC方式排序。通常情况下，ORDER BY子句位于整个SELECT语句的末尾。<br>查询所有学生并按照年纪大小升序排列 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> age <span class="hljs-keyword">asc</span>;<br></code></pre></td></tr></table></figure><p>运行效果展示<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/718da4020ecaa8af2a8f45daf1d2fcd8.png" alt="在这里插入图片描述"><br>查询所有学生并按照年纪大小降序排列 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> age <span class="hljs-keyword">desc</span>;<br></code></pre></td></tr></table></figure><p>运行效果展示<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/823d18c46bda3635ff2435be70d6a4d7.png" alt="在这里插入图片描述"></p><h2 id="十二、别名设置"><a href="#十二、别名设置" class="headerlink" title="十二、别名设置"></a>十二、别名设置</h2><p>在査询数据时可为表和字段取別名，该别名代替表和字段的原名参与查询操作。<br><strong>操作的表事先已准备</strong></p><h3 id="1-为表取别名"><a href="#1-为表取别名" class="headerlink" title="1.为表取别名"></a>1.为表取别名</h3><p>在查询操作时，假若表名很长使用起来就不太方便，此时可为表取一个別名，用该别名来代替表的名称。语法格式如下所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 表名 [<span class="hljs-keyword">AS</span>] 表的别名 <span class="hljs-keyword">WHERE</span> .... ;<br></code></pre></td></tr></table></figure><p>将student改为stu查询整表 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">as</span> stu;<br></code></pre></td></tr></table></figure><p>运行效果展示<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/b06f352aaf326bf43b7f42b1849c86c1.png" alt="在这里插入图片描述"></p><h3 id="2-为字段取别名"><a href="#2-为字段取别名" class="headerlink" title="2.为字段取别名"></a>2.为字段取别名</h3><p>在查询操作时，假若字段名很长使用起来就不太方便，此时可该字段取一个別名，用该别名来代替字段的名称。语法格式如下所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 字段名<span class="hljs-number">1</span> [<span class="hljs-keyword">AS</span>] 别名<span class="hljs-number">1</span> , 字段名<span class="hljs-number">2</span> [<span class="hljs-keyword">AS</span>] 别名<span class="hljs-number">2</span> , ... <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">WHERE</span> ... ;<br></code></pre></td></tr></table></figure><p>将student中的name取别名为“姓名” 查询整表 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> name <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;姓名&#x27;</span>,id <span class="hljs-keyword">from</span> student;<br></code></pre></td></tr></table></figure><p>运行效果展示<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/fa2674367d272109efb5e0290586c780.png" alt="在这里插入图片描述"></p><h2 id="十三、表的关联关系"><a href="#十三、表的关联关系" class="headerlink" title="十三、表的关联关系"></a>十三、表的关联关系</h2><p>在实际开发中数据表之间存在着各种关联关系。在此，介绍MySQL中数据表的三种关联关系。<br><strong>多对一</strong><br>多对一(亦称为一对多)是数据表中最常见的一种关系。例如：员工与部门之间的关系，一个部门可以有多个员工；而一个员工不能属于多个部门只属于某个部门。在多对一的表关系 中，应将外键建在多的一方否则会造成数据的冗余。<br><strong>多对多</strong><br>多对多是数据表中常见的一种关系。例如：学生与老师之间的关系，一个学生可以有多个老师而且一个老师有多个学生。通常情况下，为了实现这种关系需要定义一张中间表(亦称为连接表)该表会存在两个外键分别参照老师表和学生表。<br><strong>一对一</strong><br>在开发过程中，一对一的关联关系在数据库中并不常见；因为以这种方式存储的信息通常会放在同一张表中。<br>接下来，我们来学习在一对多的关联关系中如果添加和删除数据。先准备一些测试数据，代码如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> student;<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> class;<br><br><span class="hljs-comment">-- 创建班级表</span><br><span class="hljs-keyword">CREATE TABLE</span> class(<br>    cid <span class="hljs-type">int</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT NULL</span> <span class="hljs-keyword">PRIMARY KEY</span>,<br>    cname <span class="hljs-type">varchar</span>(<span class="hljs-number">30</span>) <br>);<br><br><span class="hljs-comment">-- 创建学生表</span><br><span class="hljs-keyword">CREATE TABLE</span> student(<br>    sid <span class="hljs-type">int</span>(<span class="hljs-number">8</span>) <span class="hljs-keyword">NOT NULL</span> <span class="hljs-keyword">PRIMARY KEY</span>,<br>    sname <span class="hljs-type">varchar</span>(<span class="hljs-number">30</span>),<br>    classid <span class="hljs-type">int</span>(<span class="hljs-number">8</span>) <span class="hljs-keyword">NOT NULL</span><br>);<br><br><span class="hljs-comment">-- 为学生表添加外键约束</span><br><span class="hljs-keyword">ALTER TABLE</span> student <span class="hljs-keyword">ADD CONSTRAINT</span> fk_student_classid <span class="hljs-keyword">FOREIGN KEY</span>(classid) <span class="hljs-keyword">REFERENCES</span> class(cid);<br><span class="hljs-comment">-- 向班级表插入数据</span><br><span class="hljs-keyword">INSERT INTO</span> class(cid,cname)<span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;Java&#x27;</span>);<br><span class="hljs-keyword">INSERT INTO</span> class(cid,cname)<span class="hljs-keyword">VALUES</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;Python&#x27;</span>);<br><br><span class="hljs-comment">-- 向学生表插入数据</span><br><span class="hljs-keyword">INSERT INTO</span> student(sid,sname,classid)<span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;tome&#x27;</span>,<span class="hljs-number">1</span>);<br><span class="hljs-keyword">INSERT INTO</span> student(sid,sname,classid)<span class="hljs-keyword">VALUES</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;lucy&#x27;</span>,<span class="hljs-number">1</span>);<br><span class="hljs-keyword">INSERT INTO</span> student(sid,sname,classid)<span class="hljs-keyword">VALUES</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;lili&#x27;</span>,<span class="hljs-number">2</span>);<br><span class="hljs-keyword">INSERT INTO</span> student(sid,sname,classid)<span class="hljs-keyword">VALUES</span>(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;domi&#x27;</span>,<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><h3 id="1-关联查询"><a href="#1-关联查询" class="headerlink" title="1.关联查询"></a>1.关联查询</h3><p>查询Java班的所有学生 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> classid<span class="hljs-operator">=</span>(<span class="hljs-keyword">select</span> cid <span class="hljs-keyword">from</span> class <span class="hljs-keyword">where</span> cname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Java&#x27;</span>);<br></code></pre></td></tr></table></figure><p>运行效果展示<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/580ca7c49bde7a9376f5d7eed9caf8cd.png" alt="在这里插入图片描述"></p><h3 id="2-关于关联关系的删除数据"><a href="#2-关于关联关系的删除数据" class="headerlink" title="2.关于关联关系的删除数据"></a>2.关于关联关系的删除数据</h3><p>请从班级表中删除Java班级。在此，请注意：班级表和学生表之间存在关联关系；要删除Java班级，应该先删除学生表中与该班相关联的学生。否则，假若先删除Java班那么学生表中的cid就失去了关联<br>删除Java班 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> classid<span class="hljs-operator">=</span>(<span class="hljs-keyword">select</span> cid <span class="hljs-keyword">from</span> class <span class="hljs-keyword">where</span> cname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Java&#x27;</span>);<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> class <span class="hljs-keyword">where</span> cname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Java&#x27;</span>;<br></code></pre></td></tr></table></figure><p>运行效果展示<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/9574d7e3ba2f82431368779a615d2b4a.png" alt="在这里插入图片描述"></p><h2 id="十四、多表连接查询"><a href="#十四、多表连接查询" class="headerlink" title="十四、多表连接查询"></a>十四、多表连接查询</h2><h3 id="1-交叉连接查询"><a href="#1-交叉连接查询" class="headerlink" title="1.交叉连接查询"></a>1.交叉连接查询</h3><p>交叉连接返回的结果是被连接的两个表中所有数据行的笛卡儿积；比如：集合A&#x3D;{a,b}，集合B&#x3D;{0,1,2}，则集合A和B的笛卡尔积为{(a,0),(a,1),(a,2),(b,0),(b,1),(b,2)}。所以，交叉连接也被称为笛卡尔连接，其语法格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 表<span class="hljs-number">1</span> <span class="hljs-keyword">CROSS</span> <span class="hljs-keyword">JOIN</span> 表<span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p>在该语法中：CROSS JOIN用于连接两个要查询的表，通过该语句可以查询两个表中所有的数据组合。<br><strong>由于这个交叉连接查询在实际运用中没有任何意义，所以只做为了解即可</strong></p><h3 id="2-内连接查询"><a href="#2-内连接查询" class="headerlink" title="2.内连接查询"></a>2.内连接查询</h3><p>内连接(Inner Join)又称简单连接或自然连接，是一种非常常见的连接查询。内连接使用比较运算符对两个表中的数据进行比较并列出与连接条件匹配的数据行，组合成新的 记录。也就是说在内连接查询中只有满足条件的记录才能出现在查询结果中。其语法格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 查询字段<span class="hljs-number">1</span>,查询字段<span class="hljs-number">2</span>, ... <span class="hljs-keyword">FROM</span> 表<span class="hljs-number">1</span> [<span class="hljs-keyword">INNER</span>] <span class="hljs-keyword">JOIN</span> 表<span class="hljs-number">2</span> <span class="hljs-keyword">ON</span> 表<span class="hljs-number">1.</span>关系字段<span class="hljs-operator">=</span>表<span class="hljs-number">2.</span>关系字段<br></code></pre></td></tr></table></figure><p>在该语法中：INNER JOIN用于连接两个表，ON来指定连接条件；其中INNER可以省略。</p><p>准备数据，代码如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 若存在数据库mydb则删除</span><br><span class="hljs-keyword">DROP</span> DATABASE IF <span class="hljs-keyword">EXISTS</span> mydb;<br><span class="hljs-comment">-- 创建数据库mydb</span><br><span class="hljs-keyword">CREATE</span> DATABASE mydb;<br><span class="hljs-comment">-- 选择数据库mydb</span><br>USE mydb;<br><br><span class="hljs-comment">-- 创建部门表</span><br><span class="hljs-keyword">CREATE TABLE</span> department(<br>  did <span class="hljs-type">int</span> (<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT NULL</span> <span class="hljs-keyword">PRIMARY KEY</span>, <br>  dname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>)<br>);<br><br><span class="hljs-comment">-- 创建员工表</span><br><span class="hljs-keyword">CREATE TABLE</span> employee (<br>  eid <span class="hljs-type">int</span> (<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT NULL</span> <span class="hljs-keyword">PRIMARY KEY</span>, <br>  ename <span class="hljs-type">varchar</span> (<span class="hljs-number">20</span>), <br>  eage <span class="hljs-type">int</span> (<span class="hljs-number">2</span>), <br>  departmentid <span class="hljs-type">int</span> (<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT NULL</span><br>);<br><br><span class="hljs-comment">-- 向部门表插入数据</span><br><span class="hljs-keyword">INSERT INTO</span> department <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1001</span>,<span class="hljs-string">&#x27;财务部&#x27;</span>);<br><span class="hljs-keyword">INSERT INTO</span> department <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1002</span>,<span class="hljs-string">&#x27;技术部&#x27;</span>);<br><span class="hljs-keyword">INSERT INTO</span> department <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1003</span>,<span class="hljs-string">&#x27;行政部&#x27;</span>);<br><span class="hljs-keyword">INSERT INTO</span> department <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1004</span>,<span class="hljs-string">&#x27;生活部&#x27;</span>);<br><span class="hljs-comment">-- 向员工表插入数据</span><br><span class="hljs-keyword">INSERT INTO</span> employee <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">19</span>,<span class="hljs-number">1003</span>);<br><span class="hljs-keyword">INSERT INTO</span> employee <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-number">18</span>,<span class="hljs-number">1002</span>);<br><span class="hljs-keyword">INSERT INTO</span> employee <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;王五&#x27;</span>,<span class="hljs-number">20</span>,<span class="hljs-number">1001</span>);<br><span class="hljs-keyword">INSERT INTO</span> employee <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;赵六&#x27;</span>,<span class="hljs-number">20</span>,<span class="hljs-number">1004</span>);<br></code></pre></td></tr></table></figure><p>查询员工姓名及其所属部门名称 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> employee.ename,department.dname <span class="hljs-keyword">from</span> department <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> employee <span class="hljs-keyword">on</span> department.did<span class="hljs-operator">=</span>employee.departmentid;<br></code></pre></td></tr></table></figure><p>运行效果展示<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/b9268839ee1fe1e4ec70a1c7260e88c7.png" alt="在这里插入图片描述"></p><h3 id="3-外连接查询"><a href="#3-外连接查询" class="headerlink" title="3.外连接查询"></a>3.外连接查询</h3><p>在使用内连接查询时我们发现：返回的结果只包含符合查询条件和连接条件的数据。但是，有时还需要在返回查询结果中不仅包含符合条件的数据，而且还包括左表、右表或两个表中的所有数据，此时我们就需要使用外连接查询。外连接又分为左(外)连接和右(外)连接。其语法格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 查询字段<span class="hljs-number">1</span>,查询字段<span class="hljs-number">2</span>, ... <span class="hljs-keyword">FROM</span> 表<span class="hljs-number">1</span> <span class="hljs-keyword">LEFT</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">RIGHT</span> [<span class="hljs-keyword">OUTER</span>] <span class="hljs-keyword">JOIN</span> 表<span class="hljs-number">2</span> <span class="hljs-keyword">ON</span> 表<span class="hljs-number">1.</span>关系字段<span class="hljs-operator">=</span>表<span class="hljs-number">2.</span>关系字段 <span class="hljs-keyword">WHERE</span> 条件<br></code></pre></td></tr></table></figure><p>由此可见，外连接的语法格式和内连接非常相似，只不过使用的是LEFT [OUTER] JOIN、RIGHT [OUTER] JOIN关键字。其中，关键字左边的表被称为左表，关键字右边的表被称为右表；OUTER可以省略。<br>在使用左(外)连接和右(外)连接查询时，查询结果是不一致的，具体如下：<br><strong>1、LEFT [OUTER] JOIN 左(外)连接：返回包括左表中的所有记录和右表中符合连接条件的记录。<br>2、RIGHT [OUTER] JOIN 右(外)连接：返回包括右表中的所有记录和左表中符合连接条件的记录。</strong></p><p>先准备数据，代码如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 若存在数据库mydb则删除</span><br><span class="hljs-keyword">DROP</span> DATABASE IF <span class="hljs-keyword">EXISTS</span> mydb;<br><span class="hljs-comment">-- 创建数据库mydb</span><br><span class="hljs-keyword">CREATE</span> DATABASE mydb;<br><span class="hljs-comment">-- 选择数据库mydb</span><br>USE mydb;<br><br><span class="hljs-comment">-- 创建班级表</span><br><span class="hljs-keyword">CREATE TABLE</span> class(<br>  cid <span class="hljs-type">int</span> (<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT NULL</span> <span class="hljs-keyword">PRIMARY KEY</span>, <br>  cname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>)<br>);<br><br><span class="hljs-comment">-- 创建学生表</span><br><span class="hljs-keyword">CREATE TABLE</span> student (<br>  sid <span class="hljs-type">int</span> (<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT NULL</span> <span class="hljs-keyword">PRIMARY KEY</span>, <br>  sname <span class="hljs-type">varchar</span> (<span class="hljs-number">20</span>), <br>  sage <span class="hljs-type">int</span> (<span class="hljs-number">2</span>), <br>  classid <span class="hljs-type">int</span> (<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT NULL</span><br>);<br><span class="hljs-comment">-- 向班级表插入数据</span><br><span class="hljs-keyword">INSERT INTO</span> class <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1001</span>,<span class="hljs-string">&#x27;Java&#x27;</span>);<br><span class="hljs-keyword">INSERT INTO</span> class <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1002</span>,<span class="hljs-string">&#x27;C++&#x27;</span>);<br><span class="hljs-keyword">INSERT INTO</span> class <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1003</span>,<span class="hljs-string">&#x27;Python&#x27;</span>);<br><span class="hljs-keyword">INSERT INTO</span> class <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1004</span>,<span class="hljs-string">&#x27;PHP&#x27;</span>);<br><br><span class="hljs-comment">-- 向学生表插入数据</span><br><span class="hljs-keyword">INSERT INTO</span> student <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">20</span>,<span class="hljs-number">1001</span>);<br><span class="hljs-keyword">INSERT INTO</span> student <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-number">21</span>,<span class="hljs-number">1002</span>);<br><span class="hljs-keyword">INSERT INTO</span> student <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;王五&#x27;</span>,<span class="hljs-number">24</span>,<span class="hljs-number">1002</span>);<br><span class="hljs-keyword">INSERT INTO</span> student <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;赵六&#x27;</span>,<span class="hljs-number">23</span>,<span class="hljs-number">1003</span>);<br><span class="hljs-keyword">INSERT INTO</span> student <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;Jack&#x27;</span>,<span class="hljs-number">22</span>,<span class="hljs-number">1009</span>);<br></code></pre></td></tr></table></figure><p><em>准备这组数据有一定的特点，为的是让大家直观的看出左连接与右连接的不同之处<br>1、班级编号为1004的PHP班级没有学生<br>2、学号为5的学生Jack班级编号为1009，该班级编号并不在班级表中</em></p><h4 id="3-1-左（外）连接查询"><a href="#3-1-左（外）连接查询" class="headerlink" title="3.1 左（外）连接查询"></a>3.1 左（外）连接查询</h4><p>左(外)连接的结果包括LEFT JOIN子句中指定的左表的所有记录，以及所有满足连接条件的记录。如果左表的某条记录在右表中不存在则在右表中显示为空。<br>查询每个班的班级ID、班级名称及该班的所有学生的名字 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> class.cid,class.cname,student.sname <span class="hljs-keyword">from</span> class <span class="hljs-keyword">left</span> <span class="hljs-keyword">outer</span> <span class="hljs-keyword">join</span> student <span class="hljs-keyword">on</span> class.cid<span class="hljs-operator">=</span>student.classid;<br></code></pre></td></tr></table></figure><p>运行效果展示<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/1aa93ef85390eaa0e11bbb16fefeedb6.png" alt="在这里插入图片描述"><br>展示结果分析：<br>1、分别找出Java班、C++班、Python班的学生<br>2、右表的Jack不满足查询条件故其没有出现在查询结果中<br>3、虽然左表的PHP班没有学生，但是任然显示了PHP的信息；但是，它对应的学生名字为NULL</p><h4 id="3-2-右（外）连接查询"><a href="#3-2-右（外）连接查询" class="headerlink" title="3.2 右（外）连接查询"></a>3.2 右（外）连接查询</h4><p>右(外)连接的结果包括RIGHT JOIN子句中指定的右表的所有记录，以及所有满足连接条件的记录。如果右表的某条记录在左表中没有匹配，则左表将返回空值。<br>查询每个班的班级ID、班级名称及该班的所有学生的名字 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> class.cid,class.cname,student.sname <span class="hljs-keyword">from</span> class <span class="hljs-keyword">right</span> <span class="hljs-keyword">outer</span> <span class="hljs-keyword">join</span> student <span class="hljs-keyword">on</span> class.cid<span class="hljs-operator">=</span>student.classid;<br></code></pre></td></tr></table></figure><p>运行效果展示<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/dd82b94cb3886aaa58c04a9cf89c38eb.png" alt="在这里插入图片描述"><br>展示结果分析：<br>1、分别找出Java班、C++班、Python班的学生<br>2、左表的PHP班不满足查询条件故其没有出现在查询结果中<br>3、虽然右表的jack没有对应班级，但是任然显示王跃跃的信息；但是，它对应的班级以及班级编号均为NULL</p><h2 id="十五、子查询"><a href="#十五、子查询" class="headerlink" title="十五、子查询"></a>十五、子查询</h2><p>子查询是指一个查询语句嵌套在另一个查询语句内部的查询；该查询语句可以嵌套在一个 SELECT、SELECT…INTO、INSERT…INTO等语句中。在执行查询时，首先会执行子查询中的语句，再将返回的结果作为外层查询的过滤条件。在子査询中通常可以使用比较运算符和IN、EXISTS、ANY、ALL等关键字。</p><p>准备数据，代码如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> student;<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> class;<br><br><span class="hljs-comment">-- 创建班级表</span><br><span class="hljs-keyword">CREATE TABLE</span> class(<br>  cid <span class="hljs-type">int</span> (<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT NULL</span> <span class="hljs-keyword">PRIMARY KEY</span>, <br>  cname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>)<br>);<br><br><span class="hljs-comment">-- 创建学生表</span><br><span class="hljs-keyword">CREATE TABLE</span> student (<br>  sid <span class="hljs-type">int</span> (<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT NULL</span> <span class="hljs-keyword">PRIMARY KEY</span>, <br>  sname <span class="hljs-type">varchar</span> (<span class="hljs-number">20</span>), <br>  sage <span class="hljs-type">int</span> (<span class="hljs-number">2</span>), <br>  classid <span class="hljs-type">int</span> (<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT NULL</span><br>);<br><br><span class="hljs-comment">-- 向班级表插入数据</span><br><span class="hljs-keyword">INSERT INTO</span> class <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1001</span>,<span class="hljs-string">&#x27;Java&#x27;</span>);<br><span class="hljs-keyword">INSERT INTO</span> class <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1002</span>,<span class="hljs-string">&#x27;C++&#x27;</span>);<br><span class="hljs-keyword">INSERT INTO</span> class <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1003</span>,<span class="hljs-string">&#x27;Python&#x27;</span>);<br><span class="hljs-keyword">INSERT INTO</span> class <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1004</span>,<span class="hljs-string">&#x27;PHP&#x27;</span>);<br><span class="hljs-keyword">INSERT INTO</span> class <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1005</span>,<span class="hljs-string">&#x27;Android&#x27;</span>);<br><br><span class="hljs-comment">-- 向学生表插入数据</span><br><span class="hljs-keyword">INSERT INTO</span> student <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">20</span>,<span class="hljs-number">1001</span>);<br><span class="hljs-keyword">INSERT INTO</span> student <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-number">21</span>,<span class="hljs-number">1002</span>);<br><span class="hljs-keyword">INSERT INTO</span> student <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;王五&#x27;</span>,<span class="hljs-number">24</span>,<span class="hljs-number">1003</span>);<br><span class="hljs-keyword">INSERT INTO</span> student <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;赵六&#x27;</span>,<span class="hljs-number">23</span>,<span class="hljs-number">1004</span>);<br><span class="hljs-keyword">INSERT INTO</span> student <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;小明&#x27;</span>,<span class="hljs-number">21</span>,<span class="hljs-number">1001</span>);<br><span class="hljs-keyword">INSERT INTO</span> student <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">6</span>,<span class="hljs-string">&#x27;小红&#x27;</span>,<span class="hljs-number">26</span>,<span class="hljs-number">1001</span>);<br><span class="hljs-keyword">INSERT INTO</span> student <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">7</span>,<span class="hljs-string">&#x27;小亮&#x27;</span>,<span class="hljs-number">27</span>,<span class="hljs-number">1002</span>);<br></code></pre></td></tr></table></figure><h3 id="1-带比较运算符的子查询"><a href="#1-带比较运算符的子查询" class="headerlink" title="1.带比较运算符的子查询"></a>1.带比较运算符的子查询</h3><p>比较运算符前面我们提到过得，就是&gt;、&lt;、&#x3D;、&gt;&#x3D;、&lt;&#x3D;、!&#x3D;等<br>查询张三同学所在班级的信息 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> class <span class="hljs-keyword">where</span> cid<span class="hljs-operator">=</span>(<span class="hljs-keyword">select</span> classid <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> sname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;张三&#x27;</span>);<br></code></pre></td></tr></table></figure><p>运行效果展示<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/530fceb66a0d748b5e3d0ca014814b63.png" alt="在这里插入图片描述"><br>查询比张三同学所在班级编号还大的班级的信息 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> class <span class="hljs-keyword">where</span> cid<span class="hljs-operator">&gt;</span>(<span class="hljs-keyword">select</span> classid <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> sname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;张三&#x27;</span>);<br></code></pre></td></tr></table></figure><p>运行效果展示<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/1e86ebedb372666ce5f5ba3693b66f33.png" alt="在这里插入图片描述"></p><h3 id="2-带EXISTS关键字的子查询"><a href="#2-带EXISTS关键字的子查询" class="headerlink" title="2.带EXISTS关键字的子查询"></a>2.带EXISTS关键字的子查询</h3><p>EXISTS关键字后面的参数可以是任意一个子查询， 它不产生任何数据只返回TRUE或FALSE。当返回值为TRUE时外层查询才会 执行<br>假如王五同学在学生表中则从班级表查询所有班级信息 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> class <span class="hljs-keyword">where</span> <span class="hljs-keyword">exists</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> sname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;王五&#x27;</span>);<br></code></pre></td></tr></table></figure><p>运行效果展示<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/8d8d825bb79a61d763a0a05aa11090a9.png" alt="在这里插入图片描述"></p><h3 id="3-带ANY关键字的子查询"><a href="#3-带ANY关键字的子查询" class="headerlink" title="3.带ANY关键字的子查询"></a>3.带ANY关键字的子查询</h3><p>ANY关键字表示满足其中任意一个条件就返回一个结果作为外层查询条件。</p><p>查询比任一学生所属班级号还大的班级编号 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> class <span class="hljs-keyword">where</span> cid <span class="hljs-operator">&gt;</span> <span class="hljs-keyword">any</span> (<span class="hljs-keyword">select</span> classid <span class="hljs-keyword">from</span> student);<br></code></pre></td></tr></table></figure><p>运行效果展示<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/bda120f46cf10178c098a8c9b636435b.png" alt="在这里插入图片描述"></p><h3 id="4-带ALL关键字的子查询"><a href="#4-带ALL关键字的子查询" class="headerlink" title="4.带ALL关键字的子查询"></a>4.带ALL关键字的子查询</h3><p>ALL关键字与ANY有点类似，只不过带ALL关键字的子査询返回的结果需同时满足所有内层査询条件。</p><p>查询比所有学生所属班级号还大的班级编号 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> class <span class="hljs-keyword">where</span> cid <span class="hljs-operator">&gt;</span> <span class="hljs-keyword">all</span> (<span class="hljs-keyword">select</span> classid <span class="hljs-keyword">from</span> student);<br></code></pre></td></tr></table></figure><p>运行效果展示<br><img src="/2020/05/23/MySQL%E8%AF%A6%E8%A7%A3/18f275e032225b0c000b2145b819bfd3.png" alt="在这里插入图片描述"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>重要</strong>（从关键字分析）：<br><strong>查询语句的书写顺序和执行顺序</strong><br>select &#x3D;&#x3D;&#x3D;&gt; from &#x3D;&#x3D;&#x3D;&gt; where &#x3D;&#x3D;&#x3D;&gt; group by &#x3D;&#x3D;&#x3D;&gt; having &#x3D;&#x3D;&#x3D;&gt; order by &#x3D;&#x3D;&#x3D;&gt; limit<br><strong>查询语句的执行顺序</strong><br>from &#x3D;&#x3D;&#x3D;&gt; where &#x3D;&#x3D;&#x3D;&gt; group by &#x3D;&#x3D;&#x3D;&gt; having &#x3D;&#x3D;&#x3D;&gt; select &#x3D;&#x3D;&#x3D;&gt; order by &#x3D;&#x3D;&#x3D;&gt; limi</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>数据库</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java常用算法</title>
    <link href="/2020/05/22/Java%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/"/>
    <url>/2020/05/22/Java%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>Java常用的排序算法有以下几种：</p><ol><li>冒泡排序（Bubble Sort）</li><li>选择排序（Selection Sort）</li><li>插入排序（Insertion Sort）</li><li>希尔排序（Shell Sort）</li><li>归并排序（Merge Sort）</li><li>快速排序（Quick Sort）</li><li>堆排序（Heap Sort）</li><li>计数排序（Counting Sort）</li><li>桶排序（Bucket Sort）</li><li>基数排序（Radix Sort）</li></ol><p>这些排序算法都有各自的优缺点，应根据具体情况选择适合的算法。</p><h1 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a><strong>算法复杂度</strong></h1><table><thead><tr><th>排序算法</th><th>时间复杂度（平均）</th><th>时间复杂度（最坏）</th><th>时间复杂度（最好）</th><th>空间复杂度</th><th>稳定性</th></tr></thead><tbody><tr><td>冒泡排序</td><td>O(n^2)</td><td>O(n^2)</td><td>O(n)</td><td>O(1)</td><td>稳定</td></tr><tr><td>选择排序</td><td>O(n^2)</td><td>O(n^2)</td><td>O(n^2)</td><td>O(1)</td><td>不稳定</td></tr><tr><td>插入排序</td><td>O(n^2)</td><td>O(n^2)</td><td>O(n)</td><td>O(1)</td><td>稳定</td></tr><tr><td>希尔排序</td><td>O(n log n)</td><td>O(n^2)</td><td>O(n)</td><td>O(1)</td><td>不稳定</td></tr><tr><td>归并排序</td><td>O(n log n)</td><td>O(n log n)</td><td>O(n log n)</td><td>O(n)</td><td>稳定</td></tr><tr><td>快速排序</td><td>O(n log n)</td><td>O(n^2)</td><td>O(n log n)</td><td>O(log n)</td><td>不稳定</td></tr><tr><td>堆排序</td><td>O(n log n)</td><td>O(n log n)</td><td>O(n log n)</td><td>O(1)</td><td>不稳定</td></tr><tr><td>计数排序</td><td>O(n+k)</td><td>O(n+k)</td><td>O(n+k)</td><td>O(k)</td><td>稳定</td></tr><tr><td>桶排序</td><td>O(n^2)</td><td>O(n^2)</td><td>O(n)</td><td>O(n+k)</td><td>稳定</td></tr><tr><td>基数排序</td><td>O(n*k)</td><td>O(n*k)</td><td>O(n*k)</td><td>O(n+k)</td><td>稳定</td></tr></tbody></table><p>其中，n表示输入元素的数量，k表示元素的取值范围大小。</p><ul><li>稳定：如果a原本在b前面，而a&#x3D;b，排序之后a仍然在b的前面。</li><li>不稳定：如果a原本在b的前面，而a&#x3D;b，排序之后 a 可能会出现在 b 的后面。</li><li>时间复杂度：对排序数据的总的操作次数。反映当n变化时，操作次数呈现什么规律。</li><li>空间复杂度：是指算法在计算机 内执行时所需存储空间的度量，它也是数据规模n的函数。</li></ul><h4 id="1-冒泡排序（Bubble-Sort）"><a href="#1-冒泡排序（Bubble-Sort）" class="headerlink" title="1. 冒泡排序（Bubble Sort）"></a>1. <a href="https://so.csdn.net/so/search?q=%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F&spm=1001.2101.3001.7020">冒泡排序</a>（Bubble Sort）</h4><p>冒泡排序是一种简单的排序算法，它重复地遍历要排序的数列，一次比较两个元素，如果它们的顺序错误就交换位置。这个过程持续对数列的末尾进行，直到整个数列都排序完成。</p><p><img src="/2020/05/22/Java%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/3b23700b67d89314402e1c74032b7930.gif" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.jupiter.api.Assertions;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Bubble</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bubbleSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> arr.length;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; n - i - <span class="hljs-number">1</span>; j++) &#123;<br>                <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>                    <span class="hljs-comment">// 交换arr[j+1]和arr[j]</span><br>                    <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[j];<br>                    arr[j] = arr[j + <span class="hljs-number">1</span>];<br>                    arr[j + <span class="hljs-number">1</span>] = temp;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>&#125;;<br>        <span class="hljs-type">int</span>[] expectedArr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>&#125;;<br>        Bubble.bubbleSort(arr);<br>        System.out.println(<span class="hljs-string">&quot;arr = &quot;</span> + Arrays.toString(arr));<br>        Assertions.assertArrayEquals(expectedArr, arr);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的代码中， bubble[Sort 函数](<a href="https://so.csdn.net/so/search?q=Sort">https://so.csdn.net/so/search?q=Sort</a> 函数&amp;spm&#x3D;1001.2101.3001.7020)接受一个整数数组作为输入，并使用冒泡排序算法对其进行排序。外部循环运行 n - 1 次，其中 n 是数组的长度，内部循环运行 n - i - 1 次，其中 i 是外部循环的当前迭代次数。这是因为在每次外部循环迭代后，最大的元素肯定在数组的末尾，因此我们不需要再次比较它。</p><p>在内部循环中，我们比较相邻的元素并交换它们，如果它们的顺序不正确。这样，最大的元素就“冒泡”到数组的末尾。在每次遍历数组后，最大的元素都处于它的最终位置，因此我们可以将内部循环的大小减少1。</p><p>冒泡排序的时间复杂度为O(n^2)，这使得它在大型列表和实际应用中效率低下。但是，由于其简单性，它是向初学者教授排序的好算法。</p><h4 id="2-选择排序（Selection-Sort）"><a href="#2-选择排序（Selection-Sort）" class="headerlink" title="2. 选择排序（Selection Sort）"></a>2. 选择排序（Selection Sort）</h4><p>选择排序是一种简单的排序算法，它的基本思想是每次从待排序的元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的元素排完。</p><p><img src="/2020/05/22/Java%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/4dfae97274c4aa4b5c632947a9efe6e3.gif" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.jupiter.api.Assertions;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Selection</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectionSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> arr.length;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">minIndex</span> <span class="hljs-operator">=</span> i;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt; n; j++) &#123;<br>                <span class="hljs-keyword">if</span> (arr[j] &lt; arr[minIndex]) &#123;<br>                    minIndex = j;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 交换arr[i]和arr[minIndex]</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[i];<br>            arr[i] = arr[minIndex];<br>            arr[minIndex] = temp;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>&#125;;<br>        <span class="hljs-type">int</span>[] expectedArr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>&#125;;<br>        Selection.selectionSort(arr);<br>        System.out.println(<span class="hljs-string">&quot;arr = &quot;</span> + Arrays.toString(arr));<br>        Assertions.assertArrayEquals(expectedArr, arr);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>在上面的代码中， selectionSort 函数接受一个整数数组作为输入，并使用选择排序算法对其进行排序。外部循环运行 n - 1 次，其中 n 是数组的长度。在内部循环中，我们找到未排序部分中的最小元素，并将其索引存储在 minIndex 变量中。然后，我们将最小元素与已排序部分的末尾交换。在每次外部循环迭代后，已排序部分的长度增加1，未排序部分的长度减少1。</p></blockquote><p>选择排序的时间复杂度为O(n^2)，这使得它在大型列表和实际应用中效率低下。但是，由于其简单性，它是向初学者教授排序的好算法。</p><h4 id="3-插入排序（Insertion-Sort）"><a href="#3-插入排序（Insertion-Sort）" class="headerlink" title="3. 插入排序（Insertion Sort）"></a>3. 插入排序（Insertion Sort）</h4><p>插入排序是一种简单的排序算法，它的基本思想是将一个记录插入到已经排好序的有序表中，从而得到一个新的、记录数增1的有序表。</p><p><img src="/2020/05/22/Java%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/a1bb8a3622d1703f09f743bcf11458b1.gif" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.jupiter.api.Assertions;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Insertion</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertionSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> arr.length;<br>        <span class="hljs-comment">// 外部循环从第二个元素开始，</span><br>        <span class="hljs-comment">// 因为我们将第一个元素视为已排序部分</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> arr[i];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i - <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">// 将当前值key和前面的值进行比较，</span><br>            <span class="hljs-comment">// 如果前面的值&gt;key 则将值往后移1位</span><br>            <span class="hljs-keyword">while</span> (j &gt;= <span class="hljs-number">0</span> &amp;&amp; arr[j] &gt; key) &#123;<br>                arr[j + <span class="hljs-number">1</span>] = arr[j];<br>                j--;<br>            &#125;<br>            <span class="hljs-comment">// 在不小当前值key的位置，插入当前值key</span><br>            arr[j + <span class="hljs-number">1</span>] = key;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>&#125;;<br>        <span class="hljs-type">int</span>[] expectedArr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>&#125;;<br>        Insertion.insertionSort(arr);<br>        System.out.println(<span class="hljs-string">&quot;arr = &quot;</span> + Arrays.toString(arr));<br>        Assertions.assertArrayEquals(expectedArr, arr);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>在上面的代码中， insertionSort 函数接受一个整数数组作为输入，并使用插入排序算法对其进行排序。外部循环从第二个元素开始，因为我们将第一个元素视为已排序部分。在内部循环中，我们将要插入的元素与已排序部分的元素进行比较，如果要插入的元素小于已排序部分的元素，则将已排序部分的元素向右移动一位，以便为要插入的元素腾出空间。在内部循环结束后，我们将要插入的元素插入到正确的位置。在每次外部循环迭代后，我们可以确保前i个元素已经被排序。</p></blockquote><p>插入排序的时间复杂度为O(n^2)，这使得它在大型列表和实际应用中效率低下。但是，插入排序的实现非常简单，它在小型列表上的性能非常好。</p><h4 id="4-希尔排序（Shell-Sort）"><a href="#4-希尔排序（Shell-Sort）" class="headerlink" title="4. 希尔排序（Shell Sort）"></a>4. 希尔排序（Shell Sort）</h4><p>希尔排序是一种改进的插入排序算法，它的基本思想是将待排序的数组按照一定的间隔进行分组，对每组使用插入排序算法进行排序，然后缩小间隔，再对分组进行排序，直到间隔为1为止。</p><p>逐渐减小间隔大小的方法有助于提高排序过程的效率，可以减少比较和交换的次数。这是希尔排序算法的一个关键特点。</p><p><img src="/2020/05/22/Java%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/963ec307f7e563f6fa1bcd043a7de758.gif" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.jupiter.api.Assertions;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shell</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shellSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> arr.length;<br>        <span class="hljs-comment">// 初始化间隔（gap）的值，它决定了每次迭代中子数组的大小</span><br>        <span class="hljs-comment">// 从数组长度的一半开始作为初始间隔值，gap就是分割的子数组数量</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">gap</span> <span class="hljs-operator">=</span> n / <span class="hljs-number">2</span>; gap &gt; <span class="hljs-number">0</span>; gap /= <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-comment">// 循环从间隔值开始，遍历数组直到数组的末尾；代表循环所有的子数组</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> gap; i &lt; n; i++) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[i];<br>                <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i;<br>                <span class="hljs-comment">// 将当前元素 arr[j] 的值替换为前一个元素 arr[j - gap] 的值。</span><br>                <span class="hljs-comment">// 通过这个操作，将较大的元素向后移动，为当前元素腾出位置</span><br>                <span class="hljs-keyword">while</span> (j &gt;= gap &amp;&amp; arr[j - gap] &gt; temp) &#123;<br>                    arr[j] = arr[j - gap];<br>                    j -= gap;<br>                &#125;<br>                arr[j] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>&#125;;<br>        <span class="hljs-type">int</span>[] expectedArr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>&#125;;<br>        Shell.shellSort(arr);<br>        System.out.println(<span class="hljs-string">&quot;arr = &quot;</span> + Arrays.toString(arr));<br>        Assertions.assertArrayEquals(expectedArr, arr);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>在上面的代码中， shellSort 函数接受一个整数数组作为输入，并使用希尔排序算法对其进行排序。外部循环使用一个间隔变量 gap ，初始值为数组长度的一半，每次循环将 gap 除以2，直到 gap 为1。内部循环从第 gap 个元素开始，将要插入的元素与已排序部分的元素进行比较，如果要插入的元素小于已排序部分的元素，则将已排序部分的元素向右移动 gap 个位置，以便为要插入的元素腾出空间。在内部循环结束后，我们将要插入的元素插入到正确的位置。在每次外部循环迭代后，我们可以确保数组的前 gap 个元素已经被排序。</p></blockquote><p>希尔排序的时间复杂度为O(n^2)，但实际上它的性能比插入排序要好得多，特别是在大型列表上。希尔排序的性能取决于间隔序列的选择，但是目前还没有一种最优的间隔序列。</p><h4 id="5-归并排序（Merge-Sort）"><a href="#5-归并排序（Merge-Sort）" class="headerlink" title="5. 归并排序（Merge Sort）"></a>5. 归并排序（Merge Sort）</h4><p>归并排序是一种分治思想的排序算法，它的基本思想是将待排序的数组分成若干个子序列，每个子序列都是有序的，然后再将子序列合并成一个有序的数组。</p><p><img src="/2020/05/22/Java%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/b2eb84f705b5744de3da953f5b784ce9.gif" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.jupiter.api.Assertions;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Merge</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>&#125;;<br>        <span class="hljs-type">int</span>[] expectedArr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>&#125;;<br>        Merge.mergeSort(arr, <span class="hljs-number">0</span>, arr.length - <span class="hljs-number">1</span>);<br>        System.out.println(<span class="hljs-string">&quot;arr = &quot;</span> + Arrays.toString(arr));<br>        Assertions.assertArrayEquals(expectedArr, arr);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mergeSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span> &#123;<br>        <span class="hljs-keyword">if</span> (left &lt; right) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (left + right) / <span class="hljs-number">2</span>;<br>            mergeSort(arr, left, mid);<br>            mergeSort(arr, mid + <span class="hljs-number">1</span>, right);<br>            merge(arr, left, mid, right);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">merge</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> mid, <span class="hljs-type">int</span> right)</span> &#123;<br>        <span class="hljs-comment">// 子数组 L 的大小</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> mid - left + <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// 右子数组 R 的大小</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> right - mid;<br>        <span class="hljs-comment">// 创建两个临时数组 L 和 R ，分别用来存储左子数组和右子数组的元素</span><br>        <span class="hljs-type">int</span>[] L = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n1];<br>        <span class="hljs-type">int</span>[] R = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n2];<br>        <span class="hljs-comment">// 使用 for 循环将原始数组 arr 中的元素复制到临时数组 L 和 R 中，分别从 left 和 mid + 1 开始</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n1; i++) &#123;<br>            L[i] = arr[left + i];<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; n2; j++) &#123;<br>            R[j] = arr[mid + <span class="hljs-number">1</span> + j];<br>        &#125;<br>        <span class="hljs-comment">// 初始化三个变量 i、j和k，分别指向数组 L 、R 和原始数组 arr 的起始位置</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>, k = left;<br>        <span class="hljs-comment">// 使用 while 循环，比较 L 和 R 的元素，并将较小的元素放回原始数组 arr 中</span><br>        <span class="hljs-keyword">while</span> (i &lt; n1 &amp;&amp; j &lt; n2) &#123;<br>            <span class="hljs-keyword">if</span> (L[i] &lt;= R[j]) &#123;<br>                arr[k] = L[i];<br>                i++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                arr[k] = R[j];<br>                j++;<br>            &#125;<br>            k++;<br>        &#125;<br>        <span class="hljs-comment">// 当 L 或 R 中的元素用完时，将剩余的元素依次放回原始数组 arr 中</span><br>        <span class="hljs-keyword">while</span> (i &lt; n1) &#123;<br>            arr[k] = L[i];<br>            i++;<br>            k++;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (j &lt; n2) &#123;<br>            arr[k] = R[j];<br>            j++;<br>            k++;<br>        &#125;<br>        <span class="hljs-comment">// merge 方法执行完毕后，两个子数组范围内的元素已经按照从小到大的顺序合并到了原始数组 arr 中</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>在上面的代码中， mergeSort 函数接受一个整数数组、一个左索引和一个右索引作为输入，并使用归并排序算法对指定范围内的数组元素进行排序。该函数使用递归将数组分成两个子数组，然后对它们进行排序，并最后将它们合并成一个有序数组。 merge 函数用于将两个有序数组合并成一个有序数组。它创建两个临时数组 L 和 R ，将左子数组的元素存储在 L 中，将右子数组的元素存储在 R 中，然后将它们合并成一个有序数组并存储在原始数组中。</p></blockquote><p>归并排序的时间复杂度为O(nlogn)，它的性能比冒泡排序和插入排序要好得多，特别是在大型列表上。</p><h4 id="6-快速排序（Quick-Sort）"><a href="#6-快速排序（Quick-Sort）" class="headerlink" title="6. 快速排序（Quick Sort）"></a>6. 快速排序（Quick Sort）</h4><p>快速排序是一种分治思想的排序算法，它的基本思想是通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分记录的关键字小，然后再分别对这两部分记录继续进行排序，以达到整个序列有序的目的。</p><p><img src="/2020/05/22/Java%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/39c33aa4e8f8e96e0ef9348763ec1eec.gif" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.jupiter.api.Assertions;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Quick</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>&#125;;<br>        <span class="hljs-type">int</span>[] expectedArr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>&#125;;<br>        Quick.quickSort(arr, <span class="hljs-number">0</span>, arr.length - <span class="hljs-number">1</span>);<br>        System.out.println(<span class="hljs-string">&quot;arr = &quot;</span> + Arrays.toString(arr));<br>        Assertions.assertArrayEquals(expectedArr, arr);<br>    &#125;<br>    <span class="hljs-comment">// 接收一个数组 arr，一个低索引 low ，和一个高索引 high 作为参数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quickSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> low, <span class="hljs-type">int</span> high)</span> &#123;<br>        <span class="hljs-comment">// 检查 low 是否小于 high。如果不是，则意味着数组只有一个元素或为空，因此不需要排序</span><br>        <span class="hljs-keyword">if</span> (low &lt; high) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">pivot</span> <span class="hljs-operator">=</span> partition(arr, low, high);<br>            quickSort(arr, low, pivot - <span class="hljs-number">1</span>);<br>            quickSort(arr, pivot + <span class="hljs-number">1</span>, high);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 取最后一个元素作为枢轴元素，将较小的元素放在左边，较大的元素放在右边</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> arr 输入数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> low 低位索引</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> high 高位索引</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 枢轴所在位置</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">partition</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> low, <span class="hljs-type">int</span> high)</span> &#123;<br>        <span class="hljs-comment">// 将最后一个元素作为枢轴元素（ arr[high] ）</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">pivot</span> <span class="hljs-operator">=</span> arr[high];<br>        <span class="hljs-comment">// 将 i 初始化为 low - 1，用于跟踪较小元素的索引</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> low - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> low; j &lt; high; j++) &#123;<br>            <span class="hljs-keyword">if</span> (arr[j] &lt; pivot) &#123;<br>                <span class="hljs-comment">// 如果当前元素 arr[j] 小于枢轴元素，则增加 i 并交换 arr[i] 和 arr[j]</span><br>                <span class="hljs-comment">// 较小元素索引+1</span><br>                i++;<br>                <span class="hljs-comment">// 将当前元素 arr[j] 放在较小元素索引位置</span><br>                <span class="hljs-comment">// 将较小元素放在前面</span><br>                swap(arr, i, j);<br>            &#125;<br>            <span class="hljs-comment">// 其他情况，则较小元素索引没有增加，说明当前元素应该放在右边</span><br>        &#125;<br>        <span class="hljs-comment">// 将枢轴元素（ arr[high] ）与索引 i + 1 处的元素交换。</span><br>        <span class="hljs-comment">// 确保枢轴元素左边是较小元素，右边是较大元素</span><br>        swap(arr, i + <span class="hljs-number">1</span>, high);<br>        <span class="hljs-comment">// 将 i + 1 作为枢轴索引返回</span><br>        <span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[i];<br>        arr[i] = arr[j];<br>        arr[j] = temp;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>在上面的代码中， quickSort 函数接受一个整数数组、一个低索引和一个高索引作为输入，并使用快速排序算法对指定范围内的数组元素进行排序。该函数使用递归将数组分成两个子数组，然后对它们进行排序，并最后将它们合并成一个有序数组。 partition 函数用于将数组分成两个子数组。它选择数组中的最后一个元素作为基准元素，然后将小于基准元素的元素放在左边，将大于基准元素的元素放在右边，并返回基准元素的索引。 swap 函数用于交换数组中的两个元素。</p></blockquote><p>快速排序的时间复杂度为O(nlogn)，它的性能比冒泡排序和插入排序要好得多，特别是在大型列表上。</p><h4 id="7-堆排序（Heap-Sort）"><a href="#7-堆排序（Heap-Sort）" class="headerlink" title="7. 堆排序（Heap Sort）"></a>7. 堆排序（Heap Sort）</h4><p>堆排序是一种树形选择排序算法，它的基本思想是将待排序的数组构建成一个大根堆（或小根堆），然后将堆顶元素与堆底元素交换位置，再将剩余元素重新构建成堆，重复执行交换和重构堆的操作，直到整个数组有序。</p><p>堆排序是一种基于堆数据结构的排序算法，它的时间复杂度为O(nlogn)。</p><h5 id="7-1-堆的概念"><a href="#7-1-堆的概念" class="headerlink" title="7.1.堆的概念"></a>7.1.堆的概念</h5><p>集合K &#x3D; {k0，k1， k2，…，kn-1}，把它的所有元素按完全二叉树的顺序存储方式存储在一个一维数组中，并满足：Ki &lt;&#x3D; K2i+1（左节点） 且 Ki&lt;&#x3D;K2i+2（右节点），则称为小堆(或大堆)。将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。完全二叉树（除了最后一层以外上面的节点但是非空的，最后一层节点是从左到右依次排布的）</p><h5 id="7-2-堆的性质"><a href="#7-2-堆的性质" class="headerlink" title="7.2.堆的性质"></a>7.2.堆的性质</h5><p>1.堆中某个节点的值总是不大于或不小于其父节点的值;<br>2.堆总是一棵完全二叉树。</p><h5 id="7-3-完全二叉树"><a href="#7-3-完全二叉树" class="headerlink" title="7.3.完全二叉树"></a>7.3.完全二叉树</h5><p>完全二叉树的特点：叶子结点只能出现在最下层和次下层，且最下层的叶子结点集中在树的左部。需要注意的是，满二叉树肯定是完全二叉树，而完全二叉树不一定是满二叉树。</p><ul><li>完全二叉树的第 i 层至多有 2^i - 1 个结点。</li><li>完全二叉树的第 i 层至少有 2^(i - 1) 个结点。</li><li>完全二叉树的叶子结点只出现在最底层和次底层。</li><li>完全二叉树每一层的结点个数都达到了最大值</li></ul><p><img src="/2020/05/22/Java%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/9a6eed9b4273e5d8ea2aa97560a9d584.gif" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Heap</span> &#123;<br>    <span class="hljs-comment">// 堆排序方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">heapSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> arr.length;<br>        <span class="hljs-comment">// 构建大根堆，</span><br>        <span class="hljs-comment">// 这段代码是构建大根堆的过程，它的循环次数为n/2-1次，是因为在完全二叉树中，叶子节点不需要进行堆化操作，</span><br>        <span class="hljs-comment">// 所以只需要对非叶子节点进行堆化，而非叶子节点的数量为n/2-1个。因此，只需要循环n/2-1次即可完成大根堆的构建。</span><br>        <span class="hljs-comment">// 非叶子节点在一维数组中就是前面 n/2-1</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> n / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-comment">// 从最底层的根节点开始堆化，每次执行完成后，都找出最大值，并放在根节点位置</span><br>            <span class="hljs-comment">// 逐层往上找，循环结束后，第一个元素肯定是最大值</span><br>            heapify(arr, n, i);<br>        &#125;<br>        <span class="hljs-comment">// 依次取出堆顶元素，并将余下元素继续堆化，得到有序序列</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-comment">// 第一个for循环已经找出最大值，所以先做交货，把最大值换到最后一个位置</span><br>            <span class="hljs-comment">// 把最大值交换到最后一个位置，下一次循环最后一个位置就不比较了</span><br>            swap(arr, <span class="hljs-number">0</span>, i);<br>            <span class="hljs-comment">// 继续找出最大值，放在第一个位置</span><br>            heapify(arr, i, <span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">heapify</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> heapSize, <span class="hljs-type">int</span> i)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">largest</span> <span class="hljs-operator">=</span> i; <span class="hljs-comment">// 初始化假设最大值为根节点</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> * i + <span class="hljs-number">1</span>; <span class="hljs-comment">// 相对于索引i的左节点索引</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> * i + <span class="hljs-number">2</span>; <span class="hljs-comment">// 相对于索引i的右节点索引</span><br>        <span class="hljs-comment">// 找到左右子节点中的最大值</span><br>        <span class="hljs-keyword">if</span> (left &lt; heapSize &amp;&amp; arr[left] &gt; arr[largest]) &#123;<br>            <span class="hljs-comment">// 如果有左节点，且左节点大于根节点，则记录左节点为最大值</span><br>            largest = left;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (right &lt; heapSize &amp;&amp; arr[right] &gt; arr[largest]) &#123;<br>            <span class="hljs-comment">// 如果有右节点，且右节点大于最大值，则记录右节点为最大值</span><br>            largest = right;<br>        &#125;<br>        <span class="hljs-comment">// 上面两个if之后，肯定找到最大值</span><br>        <span class="hljs-keyword">if</span> (largest != i) &#123;<br>            <span class="hljs-comment">// i 是根节点下标</span><br>            <span class="hljs-comment">// 如果最大值不是根节点，则交换根节点与最大值节点，</span><br>            <span class="hljs-comment">// 并递归地对最大值节点进行堆化</span><br>            swap(arr, i, largest);<br>            heapify(arr, heapSize, largest);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[i];<br>        arr[i] = arr[j];<br>        arr[j] = temp;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">3</span>, <span class="hljs-number">12</span>, <span class="hljs-number">35</span>, <span class="hljs-number">57</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>&#125;;<br>        <span class="hljs-type">int</span>[] expectedArr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">12</span>, <span class="hljs-number">35</span>, <span class="hljs-number">57</span>&#125;;<br>        Heap.heapSort(arr);<br>        System.out.println(<span class="hljs-string">&quot;arr = &quot;</span> + Arrays.toString(arr));<br>        Assertions.assertArrayEquals(expectedArr, arr);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的代码中， heapSort 函数接受一个整数数组作为输入，并使用堆排序算法对该数组进行排序。该函数首先构建一个大根堆，然后依次取出堆顶元素，得到有序序列。 heapify 函数用于对一个节点进行堆化操作。它接受三个参数：待堆化的数组、数组的大小和要堆化的节点的索引。该函数首先找到左右子节点中的最大值，如果最大值不是根节点，则交换根节点与最大值节点，并递归地对最大值节点进行堆化。 swap 函数用于交换数组中的两个元素。</p><h4 id="8-计数排序（Counting-Sort）"><a href="#8-计数排序（Counting-Sort）" class="headerlink" title="8. 计数排序（Counting Sort）"></a>8. 计数排序（Counting Sort）</h4><p>计数排序是一种非比较排序算法，它的基本思想是统计数组中每个元素出现的次数，然后根据元素出现的次数依次将元素放入有序的数组中。</p><p>计数排序时间复杂度为O(n+k)，其中k为待排序的元素的最大值。</p><p><img src="/2020/05/22/Java%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/ce63b47fe37af28d513692616f329885.gif" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.jupiter.api.Assertions;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Counting</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">countingSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> arr.length;<br>        <span class="hljs-comment">// 取出数组中最大值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> getMax(arr);<br>        <span class="hljs-type">int</span>[] count = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[max + <span class="hljs-number">1</span>];<br>        <span class="hljs-comment">// 统计每个元素出现的次数</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            count[arr[i]]++;<br>        &#125;<br>        <span class="hljs-comment">// 计算每个元素在有序序列中的位置</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= max; i++) &#123;<br>            <span class="hljs-comment">// 因为count包含了每个数据出现的次数，所以从小到大，</span><br>            <span class="hljs-comment">// 逐个往前加得到就是原数组中每个元素在有序序列中应有的位置</span><br>            count[i] += count[i - <span class="hljs-number">1</span>];<br>        &#125;<br>        <span class="hljs-comment">// 输出有序序列</span><br>        <span class="hljs-type">int</span>[] sortedArr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">item</span> <span class="hljs-operator">=</span> arr[i];<span class="hljs-comment">//元素</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">itemPos</span> <span class="hljs-operator">=</span> count[item];<span class="hljs-comment">// 元素在有序数组中的位置</span><br>            sortedArr[itemPos - <span class="hljs-number">1</span>] = item; <span class="hljs-comment">// 将元素填入有序数组</span><br>            count[item]--;<br>        &#125;<br>        <span class="hljs-comment">// 将有序序列复制回原数组</span><br>        System.arraycopy(sortedArr, <span class="hljs-number">0</span>, arr, <span class="hljs-number">0</span>, n);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMax</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (arr[i] &gt; max) &#123;<br>                max = arr[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> max;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">12</span>&#125;;<br>        <span class="hljs-type">int</span>[] expectedArr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">12</span>&#125;;<br>        Counting.countingSort(arr);<br>        System.out.println(<span class="hljs-string">&quot;arr = &quot;</span> + Arrays.toString(arr));<br>        Assertions.assertArrayEquals(expectedArr, arr);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="9-桶排序（Bucket-Sort）"><a href="#9-桶排序（Bucket-Sort）" class="headerlink" title="9. 桶排序（Bucket Sort）"></a>9. 桶排序（Bucket Sort）</h4><p>桶排序是一种非比较排序算法，它的基本思想是将待排序的数组分到有限数量的桶里，然后对每个桶进行排序，最后依次将所有桶中的元素取出来，组成有序的数组。</p><p>桶排序的时间复杂度为O(n)，其中n为待排序元素的个数。</p><p><img src="/2020/05/22/Java%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/d95b38bd7a5ec5067a858da9b5742526.gif" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.jupiter.api.Assertions;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Bucket</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">3</span>, <span class="hljs-number">12</span>, <span class="hljs-number">35</span>, <span class="hljs-number">57</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>&#125;;<br>        <span class="hljs-type">int</span>[] expectedArr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">12</span>, <span class="hljs-number">35</span>, <span class="hljs-number">57</span>&#125;;<br>        Bucket.bucketSort(arr, <span class="hljs-number">20</span>);<br>        System.out.println(<span class="hljs-string">&quot;arr = &quot;</span> + Arrays.toString(arr));<br>        Assertions.assertArrayEquals(expectedArr, arr);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 桶排序</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> arr 待排序数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> bucketSize 桶大小，数据不宜过大，桶越大，后续对桶内数据排序越耗时</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bucketSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> bucketSize)</span> &#123;<br>        <span class="hljs-keyword">if</span> (arr.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 循环数组，先找到最小值和最大值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">minValue</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">maxValue</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (arr[i] &lt; minValue) &#123;<br>                minValue = arr[i];<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[i] &gt; maxValue) &#123;<br>                maxValue = arr[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 根据桶的大小，计算桶个数，并初始化桶</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">bucketCount</span> <span class="hljs-operator">=</span> (maxValue - minValue) / bucketSize + <span class="hljs-number">1</span>;<br>        List&lt;List&lt;Integer&gt;&gt; buckets = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(bucketCount);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; bucketCount; i++) &#123;<br>            buckets.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;());<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">bucketIndex</span> <span class="hljs-operator">=</span> (arr[i] - minValue) / bucketSize;<br>            buckets.get(bucketIndex).add(arr[i]);<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">currentIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; bucketCount; i++) &#123;<br>            List&lt;Integer&gt; bucket = buckets.get(i);<br>            <span class="hljs-comment">// 对桶内数据进行排序</span><br>            Collections.sort(bucket);<br>            <span class="hljs-comment">// 将数据逐个从桶内取出，并存入数组</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; bucket.size(); j++) &#123;<br>                arr[currentIndex++] = bucket.get(j);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的代码中， bucketSort 函数接受一个整数数组和桶的大小作为输入，并使用桶排序算法对该数组进行排序。该函数首先找到输入数组中的最小值和最大值，并计算桶的个数。然后，该函数创建一个大小为桶的个数的桶列表，用于存储每个桶中的元素。接下来，该函数依次遍历输入数组，将每个元素放入相应的桶中。然后，该函数对每个桶中的元素进行排序，并将排序后的元素按顺序合并起来得到有序序列。</p><h4 id="10-基数排序（Radix-Sort）"><a href="#10-基数排序（Radix-Sort）" class="headerlink" title="10. 基数排序（Radix Sort）"></a>10. 基数排序（Radix Sort）</h4><p>基数排序是一种非比较排序算法，它的基本思想是将待排序的数组按照位数（个位、十位、百位）进行划分，然后依次对每个位上的数字进行排序，最终得到有序的数组。</p><p>基数排序的时间复杂度为O(d(n+k))，其中d为最大元素的位数，n为待排序元素的个数，k为桶的个数。</p><p><img src="/2020/05/22/Java%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/abe28e35b5770058732c16b7c7559076.gif" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Radix</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">radixSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-keyword">if</span> (arr.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 循环取得数组中的最大值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">maxNum</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (arr[i] &gt; maxNum) &#123;<br>                maxNum = arr[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 根据最大值算出数组中的最大位数，个位、十位、百位、千位等</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">maxDigit</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (maxNum != <span class="hljs-number">0</span>) &#123;<br>            maxNum /= <span class="hljs-number">10</span>;<br>            maxDigit++;<br>        &#125;<br>        <span class="hljs-comment">// 初始化10个list，分别存放位数是0-9的10组数字</span><br>        List&lt;List&lt;Integer&gt;&gt; buckets = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            buckets.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;());<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">mod</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>; <span class="hljs-comment">// 初始10，用于数据个位数取模</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">div</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// 桶序号除数</span><br>        <span class="hljs-comment">// 按位数循环数组，个位循环1次，十位循环2次，百位循环3次，以此类推！</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; maxDigit; i++, mod *= <span class="hljs-number">10</span>, div *= <span class="hljs-number">10</span>) &#123;<br>            <span class="hljs-comment">// 循环数组，将数据分别存入桶中</span><br>            <span class="hljs-comment">// 第一次循环，桶里面的个位数顺序排序完成</span><br>            <span class="hljs-comment">// 第二次循环，个位、十位都排序完成</span><br>            <span class="hljs-comment">// 第三次循环，个位、十位、百位都排序完成</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length; j++) &#123;<br>                <span class="hljs-comment">// 计算当前位数的桶序号</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">bucketIndex</span> <span class="hljs-operator">=</span> (arr[j] % mod) / div;<br>                buckets.get(bucketIndex).add(arr[j]);<br>            &#125;<br>            <span class="hljs-comment">// 循环桶列表，将当前位数已排序的数据放入数组中</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">currentIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; j++) &#123;<br>                List&lt;Integer&gt; bucket = buckets.get(j);<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; bucket.size(); k++) &#123;<br>                    arr[currentIndex++] = bucket.get(k);<br>                &#125;<br>                bucket.clear();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">3</span>, <span class="hljs-number">12</span>, <span class="hljs-number">35</span>, <span class="hljs-number">57</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>&#125;;<br>        <span class="hljs-type">int</span>[] expectedArr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">12</span>, <span class="hljs-number">35</span>, <span class="hljs-number">57</span>&#125;;<br>        Radix.radixSort(arr);<br>        System.out.println(<span class="hljs-string">&quot;arr = &quot;</span> + Arrays.toString(arr));<br>        Assertions.assertArrayEquals(expectedArr, arr);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的代码中， radixSort 函数接受一个整数数组作为输入，并使用基数排序算法对该数组进行排序。该函数首先找到输入数组中的最大值，并计算最大值的位数。然后，该函数创建一个大小为10的桶列表，用于存储每个桶中的元素。接下来，该函数依次遍历输入数组的每一位，将每个元素放入相应的桶中。然后，该函数将每个桶中的元素按顺序合并起来得到有序序列。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/byteflying/AlgorithmManRelease">https://github.com/byteflying/AlgorithmManRelease</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>算法</tag>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IO基础</title>
    <link href="/2020/04/24/IO%E5%9F%BA%E7%A1%80/"/>
    <url>/2020/04/24/IO%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="1、IO流概述"><a href="#1、IO流概述" class="headerlink" title="1、IO流概述"></a>1、IO流概述</h1><h2 id="1、什么是IO"><a href="#1、什么是IO" class="headerlink" title="1、什么是IO"></a>1、什么是IO</h2><p>I：Input<br>O：Output<br><img src="/2020/04/24/IO%E5%9F%BA%E7%A1%80/779e50281a25f5224d334db5bda64675.png" alt="在这里插入图片描述"></p><p><strong>通过IO可以完成硬盘文件的读和写</strong></p><p>Java中所有的流都在<code>java.io.*</code>下</p><h2 id="2、IO流的分类"><a href="#2、IO流的分类" class="headerlink" title="2、IO流的分类"></a>2、IO流的分类</h2><p>有多种分类方式:<strong>输入流、输出流、字节流、字符流</strong></p><p>1、一种方式是按照<strong>流的方向</strong>进行分类: <strong>以内存作为参照物</strong>。</p><ul><li>往内存中去，叫做输入(Input)。或者叫做读(Read)。</li><li>从内存中出来，叫做输出(Output)。或者叫做写(Write)。<br>2、另一种方式是按照<strong>读取数据方式</strong>不同进行分类:</li><li>有的流是按照<strong>字节的方式</strong>读取数据，<strong>一次读取1个字节byte</strong>,等同于一次读取8个二进制位。这种流是<strong>万能</strong>的，什么类型的文件都可以读取。包括:文本文件，图片，声音文件，视频文件。。。</li></ul><p>假设文件file.txt,采用<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E8%8A%82%E6%B5%81&spm=1001.2101.3001.7020">字节流</a>的话是这样读：</p><blockquote><p>a中国bc张三fe<br>第一次读：一个字节，正好读到 ‘ a ’<br>第二次读：一个字节，正好读到 ‘ 中 ’ 字符的一半。<br>第三次读：一个字节，正好读到 ‘ 中 ’ 字符的另一半。</p></blockquote><ul><li>有的流是按照<strong>字符的方式</strong>读取数据的，<strong>一次读取一个字符</strong>，这种流是为了方便读取普通文本文件而存在的，这种流不能读取:图片、声音、视频等文件。只能读取纯文本文件，连word文件都无法读取。</li></ul><p>假设文件file.txt,采用<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E6%B5%81&spm=1001.2101.3001.7020">字符流</a>的话是这样读：</p><blockquote><p>a中国bc张三fe<br>第一次读： ‘ a ’字符（a字符在window系统中占用1个字节）<br>第二次读： ‘ 中 ’ 字符（ ‘ 中 ’ 字符在window系统中占用2个字节）</p></blockquote><h2 id="3、流的四大家族"><a href="#3、流的四大家族" class="headerlink" title="3、流的四大家族"></a>3、流的四大家族</h2><p><strong>四大家族的首领：</strong><br><code>java.io.InputStream</code> 字节输入流<br><code>java.io.OutputStream</code> 字节输出流</p><p><code>java.io.Reader</code> 字符输入流<br><code>java.io.Writer</code> 字符输入流</p><p>四大家族的首领都是<strong>抽象类</strong>（Abstract class）</p><p><strong>所有的流都实现了：</strong><br><code>java.io.Closeable</code>接口，都是可关闭的，都有<code>close()</code>方法。流毕竟是一个管道，这个是内存和硬盘之间的通道，用完一定要关闭，不然会耗费大量很多资源。养成好习惯，用完流一定要关闭。</p><p><strong>所有的输出流都实现了：</strong><br><code>java.io.flushable</code>接口。都是可刷新的，都有<code>flush()</code>方法。养成一个好习惯，输出流在最终输出之后，一定要 <strong>记得<code>flush ()</code>刷新一下</strong>。这个刷新表示将通道道&#x2F;管道当中剩余未输出的数据强行输出完(清空管道!) <strong>刷新的作用就是清空管道。</strong></p><p><strong>注意:如果没有flush()可能会导致丢失数据。|</strong></p><p>注意：在Java中只要“类名”以<code>Stream</code>结尾的都是字节流。以<code>Reader/Writer</code>结尾的都是字符流。</p><h2 id="4、java-io包下需要掌握的流"><a href="#4、java-io包下需要掌握的流" class="headerlink" title="4、java.io包下需要掌握的流"></a>4、<code>java.io</code>包下需要掌握的流</h2><p><code>java.io</code>包下需要掌握的流有<strong>16个</strong>：</p><p><strong>文件专属：</strong><br><code>java.io.FileInputStream</code>（掌握）<br><code>java.io.FileOutputStream</code>（掌握）<br><code>java.io.FileReader</code><br><code>java.io.FileIWriter</code></p><p><strong>转换流：（将字节流转为字符流）</strong><br><code>java.io.InputStreamReader</code><br><code>java.io.OutputStreamWriter</code></p><p><strong>缓冲流专属：</strong><br><code>java.io.BufferedReader</code><br><code>java.io.BufferedWriter</code><br><code>java.io.BufferedInputStream</code><br><code>java.io.BufferedOutputStream</code></p><p><strong>数据流专属：</strong><br><code>java.io.DataInputStream</code><br><code>java.io.DataOutputStream</code></p><p><strong>标准输出流</strong><br><code>java.io.PrintWriter</code><br><code>java.io.PrintStream</code>（掌握）</p><p><strong>对象专属流：</strong><br><code>java.io.ObjectInputStream</code>（掌握）<br><code>java.io.ObjectOutputStream</code>（掌握）</p><h1 id="2、FileInputStream与FileOutputStream"><a href="#2、FileInputStream与FileOutputStream" class="headerlink" title="2、FileInputStream与FileOutputStream"></a>2、FileInputStream与FileOutputStream</h1><h2 id="1、FileInputStream"><a href="#1、FileInputStream" class="headerlink" title="1、FileInputStream"></a>1、FileInputStream</h2><p><code>java.io.FileInputStream</code>:<br>1、文件<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E8%8A%82%E6%B5%81&spm=1001.2101.3001.7020">字节流</a>，万能的，任何类型的文件都可以采用这个流来读。<br>2、字节的方式，完成输入的操作，完成读的操作（硬盘–&gt;内存）</p><h3 id="1-1-int-read-：从此输入流中读取一个数据字节"><a href="#1-1-int-read-：从此输入流中读取一个数据字节" class="headerlink" title="1.1 int read() ：从此输入流中读取一个数据字节"></a>1.1 <code>int read()</code> ：从此输入流中读取一个数据字节</h3><p><strong>示例代码1：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileInputStreamtest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//创建文件字节输入流对象</span><br>            fis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;C:\\Users\\Administrator\\Desktop\\temp.txt&quot;</span>);<br><br>            <span class="hljs-comment">//开始读</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">readData</span> <span class="hljs-operator">=</span> fis.read();<span class="hljs-comment">//这个方法的返回值是：读取到的“字节”方法本身</span><br>            System.out.println(readData);<span class="hljs-comment">//97</span><br><br>            readData = fis.read();<br>            System.out.println(readData);<span class="hljs-comment">//98</span><br><br>            readData = fis.read();<br>            System.out.println(readData);<span class="hljs-comment">//99</span><br><br>            readData = fis.read();<br>            System.out.println(readData);<span class="hljs-comment">//100</span><br><br>            readData = fis.read();<br>            System.out.println(readData);<span class="hljs-comment">//101</span><br><br>            readData = fis.read();<br>            System.out.println(readData);<span class="hljs-comment">//102</span><br><br>            <span class="hljs-comment">//已经读到文件的末尾了，在读的时候读取不到任何数据，返回-1</span><br>            readData = fis.read();<br>            System.out.println(readData);<span class="hljs-comment">// -1</span><br><br>            readData = fis.read();<br>            System.out.println(readData);<span class="hljs-comment">//-1</span><br><br><br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//在finally语句块当中确保流一定关闭</span><br>            <span class="hljs-keyword">if</span> (fis != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">//关闭流的前提是：流不是空。流是null的时候没必要关闭。</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    fis.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>temp文件：</strong><br><img src="/2020/04/24/IO%E5%9F%BA%E7%A1%80/f5e2222d87ccb840786464cfdc92c0f1.png" alt="在这里插入图片描述"></p><p><strong>运行结果：</strong><br><img src="/2020/04/24/IO%E5%9F%BA%E7%A1%80/7a32be8ae579141705dfcecb743330ff.png" alt="在这里插入图片描述"></p><p><strong>演示：</strong><br><img src="/2020/04/24/IO%E5%9F%BA%E7%A1%80/689561d08f9a8c5ca9345caf7567eb8f.png" alt="在这里插入图片描述"><br><strong>对上一个程序进行改进（使用while循环输出字节）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileInuputStreamtest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;C:\\Users\\Administrator\\Desktop\\temp.txt&quot;</span>);<br><br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">readData</span> <span class="hljs-operator">=</span> fis.read();<br>                <span class="hljs-keyword">if</span> (readData == -<span class="hljs-number">1</span>)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                System.out.println(readData);<br>            &#125;<br>            <br><span class="hljs-comment">//改造while循环</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">readData</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ;<br>            <span class="hljs-keyword">while</span> ((readData =fis.read())!= -<span class="hljs-number">1</span>)&#123;<br>                System.out.println(readData);<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//在finally语句块当中确保流一定关闭</span><br>            <span class="hljs-keyword">if</span> (fis != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">//关闭流的前提是：流不是空。流是null的时候没必要关闭。</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    fis.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>运行结果：</strong><br><img src="/2020/04/24/IO%E5%9F%BA%E7%A1%80/00e72bb4a8a05dfc52670ba2cf3ba649.png" alt="在这里插入图片描述"></p><h3 id="1-2-int-read-byte-b-一次最多读取b-length个字节"><a href="#1-2-int-read-byte-b-一次最多读取b-length个字节" class="headerlink" title="1.2 int read(byte[] b)一次最多读取b.length个字节"></a>1.2 <code>int read(byte[] b)</code>一次最多读取b.length个字节</h3><p>减少硬盘和内存的交互，提高程序的执行效率。<br>往byte[] 数组当中读<br><img src="/2020/04/24/IO%E5%9F%BA%E7%A1%80/03268f825aca0c38671d49aa8bc5ff73.png" alt="在这里插入图片描述"><br><img src="/2020/04/24/IO%E5%9F%BA%E7%A1%80/81bc02b11a54f9b399a8b67bc73b79b7.png" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileInputStreamtest3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//相对路径的话呢？相对路径一定是从当前所在的位置作为起点开始找！</span><br>            <span class="hljs-comment">//在IDEA中默认的当前路径是哪里？ 工程Project的根就是IDEA的默认当前路径</span><br>            fis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;temp&quot;</span>);<br><br>            <span class="hljs-comment">//开始读，采用byte数组，一次读取多个字节。最多读取：数组.length 个字节</span><br>            <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">4</span>];<span class="hljs-comment">//准备一个4个长度的byte数组，一次最多读取4个字节。</span><br>            <span class="hljs-comment">//这个方法的返回值是：读取到的字节数量(不是字节本身)</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">readCount</span> <span class="hljs-operator">=</span> fis.read(bytes);<br>            System.out.println(readCount);<br>            <span class="hljs-comment">//将字节数组全部转化为字符串</span><br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes));<br>            <span class="hljs-comment">//不应该全部都转换，应该是读取了多少字节，转换多少个</span><br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes,<span class="hljs-number">0</span>,readCount));<br><br>            readCount = fis.read(bytes);<span class="hljs-comment">//第二次只能读取到2个字节</span><br>            System.out.println(readCount);<span class="hljs-comment">//2</span><br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes));<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes,<span class="hljs-number">0</span>,readCount));<br><br>            readCount = fis.read(bytes);<span class="hljs-comment">//第三次1个字节都没有读取到返回-1</span><br>            System.out.println(readCount);<span class="hljs-comment">//-1</span><br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes));<br><br>        &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                fis.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>运行结果：</strong><br><img src="/2020/04/24/IO%E5%9F%BA%E7%A1%80/94870c2b409455b4644881caaea1964c.png" alt="在这里插入图片描述"><br>改进后（while循环）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileIuputStreamtest4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;temp&quot;</span>);<br>            <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">4</span>];<br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">readCount</span> <span class="hljs-operator">=</span> fis.read(bytes);<br>                <span class="hljs-keyword">if</span> (readCount == -<span class="hljs-number">1</span>)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                System.out.print(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes,<span class="hljs-number">0</span>, readCount));<br>            &#125;<br>或<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">int readCount1 = 0;</span><br><span class="hljs-comment">            while ((readCount1 = fis.read(bytes))!= -1)&#123;</span><br><span class="hljs-comment">                System.out.print(new String(bytes,0,readCount1));</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">            */</span><br><br>        &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (fis != <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    fis.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>运行结果：</strong><br><img src="/2020/04/24/IO%E5%9F%BA%E7%A1%80/09d1236a689a0d79f7c348649eddc9c2.png" alt="在这里插入图片描述"></p><h3 id="1-3int-available-返回流当中剩余的没有读到的字节数量"><a href="#1-3int-available-返回流当中剩余的没有读到的字节数量" class="headerlink" title="1.3int available() :返回流当中剩余的没有读到的字节数量"></a>1.3<code>int available()</code> :返回流当中剩余的没有读到的字节数量</h3><p><strong>在上述代码的前提下进行修改：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">fis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;temp&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;总字节数量&quot;</span> + fis.available());<br><span class="hljs-comment">//读取1个字节</span><br><span class="hljs-type">int</span> <span class="hljs-variable">readByte</span> <span class="hljs-operator">=</span> fis.read();<br><br>System.out.println(<span class="hljs-string">&quot;剩下多少字节没有读：&quot;</span> + fis.available());<br></code></pre></td></tr></table></figure><p><strong>运行结果：</strong><br><img src="/2020/04/24/IO%E5%9F%BA%E7%A1%80/70cdccd30a9cb46ae6d07a1bf5ce7098.png" alt="在这里插入图片描述"><br>也可采用以下方法输出文件（不适合太大的文件，因为byte[]数组不能太大大）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[fis.available()];<br>System.out.println(fis.read(bytes));<br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes));<br></code></pre></td></tr></table></figure><p>运行结果：<br><img src="/2020/04/24/IO%E5%9F%BA%E7%A1%80/5e8a20e2e55696cb95c1c4f9b2ebaf64.png" alt="在这里插入图片描述"></p><h3 id="1-4-long-skip-long-n-跳过几个字节不读"><a href="#1-4-long-skip-long-n-跳过几个字节不读" class="headerlink" title="1.4 long skip(long n ):跳过几个字节不读"></a>1.4 <code>long skip(long n )</code>:跳过几个字节不读</h3><p><strong>修改以上代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">fis.skip(<span class="hljs-number">3</span>);<br>      System.out.println(fis.read());<span class="hljs-comment">//不跳过应该是97,现在是100</span><br></code></pre></td></tr></table></figure><p><strong>运行结果：</strong><br><img src="/2020/04/24/IO%E5%9F%BA%E7%A1%80/10b26fa1403aa24f21334eb30f20fe81.png" alt="在这里插入图片描述"></p><h2 id="2、FileOutputStream"><a href="#2、FileOutputStream" class="headerlink" title="2、FileOutputStream"></a>2、FileOutputStream</h2><p><strong>文件字节输出流，负责写</strong>。</p><p><strong>从内存到硬盘。</strong></p><h3 id="2-1-输入字节到文件"><a href="#2-1-输入字节到文件" class="headerlink" title="2.1 输入字节到文件"></a>2.1 输入字节到文件</h3><p>这种方式将字节<strong>输出到文件</strong>中（但是谨慎使用，这种方式会<strong>将原文件清空</strong>，然后<strong>重新写入</strong>）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileOutputStreamtest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//myfile文件不存在的时候会自动新建</span><br>            fos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;myfile&quot;</span>);<br>            <span class="hljs-comment">//开始写</span><br>            <span class="hljs-type">byte</span>[] bytes = &#123;<span class="hljs-number">97</span>,<span class="hljs-number">98</span>,<span class="hljs-number">99</span>,<span class="hljs-number">100</span>,<span class="hljs-number">101</span>,<span class="hljs-number">102</span>&#125;;<br>            <span class="hljs-comment">//将byte数组全部写出！</span><br>            fos.write(bytes);<br>            <span class="hljs-comment">//将byte数组的一部分写出</span><br>            fos.write(bytes,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>);<br>            <span class="hljs-comment">//写完之后，一定要刷新</span><br>            fos.flush();<br><br>            &#125;<span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">catch</span>(IOException e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (fos != <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    fos.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：<br><img src="/2020/04/24/IO%E5%9F%BA%E7%A1%80/4cf2ba7a5ce67b12e8af996f3b02db89.png" alt="在这里插入图片描述"></p><p><strong>以追加的方式在文件末尾写入。不会清空原文件内容：</strong><br>只需在后面加true，即可拼接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">fos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;myfile&quot;</span>,<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><p><strong>运行结果：</strong><br><img src="/2020/04/24/IO%E5%9F%BA%E7%A1%80/ef77a5a94bdd049e0995205c531d30d1.png" alt="在这里插入图片描述"></p><h3 id="2-2-输入字符串到文件"><a href="#2-2-输入字符串到文件" class="headerlink" title="2.2 输入字符串到文件"></a>2.2 输入字符串到文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;我是任义&quot;</span>;<br><span class="hljs-type">byte</span>[] bs = s.getBytes();<br>fos.write(bs);<br></code></pre></td></tr></table></figure><p>输出结果：<br><img src="/2020/04/24/IO%E5%9F%BA%E7%A1%80/a15b6479ba4ed61df4b8b722686b7602.png" alt="在这里插入图片描述"></p><h2 id="3、使用FileInputStream-FileOutputStream完成文件拷贝"><a href="#3、使用FileInputStream-FileOutputStream完成文件拷贝" class="headerlink" title="3、使用FileInputStream+FileOutputStream完成文件拷贝"></a>3、使用FileInputStream+FileOutputStream完成文件拷贝</h2><p>拷贝的过程是一边读一边写。<br>使用以上的字节流拷贝文件的时候，文件类型随意，万能的。什么样的文件都能拷贝<br><img src="/2020/04/24/IO%E5%9F%BA%E7%A1%80/45bb5c69a450bb4e0b954516b0fc78c1.png" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Copy01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//创建一个输入流</span><br>            fis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;C:\\Users\\Administrator\\Desktop\\简历.txt&quot;</span>);<br>            <span class="hljs-comment">//创建一个输出流</span><br>            fos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;D:\\简历.txt&quot;</span>);<br><br>            <span class="hljs-comment">//最核心的：一边读，一边写</span><br>            <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>];<span class="hljs-comment">//1MB(一次最多拷贝1MB)</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">readCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> ((readCount = fis.read(bytes))!= -<span class="hljs-number">1</span>)&#123;<br>                fos.write(bytes,<span class="hljs-number">0</span>,readCount);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (fis != <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    fis.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            <span class="hljs-keyword">if</span> (fos !=<span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    fos.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2020/04/24/IO%E5%9F%BA%E7%A1%80/a23880459e53a4411b9d21259910b783.png" alt="在这里插入图片描述"></p><p><img src="/2020/04/24/IO%E5%9F%BA%E7%A1%80/abb6e5edaed96b1b7c251bd2317a7e25.png" alt="在这里插入图片描述"></p><h1 id="3、FileReader和FileWriter"><a href="#3、FileReader和FileWriter" class="headerlink" title="3、FileReader和FileWriter"></a>3、FileReader和FileWriter</h1><h2 id="1、FileReader"><a href="#1、FileReader" class="headerlink" title="1、FileReader"></a>1、FileReader</h2><p>文件字符输入流，只能读取普通的文本，<br>读取普通文本内容时，比较方便，快捷。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileReadertest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//创建文件字符输入流</span><br>            reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;temp&quot;</span>);<br>            <span class="hljs-comment">//开始读</span><br>            <span class="hljs-type">char</span>[] chars= <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">4</span>];<span class="hljs-comment">//一次读取4个字符</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">readCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> ((readCount = reader.read(chars)) != -<span class="hljs-number">1</span>)&#123;<br>                System.out.print(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(chars,<span class="hljs-number">0</span>,readCount));<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                reader.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>运行结果：</strong><br><img src="/2020/04/24/IO%E5%9F%BA%E7%A1%80/7997aa52c8baaf7952fa2deacb83ef59.png" alt="在这里插入图片描述"></p><h2 id="2、FileWriter"><a href="#2、FileWriter" class="headerlink" title="2、FileWriter"></a>2、FileWriter</h2><p>文件字符输出流。写</p><p>只能输出普通文本</p><p><strong>write的三种构造方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileWritertest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">FileWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//创建文件字符输出流对象</span><br>            out = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;file&quot;</span>);<span class="hljs-comment">//如果想拼接字符，在后面加上true</span><br>            <span class="hljs-comment">//开始写</span><br>            <span class="hljs-type">char</span>[] chars = &#123;<span class="hljs-string">&#x27;我&#x27;</span>,<span class="hljs-string">&#x27;是&#x27;</span>,<span class="hljs-string">&#x27;中&#x27;</span>,<span class="hljs-string">&#x27;国&#x27;</span>,<span class="hljs-string">&#x27;人&#x27;</span>&#125;;<br>            out.write(chars);<br>            out.write(chars,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<span class="hljs-comment">// 2：起始下标、3：长度</span><br>            <br>            out.write(<span class="hljs-string">&quot;我是一名Java软件攻城狮&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;\n&quot;</span>);<span class="hljs-comment">//换行</span><br>            out.write(<span class="hljs-string">&quot;hello world!&quot;</span>);<br>            <span class="hljs-comment">//刷新</span><br>            out.flush();<br><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                out.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>运行结果：</strong><br><img src="/2020/04/24/IO%E5%9F%BA%E7%A1%80/f4752e71e4fa2ddb94a37fb1a4062803.png" alt="在这里插入图片描述"></p><h2 id="3、复制普通文本文件"><a href="#3、复制普通文本文件" class="headerlink" title="3、复制普通文本文件"></a>3、复制普通文本文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CopyTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span><span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>       <span class="hljs-comment">//读</span><br>            in = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;C:\\Users\\Administrator\\Desktop\\简历.txt&quot;</span>);<br>            <span class="hljs-comment">//写</span><br>            out = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;D:\\copy简历.txt&quot;</span>);<br><br>            <span class="hljs-type">char</span>[] chars = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">1024</span>*<span class="hljs-number">512</span>];<span class="hljs-comment">//1MB</span><br>            <span class="hljs-comment">//一边读一边写</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">readCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> ((readCount = in.read(chars)) != -<span class="hljs-number">1</span>)&#123;<br>                out.write(chars,<span class="hljs-number">0</span>,readCount);<br>            &#125;<br>            <span class="hljs-comment">//刷新</span><br>            out.flush();<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (in != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    in.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>                <span class="hljs-keyword">if</span> (out != <span class="hljs-literal">null</span>)&#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        out.close();<br>                    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4、缓冲流、转换流、节点流、包装流"><a href="#4、缓冲流、转换流、节点流、包装流" class="headerlink" title="4、缓冲流、转换流、节点流、包装流"></a>4、缓冲流、转换流、节点流、包装流</h1><h2 id="1、BufferedRead（带有缓冲的字符输入流）"><a href="#1、BufferedRead（带有缓冲的字符输入流）" class="headerlink" title="1、BufferedRead（带有缓冲的字符输入流）"></a>1、BufferedRead（带有缓冲的字符输入流）</h2><ul><li>带有<strong>缓冲区的字符输入流</strong></li><li>使用这些流的时候<strong>不需要自定义</strong>char数组，或者说不需要自定义byte数组，<strong>自带缓冲</strong>。</li></ul><h3 id="1、节点流和包装流"><a href="#1、节点流和包装流" class="headerlink" title="1、节点流和包装流"></a>1、节点流和包装流</h3><ul><li>当一个流的<strong>构造方法中需要一个流</strong>的时候，这个<strong>被传进来</strong>的流叫做：<strong>节点流</strong>。</li><li><strong>外部负责包装</strong>的这个流，叫做：<strong>包装流</strong>，还有一个名字叫做：<strong>处理流</strong>。</li></ul><h3 id="2、readline-：读一行字符"><a href="#2、readline-：读一行字符" class="headerlink" title="2、readline ：读一行字符"></a>2、readline ：读一行字符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BufferedReadertest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-comment">//对于这个程序来说：FileReader就是一个节点流，BufferedReader就是一个包装流/处理流。</span><br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;src/Copy01.java&quot;</span>);<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(reader);<br><br>        <span class="hljs-comment">//读一行</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">firstLine</span> <span class="hljs-operator">=</span> br.readLine();<br>        System.out.println(firstLine);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">secondLine</span> <span class="hljs-operator">=</span> br.readLine();<br>        System.out.println(secondLine);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">thirdLine</span> <span class="hljs-operator">=</span> br.readLine();<br>        System.out.println(thirdLine);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">while</span>((s = br.readLine()) != <span class="hljs-literal">null</span>)&#123;<br>            System.out.println(s);<br>        &#125;<br><br>        <span class="hljs-comment">//关闭流</span><br>        <span class="hljs-comment">//对于包装流来说，只需要关闭最外层流就行，里面的节点流会自动关闭。</span><br>        br.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2020/04/24/IO%E5%9F%BA%E7%A1%80/883b0ec5bf4fda7c0d1a273e6e92834a.png" alt="在这里插入图片描述"></p><h2 id="2、转换流（InputStreamReader与OutputStreamWriter）"><a href="#2、转换流（InputStreamReader与OutputStreamWriter）" class="headerlink" title="2、转换流（InputStreamReader与OutputStreamWriter）"></a>2、转换流（InputStreamReader与OutputStreamWriter）</h2><p>这里只演示<code>InputStreamWriter</code>的转换流：<code>OutputStreamWriter</code>在<code>BufferedWrite</code>中演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BufferedReaderTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">/*        //字节流</span><br><span class="hljs-comment">        FileInputStream in = new FileInputStream(&quot;&quot;);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        //通过转换流转换</span><br><span class="hljs-comment">        //in是节点流，reader是包装流</span><br><span class="hljs-comment">        InputStreamReader reader = new InputStreamReader(in);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        //这个构造方法只能传一个字符流，不能传字节流</span><br><span class="hljs-comment">        //reader是节点流，br是包装流</span><br><span class="hljs-comment">        BufferedReader br = new BufferedReader(reader);*/</span><br><br>        <span class="hljs-comment">//合并</span><br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;src/Copy01.java&quot;</span>)));<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-literal">null</span>)&#123;<br>            System.out.println(line);<br>        &#125;<br><br>        <span class="hljs-comment">//关闭最外层</span><br>        br.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3、BufferedWrite：（带有缓冲的字符输出流）"><a href="#3、BufferedWrite：（带有缓冲的字符输出流）" class="headerlink" title="3、BufferedWrite：（带有缓冲的字符输出流）"></a>3、BufferedWrite：（带有缓冲的字符输出流）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedWriter;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.OutputStreamWriter;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BufferedWriteTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;temp&quot;</span>)));<br><br>        out.write(<span class="hljs-string">&quot;hello world&quot;</span>);<br>        out.write(<span class="hljs-string">&quot;\n&quot;</span>);<br>        out.write(<span class="hljs-string">&quot;hello kitty&quot;</span>);<br>        out.flush();<br>        out.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2020/04/24/IO%E5%9F%BA%E7%A1%80/b9c3f93ec2fa19f6297d5bdf86a68472.png" alt="在这里插入图片描述"></p><h1 id="5、数据流、标准输出流、日志工具"><a href="#5、数据流、标准输出流、日志工具" class="headerlink" title="5、数据流、标准输出流、日志工具"></a>5、数据流、标准输出流、日志工具</h1><h2 id="1、数据流"><a href="#1、数据流" class="headerlink" title="1、数据流"></a>1、数据流</h2><h3 id="1、DataOutputStream-数据字节输出流"><a href="#1、DataOutputStream-数据字节输出流" class="headerlink" title="1、DataOutputStream(数据字节输出流)"></a>1、DataOutputStream(数据字节输出流)</h3><p><code>java.io.DataOutputStream</code>数据专属的流</p><p>这个流可以将<strong>数据</strong>连同<strong>数据的类型</strong>一同写入文件。</p><p>注意：<strong>这个文件不是普通文本文档。（这个文档用记事本打不开）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.DataOutputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataOutputStreamTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//创建数据专属的字节输出流</span><br>        <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">dos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;data&quot;</span>));<br><br>        <span class="hljs-comment">//写数据</span><br>        <span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>        <span class="hljs-type">short</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">300</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">400L</span>;<br>        <span class="hljs-type">float</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.0F</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span><span class="hljs-number">3.14</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">sex</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>;<br><br>        <span class="hljs-comment">//写</span><br>        dos.writeByte(b);<br>        dos.writeShort(s);<br>        dos.writeInt(i);<br>        dos.writeLong(l);<br>        dos.writeFloat(f);<br>        dos.writeDouble(d);<br>        dos.writeBoolean(sex);<br>        dos.writeChar(c);<br><br>        <span class="hljs-comment">//刷新</span><br>        dos.flush();<br>        <span class="hljs-comment">//关闭流</span><br>        dos.close();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、DataIuputStream（数据字节输入流）"><a href="#2、DataIuputStream（数据字节输入流）" class="headerlink" title="2、DataIuputStream（数据字节输入流）"></a>2、DataIuputStream（数据字节输入流）</h3><p>DataOutputStream写的文件，<strong>只能使用DataIuputStream去读</strong>。并且读的时候你需要提前知道写入的顺序。<br><strong>读的顺序需要和写的顺序一致</strong>，才可以正常取出数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.DataInputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataInputStreamTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">dis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;data&quot;</span>));<br><br>        <span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> dis.readByte();<br>        <span class="hljs-type">short</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> dis.readShort();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> dis.readInt();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> dis.readLong();<br>        <span class="hljs-type">float</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> dis.readFloat();<br>        <span class="hljs-type">double</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span>dis.readDouble();<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">sex</span> <span class="hljs-operator">=</span> dis.readBoolean();<br>        <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> dis.readChar();<br><br>        System.out.println(b);<br>        System.out.println(s);<br>        System.out.println(i + <span class="hljs-number">1000</span>);<br>        System.out.println(l);<br>        System.out.println(f);<br>        System.out.println(d);<br>        System.out.println(sex);<br>        System.out.println(c);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>运行结果：</strong><br><img src="/2020/04/24/IO%E5%9F%BA%E7%A1%80/ab2247eb87938b6cae9b89ad161e5d2d.png" alt="在这里插入图片描述"></p><h2 id="2、标准输出流（PrintStream和PrintWriter）"><a href="#2、标准输出流（PrintStream和PrintWriter）" class="headerlink" title="2、标准输出流（PrintStream和PrintWriter）"></a>2、标准输出流（PrintStream和<a href="https://so.csdn.net/so/search?q=PrintWriter&spm=1001.2101.3001.7020">PrintWriter</a>）</h2><p><strong>标准输出流不需要手动close（）关闭</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.PrintStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintStreamTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//联合起来写</span><br>        System.out.println(<span class="hljs-string">&quot;hello World!&quot;</span>);<br><br>        <span class="hljs-comment">//分开写</span><br>        <span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> System.out;<br>        ps.println(<span class="hljs-string">&quot;hello zhangsan&quot;</span>);<br>        ps.println(<span class="hljs-string">&quot;hello lisi&quot;</span>);<br>        ps.println(<span class="hljs-string">&quot;hello wangwu&quot;</span>);<br><br>        <span class="hljs-comment">//标准输出流不需要手动close（）关闭</span><br>        <span class="hljs-comment">//可以改变标准输出流的输出方式吗？ 可以</span><br><br>        <span class="hljs-comment">//标准输出流不再指向控制台，指向“log”文件</span><br>        <span class="hljs-type">PrintStream</span> <span class="hljs-variable">printStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;log&quot;</span>));<br>        <span class="hljs-comment">//修改输出方向，将输出方向修改到“log”文件。</span><br>        System.setOut(printStream);<br>        <span class="hljs-comment">//再输出</span><br>        System.out.println(<span class="hljs-string">&quot;hello world&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;hello kitty&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;hello zhangsan&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2020/04/24/IO%E5%9F%BA%E7%A1%80/3cec138cdd65c633dbe581c7d970f40e.png" alt="在这里插入图片描述"><br><img src="/2020/04/24/IO%E5%9F%BA%E7%A1%80/e277c8d5d6669aeb2ed910d1371d171b.png" alt="在这里插入图片描述"></p><h2 id="3、日志工具"><a href="#3、日志工具" class="headerlink" title="3、日志工具"></a>3、日志工具</h2><p><strong>日志工具logger类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.PrintStream;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">logger</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    日志工具</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">log</span><span class="hljs-params">(String msg)</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//指向一个日志文件</span><br>            <span class="hljs-type">PrintStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;log.txt&quot;</span>,<span class="hljs-literal">true</span>));<br>            <span class="hljs-comment">//改变输出方向</span><br>            System.setOut(out);<br>            <span class="hljs-comment">//日期的当前时间</span><br>            <span class="hljs-type">Date</span> <span class="hljs-variable">nowTime</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>            <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss:sss&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">strTime</span> <span class="hljs-operator">=</span> sdf.format(nowTime);<br><br>            System.out.println(strTime + <span class="hljs-string">&quot;:&quot;</span> + msg);<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>运行测试：</strong></p><p>第一次运行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">logerTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//测试日志工具</span><br>        logger.log(<span class="hljs-string">&quot;我非常喜欢这个记录日志的工具哦！&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>第二次运行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">logerTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//测试日志工具</span><br>        logger.log(<span class="hljs-string">&quot;第二次哦&quot;</span>);<br>        logger.log(<span class="hljs-string">&quot;调用了System类的gc方法，建议启动垃圾回收&quot;</span>);<br>        logger.log(<span class="hljs-string">&quot;调用了UserService的doSome方法&quot;</span>);<br>        logger.log(<span class="hljs-string">&quot;用户尝试进行登录，验证失败&quot;</span>);<br>        logger.log(<span class="hljs-string">&quot;我非常喜欢这个记录日志的工具哦！&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2020/04/24/IO%E5%9F%BA%E7%A1%80/0970c572c34dcf10e1c8974d1f6d4f3d.png" alt="在这里插入图片描述"></p><h1 id="6、对象专属流、序列化和反序列化、Serializable接口、transient关键字"><a href="#6、对象专属流、序列化和反序列化、Serializable接口、transient关键字" class="headerlink" title="6、对象专属流、序列化和反序列化、Serializable接口、transient关键字"></a>6、对象专属流、序列化和反序列化、Serializable接口、transient关键字</h1><h2 id="1、序列化和反序列化的理解"><a href="#1、序列化和反序列化的理解" class="headerlink" title="1、序列化和反序列化的理解"></a>1、序列化和<a href="https://so.csdn.net/so/search?q=%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96&spm=1001.2101.3001.7020">反序列化</a>的理解</h2><p>什么是序列化？</p><p><strong>序列化</strong>是将<strong>对象状态</strong>转换为<strong>可保持或传输的格式</strong>的过程。与序列化相对的是<strong>反序列化</strong>，它<strong>将流转换为对象</strong>。这两个过程结合起来，可以轻松地存储和传输数据<br><img src="/2020/04/24/IO%E5%9F%BA%E7%A1%80/bd54aee0722836eeda2f5ba0bc58b874.png" alt="在这里插入图片描述"></p><h2 id="2、通过对象专属流实现序列化"><a href="#2、通过对象专属流实现序列化" class="headerlink" title="2、通过对象专属流实现序列化"></a>2、通过对象专属流实现序列化</h2><p><strong>一个对象序列化的接口，一个类只有实现了<code>Serializable</code>接口，它的对象才能被序列化。</strong></p><p>参与序列化和反序列化的对象，必须实现<code>Serializable</code>接口</p><p>注意：<br>通过源码发现，<code>Serializeable</code>接口只是一个<strong>标志接口</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Serializable</span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个接口什么代码都没有，那么他有什么作用呢？<br>起到标识的作用，标志的作用，java虚拟机看到这个类实现了这个接口，会对这个类进行特殊待遇，JVM看到<code>Serializeable</code>接口后，会为该类自动生成一个<strong>序列化版本号</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectOutputStreamTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//创建对象</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">1111</span>,<span class="hljs-string">&quot;zhangsan&quot;</span>);<br>        <span class="hljs-comment">//序列化</span><br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;students&quot;</span>));<br><br>        <span class="hljs-comment">//序列化对象</span><br>        oos.writeObject(s);<br><br>        oos.flush();<br>        oos.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3、序列化版本号"><a href="#3、序列化版本号" class="headerlink" title="3、序列化版本号"></a>3、序列化版本号</h2><p>Java虚拟机会<strong>默认提供序列版本号</strong>。如果类的源代码改动之后，需要<strong>重新编译</strong>，编译之后生成了<strong>全新的字节码</strong>文件。并且class文件再次运行的时候，java虚拟机生成的序列化版本号也会<strong>发生相应的改变</strong>。</p><p><strong>建议将序列版本号手动写出来，不建议自动生成</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<span class="hljs-comment">//手动写出序列号</span><br><br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> no;<br>        <span class="hljs-keyword">private</span> String name;<br></code></pre></td></tr></table></figure><h3 id="1、java语言是采用什么样的机制来区分分类的？"><a href="#1、java语言是采用什么样的机制来区分分类的？" class="headerlink" title="1、java语言是采用什么样的机制来区分分类的？"></a>1、java语言是采用什么样的机制来区分分类的？</h3><ul><li>第一：首先通过类名进行比对，如果类名不一样，肯定不是同一个类</li><li>第二：如果类名一样，靠序列化版本号进行区分。</li></ul><blockquote><p>小鹏编写了一个类: com . bjipowernode . java. bean. Student implements Serial izable<br>胡浪编写了一个类: com . bjpowernode. java. bean. Student implements Serial izable</p></blockquote><p>不同的人编写了同一个类，但“这两个类确实不是同一个类”。这个时候序列化版本就起上作用了。</p><p>对于java虚拟机来说, <strong>java虚拟机是可以区分开这两个类</strong>的,因为这两个类都实现了<code>Serializable</code>接口,都有<strong>默认的序列化版本号</strong>,他们的序列化版本号不一样。所以区分开了。( 这是自动生成序列化版本号的好处)</p><p><strong>这种自动生成序列化版本号有什么缺陷?</strong></p><blockquote><p>这种自动生成的序列化版本号缺点是:一旦代码确定之后，不能进行后续的修改，因为只要修改,必然会重新编译,此时会生成全新的序列化版本号,这个时候java虚拟机会认为这是一个全新的类。( 这样就不好了! )</p></blockquote><p><strong>结论：</strong></p><p>凡是一个类实现了<code>Serializable</code>接口，建议给该类提供一个<strong>固定不变</strong>的<strong>序列化版本号</strong>。</p><p><strong>这样，即使以后这个类代码修改了，但是版本号不变，java虚拟机会认为是同一个类</strong></p><h3 id="2、IDEA生成序列化版本号"><a href="#2、IDEA生成序列化版本号" class="headerlink" title="2、IDEA生成序列化版本号"></a>2、IDEA生成序列化版本号</h3><p>File -&gt; Settings -&gt; Editor -&gt; Inspections -&gt; 搜索<a href="https://so.csdn.net/so/search?q=serializable&spm=1001.2101.3001.7020">serializable</a> -&gt; 选中Serializable classes Without a serialVersionUID -&gt; Apply<br><img src="/2020/04/24/IO%E5%9F%BA%E7%A1%80/b9231135ca6221dadf0f9ed61e1bb8c2.png" alt="在这里插入图片描述"><br>然后再类名上：<code>Alt+回车</code><br><img src="/2020/04/24/IO%E5%9F%BA%E7%A1%80/2933103531210b1e9f3fce3ddedfd217.png" alt="在这里插入图片描述"></p><h2 id="4、通过对象专属流实现反序列化"><a href="#4、通过对象专属流实现反序列化" class="headerlink" title="4、通过对象专属流实现反序列化"></a>4、通过对象专属流实现反序列化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> no;<br>        <span class="hljs-keyword">private</span> String name;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(<span class="hljs-type">int</span> no, String name)</span> &#123;<br>            <span class="hljs-built_in">this</span>.no = no;<br>            <span class="hljs-built_in">this</span>.name = name;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                    <span class="hljs-string">&quot;no=&quot;</span> + no +<br>                    <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                    <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>        &#125;<br>    &#125;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectInputStreamTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span>  Exception&#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;students&quot;</span>));<br>        <span class="hljs-comment">//开始反序列化</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-comment">//反序列化回来是一个学生对象，所以会调用学生对象的toString方法</span><br>        System.out.println(obj);<br>        ois.close();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2020/04/24/IO%E5%9F%BA%E7%A1%80/f2e13b1c166a56a3c74c6bf3837f9e15.png" alt="在这里插入图片描述"></p><h2 id="5、序列化多个对象"><a href="#5、序列化多个对象" class="headerlink" title="5、序列化多个对象"></a>5、序列化多个对象</h2><p><strong>把对象放入集合中去，序列化集合。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> no;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(<span class="hljs-type">int</span> no, String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.no = no;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;no=&quot;</span> + no +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> no;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNo</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123;<br>        <span class="hljs-built_in">this</span>.no = no;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectOutputStreamTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        List&lt;User&gt; userList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        userList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;zhangsan&quot;</span>));<br>        userList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;lisi&quot;</span>));<br>        userList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;wangwu&quot;</span>));<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;users&quot;</span>));<br><br>        <span class="hljs-comment">//序列化一个集合，这个集合对象中放了很多其他的对象</span><br>        oos.writeObject(userList);<br><br>        oos.flush();<br>        oos.close();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectInputStreamTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;users&quot;</span>));<br>        List&lt;User&gt; userList = (List&lt;User&gt;)ois.readObject();<br>        <span class="hljs-keyword">for</span>(User users: userList)&#123;<br>            System.out.println(users);<br>        &#125;<br><br>        ois.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>运行结果：</strong><br><img src="/2020/04/24/IO%E5%9F%BA%E7%A1%80/6e8763a8e3814a153e0b76525f91568d.png" alt="在这里插入图片描述"></p><h2 id="6、transient关键字"><a href="#6、transient关键字" class="headerlink" title="6、transient关键字"></a>6、transient关键字</h2><p><code>transient</code>关键字表示游离的，不参与序列化</p><p>User类加入<code>transient</code>关键字修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> String name;<br></code></pre></td></tr></table></figure><p>再次运行结果：<br><img src="/2020/04/24/IO%E5%9F%BA%E7%A1%80/fae751bc5c13310fbebd03e422263db3.png" alt="在这里插入图片描述"></p><h1 id="7、File类"><a href="#7、File类" class="headerlink" title="7、File类"></a>7、File类</h1><p>File类和IO流四大家族没有关系，所以File类<strong>不能完成文件的读和写。</strong></p><p>位于<code>java.io.File</code> 下<br>File对象代表什么？</p><ul><li><strong>文件和路径名的抽象表达式</strong>。</li></ul><p>一个File对象有<strong>可能对应的是目录，也可能是文件</strong></p><ul><li>C:\Drivers 是一个File对象</li><li>C:\Drivers\Lan\Readme\Readme.txt 也是一个File对象</li></ul><p><strong>File只是一个路径名的抽象表达式。</strong></p><h2 id="File类的常用方法"><a href="#File类的常用方法" class="headerlink" title="File类的常用方法"></a>File类的常用方法</h2><p>创建一个File对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">File</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\file&quot;</span>) <br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><code>boolean exits()</code> <strong>判断文件是否存在</strong></p><p><code>boolean creatNewFile()</code> 以<strong>文件的形式创建</strong>出来</p><p><code>boolean mkdir()</code> 以<strong>目录的形式</strong>新建<br><code>boolean mkdirs()</code> <strong>多重目录</strong>的形式新建</p><p><code>String getParent()</code> 获取文件的<strong>父路径</strong><br><code>File getParentFile()</code> 获取文件的<strong>父文件</strong></p><p><code>File getAbsoluteFile()</code>：返回<strong>抽象路径文件</strong>。<br><code>String getAbsoulutePath()</code> <strong>获取文件的绝对路径</strong></p><p><code>boolean isAbsolute()</code>：测试此抽象路径名是否为<strong>绝对路径</strong>。<br><code>boolean isDirectory()</code>：测试此抽象路径名表示的文件是否为<strong>目录</strong>。<br><code>boolean isFile()</code> ：测试此抽象路径名表示的文件是否为<strong>普通文件</strong>。</p><p><code>long lastModified()</code>： 返回<strong>上次修改</strong>此抽象路径名表示的<strong>文件的时间</strong>。（从1970年到现在的毫秒）</p><p><code>File[] listFiles()</code>：返回一个<strong>抽象路径名数组</strong>，表示此抽象路径名<strong>表示的目录中的文件</strong>。（<strong>即获取当前目录下的所有子文件</strong>）</p><h1 id="8、IO流-Properties集合的联合使用"><a href="#8、IO流-Properties集合的联合使用" class="headerlink" title="8、IO流+Properties集合的联合使用"></a>8、IO流+Properties集合的联合使用</h1><h2 id="1、IO流-Properties集合的联合使用"><a href="#1、IO流-Properties集合的联合使用" class="headerlink" title="1、IO流+Properties集合的联合使用"></a>1、IO流+<a href="https://so.csdn.net/so/search?q=Properties&spm=1001.2101.3001.7020">Properties</a>集合的联合使用</h2><p>IO流：文件的读和写<br><strong><code>Properties</code>：是一个Map集合，key和value都是String类型</strong></p><p>设计理念：</p><p><strong>以后经常改变的数据，可以单独写到一个文件中，使用程序动态读取。将来只需要修改这个文件的内容，java代码不需要改动，不需要重新编译，服务器也不需要重启。就可以拿到动态的信息。</strong></p><p>类似于以上机制的这种文件被称为<strong>配置文件</strong><br>并且当配置文件中的内容格式是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">key1 = <span class="hljs-type">value</span><br><span class="hljs-variable">key2</span> <span class="hljs-operator">=</span> value <br><span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><p>的时候，我们把这种配置文件叫做<strong>属性配置文件</strong>。<br><img src="/2020/04/24/IO%E5%9F%BA%E7%A1%80/fed708b445ac0fecb5a56cb58f41a51c.png" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IoPropertiesTest01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//新建一个输入流对象</span><br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;src\\userinfo&quot;</span>);<br><br>        <span class="hljs-comment">//新建一个Map集合</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">pro</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br><br>        <span class="hljs-comment">//调用Properties对象的load方法将文件中的数据加载到Map集合中。</span><br>        pro.load(reader);<span class="hljs-comment">//文件中的数据顺着管道加载到Map集合中，其中等号=左边做key，右边做value</span><br><br>        <span class="hljs-comment">//通过key来获取value</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> pro.getProperty(<span class="hljs-string">&quot;username&quot;</span>);<br>        System.out.println(username);<br>        <br><span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> pro.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>        System.out.println(password);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2020/04/24/IO%E5%9F%BA%E7%A1%80/b173f4d619e069619ce9062033050fbf.png" alt="在这里插入图片描述"><br>java规范中有要求：属性配置文件建议以<code>.properties</code>结尾，但这不是必须的。<br>这种以<code>properties</code>结尾的文件在java中被称为：<strong>属性配置文件</strong>。<br>其中<code>properties</code>是专门存放属性配置文件内容的一个类。</p><h2 id="2、属性配置文件"><a href="#2、属性配置文件" class="headerlink" title="2、属性配置文件"></a>2、属性配置文件</h2><ul><li>属性配置文件中最好不要有空格。</li><li>属性配置文件中的key重复的话，value会自动覆盖！</li><li>#是注释</li><li>建议key和value之间使用&#x3D;的方式</li></ul>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>IO</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>IO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot学习笔记</title>
    <link href="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="1、Hello-World！"><a href="#1、Hello-World！" class="headerlink" title="1、Hello,World！"></a>1、Hello,World！</h2><p>SpringBoot简介</p><h3 id="1-1、回顾什么是Spring"><a href="#1-1、回顾什么是Spring" class="headerlink" title="1.1、回顾什么是Spring"></a>1.1、回顾什么是Spring</h3><p>Spring是一个开源框架，2003 年兴起的一个轻量级的Java 开发框架，作者：Rod Johnson 。</p><p><strong>Spring是为了解决企业级应用开发的复杂性而创建的，简化开发。</strong></p><h3 id="1-2、Spring是如何简化Java开发的"><a href="#1-2、Spring是如何简化Java开发的" class="headerlink" title="1.2、Spring是如何简化Java开发的"></a>1.2、Spring是如何简化Java开发的</h3><p>为了降低Java开发的复杂性，Spring采用了以下4种关键策略：</p><ol><li>基于POJO的轻量级和最小侵入性编程，所有东西都是bean；</li><li>通过IOC，依赖注入（DI）和面向接口实现松耦合；</li><li>基于切面（AOP）和惯例进行声明式编程；</li><li>通过切面和模版减少样式代码，RedisTemplate，xxxTemplate；</li></ol><h3 id="1-3、什么是SpringBoot"><a href="#1-3、什么是SpringBoot" class="headerlink" title="1.3、什么是SpringBoot"></a>1.3、什么是SpringBoot</h3><p>学过javaweb的同学就知道，开发一个web应用，从最初开始接触Servlet结合Tomcat, 跑出一个Hello Wolrld程序，是要经历特别多的步骤；后来就用了框架Struts，再后来是SpringMVC，到了现在的SpringBoot，过一两年又会有其他web框架出现；你们有经历过框架不断的演进，然后自己开发项目所有的技术也在不断的变化、改造吗？建议都可以去经历一遍；</p><p>言归正传，什么是SpringBoot呢，就是一个javaweb的开发框架，和SpringMVC类似，对比其他javaweb框架的好处，官方说是简化开发，约定大于配置， you can “just run”，能迅速的开发web应用，几行代码开发一个http接口。</p><p>所有的技术框架的发展似乎都遵循了一条主线规律：从一个复杂应用场景 衍生 一种规范框架，人们只需要进行各种配置而不需要自己去实现它，这时候强大的配置功能成了优点；发展到一定程度之后，人们根据实际生产应用情况，选取其中实用功能和设计精华，重构出一些轻量级的框架；之后为了提高开发效率，嫌弃原先的各类配置过于麻烦，于是开始提倡“约定大于配置”，进而衍生出一些一站式的解决方案。</p><p>是的这就是Java企业级应用-&gt;J2EE-&gt;spring-&gt;springboot的过程。</p><p>随着 Spring 不断的发展，涉及的领域越来越多，项目整合开发需要配合各种各样的文件，慢慢变得不那么易用简单，违背了最初的理念，甚至人称配置地狱。Spring Boot 正是在这样的一个背景下被抽象出来的开发框架，目的为了让大家更容易的使用 Spring 、更容易的集成各种常用的中间件、开源软件；</p><p>Spring Boot 基于 Spring 开发，Spirng Boot 本身并不提供 Spring 框架的核心特性以及扩展功能，只是用于快速、敏捷地开发新一代基于 Spring 框架的应用程序。也就是说，它并不是用来替代 Spring 的解决方案，而是和 Spring 框架紧密结合用于提升 Spring 开发者体验的工具。Spring Boot 以<strong>约定大于配置的核心思想</strong>，默认帮我们进行了很多设置，多数 Spring Boot 应用只需要很少的 Spring 配置。同时它集成了大量常用的第三方库配置（例如 Redis、MongoDB、Jpa、RabbitMQ、Quartz 等等），Spring Boot 应用中这些第三方库几乎可以零配置的开箱即用。</p><p>简单来说就是SpringBoot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了所有的jar包，spring boot整合了所有的框架 。</p><p>Spring Boot 出生名门，从一开始就站在一个比较高的起点，又经过这几年的发展，生态足够完善，Spring Boot 已经当之无愧成为 Java 领域最热门的技术。</p><p><strong>Spring Boot的主要优点：</strong></p><ul><li>为所有Spring开发者更快的入门</li><li><strong>开箱即用</strong>，提供各种默认配置来简化项目配置</li><li>内嵌式容器简化Web项目</li><li>没有冗余代码生成和XML配置的要求</li></ul><p>真的很爽，我们快速去体验开发个接口的感觉吧！</p><p>Hello，World</p><h3 id="1-4、准备工作"><a href="#1-4、准备工作" class="headerlink" title="1.4、准备工作"></a>1.4、准备工作</h3><p>我们将学习如何快速的创建一个Spring Boot应用，并且实现一个简单的Http请求处理。通过这个例子对Spring Boot有一个初步的了解，并体验其结构简单、开发快速的特性。</p><p>我的环境准备：</p><ul><li>java version “1.8.0_181”</li><li>Maven-3.6.1</li><li>SpringBoot 2.x 最新版</li></ul><p>开发工具：</p><ul><li>IDEA</li></ul><h3 id="1-5、创建基础项目说明"><a href="#1-5、创建基础项目说明" class="headerlink" title="1.5、创建基础项目说明"></a>1.5、创建基础项目说明</h3><p>Spring官方提供了非常方便的工具让我们快速构建应用</p><p>Spring Initializr：<a href="https://start.spring.io/">https://start.spring.io/</a></p><p><strong>项目创建方式一：</strong> 使用Spring Initializr 的 Web页面创建项目</p><p>1、打开 <a href="https://start.spring.io/">https://start.spring.io/</a></p><p>2、填写项目信息</p><p>3、点击”Generate Project“按钮生成项目；下载此项目</p><p>4、解压项目包，并用IDEA以Maven项目导入，一路下一步即可，直到项目导入完毕。</p><p>5、如果是第一次使用，可能速度会比较慢，包比较多、需要耐心等待一切就绪。</p><p><strong>项目创建方式二：</strong> 使用 IDEA 直接创建项目</p><ol><li>创建一个新项目</li><li>选择spring initalizr ， 可以看到默认就是去官网的快速构建工具那里实现</li><li>填写项目信息</li><li>选择初始化的组件（初学勾选 Web 即可）</li><li>填写项目路径</li><li>等待项目构建成功</li></ol><p><strong>项目结构分析：</strong></p><p>通过上面步骤完成了基础项目的创建。就会自动生成以下文件。</p><ol><li>程序的主启动类</li><li>一个 application.properties 配置文件</li><li>一个 测试类</li><li>一个 pom.xml</li></ol><h3 id="1-6、pom-xml-分析"><a href="#1-6、pom-xml-分析" class="headerlink" title="1.6、pom.xml 分析"></a>1.6、pom.xml 分析</h3><p>打开pom.xml，看看Spring Boot项目的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 父依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- web场景启动器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- springboot单元测试 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 剔除依赖 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.vintage<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-vintage-engine<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 打包插件 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-7、编写一个http接口"><a href="#1-7、编写一个http接口" class="headerlink" title="1.7、编写一个http接口"></a>1.7、编写一个http接口</h3><p>1、在主程序的同级目录下，新建一个controller包，一定要在同级目录下，否则识别不到</p><p>2、在包中新建一个HelloController类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello World&quot;</span>;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>3、编写完毕后，从主程序启动项目，浏览器发起请求，看页面返回；控制台输出了 Tomcat 访问的端口号！</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/cff0aac6c36b3c1747b048df83d1f1d5.png" alt="img"></p><p>简单几步，就完成了一个web接口的开发，SpringBoot就是这么简单。所以我们常用它来建立我们的微服务项目！</p><h3 id="1-8、将项目打成jar包，点击-maven的-package"><a href="#1-8、将项目打成jar包，点击-maven的-package" class="headerlink" title="1.8、将项目打成jar包，点击 maven的 package"></a>1.8、将项目打成jar包，点击 maven的 package</h3><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/46b58ae6eb538d6678e1bd2cbafcda96.png" alt="img"></p><p>如果遇到以上错误，可以配置打包时 跳过项目运行测试用例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    在工作中,很多情况下我们打包是不想执行测试用例的</span><br><span class="hljs-comment">    可能是测试用例不完事,或是测试用例会影响数据库数据</span><br><span class="hljs-comment">    跳过测试用例执</span><br><span class="hljs-comment">    --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--跳过项目运行测试用例--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">skipTests</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">skipTests</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果打包成功，则会在target目录下生成一个 jar 包</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/a9e40b8559c71c68af2e364ff028053e.png" alt="img"></p><p>打成了jar包后，就可以在任何地方运行了！OK</p><p><strong>彩蛋</strong></p><p>如何更改启动时显示的字符拼成的字母，SpringBoot呢？也就是 banner 图案；</p><p>只需一步：到项目下的 resources 目录下新建一个banner.txt 即可。</p><p>图案可以到：<a href="https://www.bootschool.net/ascii">https://www.bootschool.net/ascii</a> 这个网站生成，然后拷贝到文件中即可！</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/e12cb07f4d2e431e38e1b5a4a83454b7.png" alt="img"></p><h2 id="2、运行原理初探"><a href="#2、运行原理初探" class="headerlink" title="2、运行原理初探"></a>2、运行原理初探</h2><p>我们之前写的HelloSpringBoot，到底是怎么运行的呢，Maven项目，我们一般从pom.xml文件探究起；</p><blockquote><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<strong>pom.xml</strong> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p></blockquote><h3 id="2-1、父依赖"><a href="#2-1、父依赖" class="headerlink" title="2.1、父依赖"></a>2.1、父依赖</h3><p>其中它主要是依赖一个父项目，主要是管理项目的资源过滤及插件！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><p>点进去，发现还有一个父依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">relativePath</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里才是真正管理SpringBoot应用里面所有依赖版本的地方，SpringBoot的版本控制中心；</p><p><strong>以后我们导入依赖默认是不需要写版本；但是如果导入的包没有在依赖中管理着就需要手动配置版本了；</strong></p><h3 id="2-2、启动器-spring-boot-starter"><a href="#2-2、启动器-spring-boot-starter" class="headerlink" title="2.2、启动器 spring-boot-starter"></a>2.2、启动器 <a href="https://so.csdn.net/so/search?q=spring-boot&spm=1001.2101.3001.7020">spring-boot</a>-starter</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>springboot-boot-starter-xxx</strong>：就是spring-boot的场景启动器</p><p><strong>spring-boot-starter-web</strong>：帮我们导入了web模块正常运行所依赖的组件；</p><p>SpringBoot将所有的功能场景都抽取出来，做成一个个的starter （启动器），只需要在项目中引入这些starter即可，所有相关的依赖都会导入进来 ， 我们要用什么功能就导入什么样的场景启动器即可 ；我们未来也可以自己自定义 starter；</p><blockquote><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<strong>主启动类</strong> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p></blockquote><p>分析完了 pom.xml 来看看这个启动类</p><h3 id="2-3、默认的主启动类"><a href="#2-3、默认的主启动类" class="headerlink" title="2.3、默认的主启动类"></a>2.3、默认的主启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@SpringBootApplication 来标注一个主程序类</span><br><span class="hljs-comment">//说明这是一个Spring Boot应用</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootApplication</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>     <span class="hljs-comment">//以为是启动了一个方法，没想到启动了一个服务</span><br>      SpringApplication.run(SpringbootApplication.class, args);<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>但是**一个简单的启动类并不简单！**我们来分析一下这些注解都干了什么</p><h3 id="2-4、-SpringBootApplication"><a href="#2-4、-SpringBootApplication" class="headerlink" title="2.4、@SpringBootApplication"></a>2.4、@SpringBootApplication</h3><p>作用：标注在某个类上说明这个类是SpringBoot的主配置类 ， SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；</p><p>进入这个注解：可以看到上面还有很多其他注解！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootConfiguration</span><br><span class="hljs-meta">@EnableAutoConfiguration</span><br><span class="hljs-meta">@ComponentScan(</span><br><span class="hljs-meta">    excludeFilters = &#123;@Filter(</span><br><span class="hljs-meta">    type = FilterType.CUSTOM,</span><br><span class="hljs-meta">    classes = &#123;TypeExcludeFilter.class&#125;</span><br><span class="hljs-meta">), @Filter(</span><br><span class="hljs-meta">    type = FilterType.CUSTOM,</span><br><span class="hljs-meta">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span><br><span class="hljs-meta">)&#125;</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> SpringBootApplication &#123;<br>    <span class="hljs-comment">// ......</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-5、-ComponentScan"><a href="#2-5、-ComponentScan" class="headerlink" title="2.5、@ComponentScan"></a>2.5、@ComponentScan</h3><p>这个注解在Spring中很重要 ,它对应XML配置中的元素。</p><p>作用：自动扫描并加载符合条件的组件或者bean ， 将这个bean定义加载到IOC容器中</p><h3 id="2-6、-SpringBootConfiguration"><a href="#2-6、-SpringBootConfiguration" class="headerlink" title="2.6、@SpringBootConfiguration"></a>2.6、@SpringBootConfiguration</h3><p>作用：SpringBoot的配置类 ，标注在某个类上 ， 表示这是一个SpringBoot的配置类；</p><p>我们继续进去这个注解查看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 点进去得到下面的 @Component</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> SpringBootConfiguration &#123;&#125;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Configuration &#123;&#125;<br></code></pre></td></tr></table></figure><p>这里的 @Configuration，说明这是一个配置类 ，配置类就是对应Spring的xml 配置文件；</p><p>里面的 @Component 这就说明，启动类本身也是Spring中的一个组件而已，负责启动应用！</p><p>我们回到 SpringBootApplication 注解中继续看。</p><h3 id="2-7、-EnableAutoConfiguration"><a href="#2-7、-EnableAutoConfiguration" class="headerlink" title="2.7、@EnableAutoConfiguration"></a>2.7、@EnableAutoConfiguration</h3><p><strong>@EnableAutoConfiguration ：开启自动配置功能</strong></p><p>以前我们需要自己配置的东西，而现在SpringBoot可以自动帮我们配置 ；@EnableAutoConfiguration告诉SpringBoot开启自动配置功能，这样自动配置才能生效；</p><p>点进注解接续查看：</p><p><strong>@AutoConfigurationPackage ：自动配置包</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Import(&#123;Registrar.class&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> AutoConfigurationPackage &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>@import</strong> ：Spring底层注解@import ， 给容器中导入一个组件</p><p>Registrar.class 作用：将主启动类的所在包及包下面所有子包里面的所有组件扫描到Spring容器 ；</p><p>这个分析完了，退到上一步，继续看</p><p><strong>@Import({AutoConfigurationImportSelector.class}) ：给容器导入组件 ；</strong></p><p>AutoConfigurationImportSelector ：自动配置导入选择器，那么它会导入哪些组件的选择器呢？我们点击去这个类看源码：</p><p>1、这个类中有一个这样的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获得候选的配置</span><br><span class="hljs-keyword">protected</span> List&lt;String&gt; <span class="hljs-title function_">getCandidateConfigurations</span><span class="hljs-params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> &#123;<br>    <span class="hljs-comment">//这里的getSpringFactoriesLoaderFactoryClass（）方法</span><br>    <span class="hljs-comment">//返回的就是我们最开始看的启动自动导入配置文件的注解类；EnableAutoConfiguration</span><br>    List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(<span class="hljs-built_in">this</span>.getSpringFactoriesLoaderFactoryClass(), <span class="hljs-built_in">this</span>.getBeanClassLoader());<br>    Assert.notEmpty(configurations, <span class="hljs-string">&quot;No auto configuration classes found in META-INF/spring.factories. If you are using a custom packaging, make sure that file is correct.&quot;</span>);<br>    <span class="hljs-keyword">return</span> configurations;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、这个方法又调用了 SpringFactoriesLoader 类的静态方法！我们进入SpringFactoriesLoader类loadFactoryNames() 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title function_">loadFactoryNames</span><span class="hljs-params">(Class&lt;?&gt; factoryClass, <span class="hljs-meta">@Nullable</span> ClassLoader classLoader)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">factoryClassName</span> <span class="hljs-operator">=</span> factoryClass.getName();<br>    <span class="hljs-comment">//这里它又调用了 loadSpringFactories 方法</span><br>    <span class="hljs-keyword">return</span> (List)loadSpringFactories(classLoader).getOrDefault(factoryClassName, Collections.emptyList());<br>&#125;<br></code></pre></td></tr></table></figure><p>3、我们继续点击查看 loadSpringFactories 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; <span class="hljs-title function_">loadSpringFactories</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> ClassLoader classLoader)</span> &#123;<br>    <span class="hljs-comment">//获得classLoader ， 我们返回可以看到这里得到的就是EnableAutoConfiguration标注的类本身</span><br>    MultiValueMap&lt;String, String&gt; result = (MultiValueMap)cache.get(classLoader);<br>    <span class="hljs-keyword">if</span> (result != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//去获取一个资源 &quot;META-INF/spring.factories&quot;</span><br>            Enumeration&lt;URL&gt; urls = classLoader != <span class="hljs-literal">null</span> ? classLoader.getResources(<span class="hljs-string">&quot;META-INF/spring.factories&quot;</span>) : ClassLoader.getSystemResources(<span class="hljs-string">&quot;META-INF/spring.factories&quot;</span>);<br>            <span class="hljs-type">LinkedMultiValueMap</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedMultiValueMap</span>();<br><br>            <span class="hljs-comment">//将读取到的资源遍历，封装成为一个Properties</span><br>            <span class="hljs-keyword">while</span>(urls.hasMoreElements()) &#123;<br>                <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> (URL)urls.nextElement();<br>                <span class="hljs-type">UrlResource</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UrlResource</span>(url);<br>                <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> PropertiesLoaderUtils.loadProperties(resource);<br>                <span class="hljs-type">Iterator</span> <span class="hljs-variable">var6</span> <span class="hljs-operator">=</span> properties.entrySet().iterator();<br><br>                <span class="hljs-keyword">while</span>(var6.hasNext()) &#123;<br>                    Entry&lt;?, ?&gt; entry = (Entry)var6.next();<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">factoryClassName</span> <span class="hljs-operator">=</span> ((String)entry.getKey()).trim();<br>                    String[] var9 = StringUtils.commaDelimitedListToStringArray((String)entry.getValue());<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">var10</span> <span class="hljs-operator">=</span> var9.length;<br><br>                    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">var11</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; var11 &lt; var10; ++var11) &#123;<br>                        <span class="hljs-type">String</span> <span class="hljs-variable">factoryName</span> <span class="hljs-operator">=</span> var9[var11];<br>                        result.add(factoryClassName, factoryName.trim());<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>            cache.put(classLoader, result);<br>            <span class="hljs-keyword">return</span> result;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException var13) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Unable to load factories from location [META-INF/spring.factories]&quot;</span>, var13);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4、发现一个多次出现的文件：spring.factories，全局搜索它</p><h3 id="2-8、spring-factories"><a href="#2-8、spring-factories" class="headerlink" title="2.8、spring.factories"></a>2.8、spring.factories</h3><p>我们根据源头打开spring.factories ， 看到了很多自动配置的文件；这就是自动配置根源所在！</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ccedcf162b3bf563743363d3e287eb7c.png" alt="img"></p><p><strong>WebMvcAutoConfiguration</strong></p><p>我们在上面的自动配置类随便找一个打开看看，比如 ：WebMvcAutoConfiguration</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/21aa975ccb6663a298fe72a40697dfb2.png" alt="img"></p><p>可以看到这些一个个的都是JavaConfig配置类，而且都注入了一些Bean，可以找一些自己认识的类，看着熟悉一下！</p><p>所以，自动配置真正实现是从classpath中搜寻所有的META-INF&#x2F;spring.factories配置文件 ，并将其中对应的 org.springframework.boot.autoconfigure. 包下的配置项，通过反射实例化为对应标注了 @Configuration的JavaConfig形式的IOC容器配置类 ， 然后将这些都汇总成为一个实例并加载到IOC容器中。</p><p><strong>结论：</strong></p><ol><li>SpringBoot在启动的时候从类路径下的META-INF&#x2F;spring.factories中获取EnableAutoConfiguration指定的值</li><li>将这些值作为自动配置类导入容器 ， 自动配置类就生效 ， 帮我们进行自动配置工作；</li><li>整个J2EE的整体解决方案和自动配置都在springboot-autoconfigure的jar包中；</li><li>它会给容器中导入非常多的自动配置类 （xxxAutoConfiguration）, 就是给容器中导入这个场景需要的所有组件 ， 并配置好这些组件 ；</li><li>有了自动配置类 ， 免去了我们手动编写配置注入功能组件等的工作；</li></ol><p><strong>现在大家应该大概的了解了下，SpringBoot的运行原理，后面我们还会深化一次！</strong></p><blockquote><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<strong>SpringApplication</strong> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p></blockquote><h3 id="2-9、不简单的方法"><a href="#2-9、不简单的方法" class="headerlink" title="2.9、不简单的方法"></a>2.9、不简单的方法</h3><p>我最初以为就是运行了一个main方法，没想到却开启了一个服务；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(SpringbootApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>SpringApplication.run分析</strong></p><p>分析该方法主要分两部分，一部分是SpringApplication的实例化，二是run方法的执行；</p><h3 id="2-10、SpringApplication"><a href="#2-10、SpringApplication" class="headerlink" title="2.10、SpringApplication"></a>2.10、SpringApplication</h3><p><strong>这个类主要做了以下四件事情：</strong></p><p>1、推断应用的类型是普通的项目还是Web项目</p><p>2、查找并加载所有可用初始化器 ， 设置到initializers属性中</p><p>3、找出所有的应用程序监听器，设置到listeners属性中</p><p>4、推断并设置main方法的定义类，找到运行的主类</p><p>查看构造器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">SpringApplication</span><span class="hljs-params">(ResourceLoader resourceLoader, Class... primarySources)</span> &#123;<br>    <span class="hljs-comment">// ......</span><br>    <span class="hljs-built_in">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();<br>    <span class="hljs-built_in">this</span>.setInitializers(<span class="hljs-built_in">this</span>.getSpringFactoriesInstances();<br>    <span class="hljs-built_in">this</span>.setListeners(<span class="hljs-built_in">this</span>.getSpringFactoriesInstances(ApplicationListener.class));<br>    <span class="hljs-built_in">this</span>.mainApplicationClass = <span class="hljs-built_in">this</span>.deduceMainApplicationClass();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-11、run方法流程分析"><a href="#2-11、run方法流程分析" class="headerlink" title="2.11、run方法流程分析"></a>2.11、run方法流程分析</h3><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/d3add6e930218feb3d011a84f9297ced.png" alt="img"><br>跟着源码和这幅图就可以一探究竟了！</p><h2 id="3、yaml配置注入"><a href="#3、yaml配置注入" class="headerlink" title="3、yaml配置注入"></a>3、yaml配置注入</h2><p>yaml语法学习</p><h3 id="3-1、配置文件"><a href="#3-1、配置文件" class="headerlink" title="3.1、配置文件"></a>3.1、配置文件</h3><p>SpringBoot使用一个全局的配置文件 ， 配置文件名称是固定的</p><ul><li>application.properties</li><li><ul><li>语法结构 ：key&#x3D;value</li></ul></li><li>application.yml</li><li><ul><li>语法结构 ：key：空格 value</li></ul></li></ul><p><strong>配置文件的作用</strong> ：修改SpringBoot自动配置的默认值，因为SpringBoot在底层都给我们自动配置好了；</p><p>比如我们可以在配置文件中修改Tomcat 默认启动的端口号！测试一下！</p><ul><li>server.port&#x3D;8081</li></ul><h3 id="3-2、yaml概述"><a href="#3-2、yaml概述" class="headerlink" title="3.2、yaml概述"></a>3.2、yaml概述</h3><p>YAML是 “YAML Ain’t a Markup Language” （YAML不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：“Yet Another Markup Language”（仍是一种标记语言）</p><p><strong>这种语言以数据作为中心，而不是以标记语言为重点！</strong></p><p>以前的配置文件，大多数都是使用xml来配置；比如一个简单的端口配置，我们来对比下yaml和xml</p><p>传统xml配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">server</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>8081<span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">server</span>&gt;</span><br></code></pre></td></tr></table></figure><p>yaml配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">server：</span><br>  <span class="hljs-attr">prot:</span> <span class="hljs-number">8080</span><br></code></pre></td></tr></table></figure><h3 id="3-3、yaml基础语法"><a href="#3-3、yaml基础语法" class="headerlink" title="3.3、yaml基础语法"></a>3.3、yaml基础语法</h3><p>说明：语法要求严格！</p><p>1、空格不能省略</p><p>2、以缩进来控制层级关系，只要是左边对齐的一列数据都是同一个层级的。</p><p>3、属性和值的大小写都是十分敏感的。</p><p><strong>字面量：普通的值 [ 数字，布尔值，字符串 ]</strong></p><p>字面量直接写在后面就可以 ， 字符串默认不用加上双引号或者单引号；</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">k:</span> <span class="hljs-string">v</span><br></code></pre></td></tr></table></figure><p>注意：</p><ul><li><p>“ ” 双引号，不会转义字符串里面的特殊字符 ， 特殊字符会作为本身想表示的意思；</p><p>比如 ：name: “kuang \n shen” 输出 ：kuang 换行 shen</p></li><li><p>‘’ 单引号，会转义特殊字符 ， 特殊字符最终会变成和普通字符一样输出</p><p>比如 ：name: ‘kuang \n shen’ 输出 ：kuang \n shen</p></li></ul><p><strong>对象、Map（键值对）</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment">#对象、Map格式</span><br><span class="hljs-attr">k:</span> <br>    <span class="hljs-attr">v1:</span><br>    <span class="hljs-attr">v2:</span><br></code></pre></td></tr></table></figure><p>在下一行来写对象的属性和值得关系，注意缩进；比如：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">student:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">qinjiang</span><br>    <span class="hljs-attr">age:</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>行内写法</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">student:</span> &#123;<span class="hljs-attr">name:</span> <span class="hljs-string">qinjiang</span>,<span class="hljs-attr">age:</span> <span class="hljs-number">3</span>&#125;<br></code></pre></td></tr></table></figure><p><strong>数组（ List、set ）</strong></p><p>用 - 值表示数组中的一个元素,比如：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">pets:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">cat</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">dog</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">pig</span><br></code></pre></td></tr></table></figure><p>行内写法</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">pets:</span> [<span class="hljs-string">cat</span>,<span class="hljs-string">dog</span>,<span class="hljs-string">pig</span>]<br></code></pre></td></tr></table></figure><p><strong>修改SpringBoot的默认端口号</strong></p><p>配置文件中添加，端口号的参数，就可以切换端口；</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span>  <br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8082</span><br></code></pre></td></tr></table></figure><p>注入配置文件</p><p>yaml文件更强大的地方在于，他可以给我们的实体类直接注入匹配值！</p><h3 id="3-4、yaml注入配置文件"><a href="#3-4、yaml注入配置文件" class="headerlink" title="3.4、yaml注入配置文件"></a>3.4、yaml注入配置文件</h3><p>1、在springboot项目中的resources目录下新建一个文件 application.yml</p><p>2、编写一个实体类 Dog；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.springboot.pojo;<br><br><span class="hljs-meta">@Component</span>  <span class="hljs-comment">//注册bean到容器中</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <br>    <span class="hljs-comment">//有参无参构造、get、set方法、toString()方法  </span><br>&#125;<br></code></pre></td></tr></table></figure><p>3、思考，我们原来是如何给bean注入属性值的！@Value，给狗狗类测试一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span> <span class="hljs-comment">//注册bean</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;阿黄&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-meta">@Value(&quot;18&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer age;<br>&#125;<br></code></pre></td></tr></table></figure><p>4、在SpringBoot的测试类下注入狗狗输出一下；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span> <span class="hljs-comment">//将狗狗自动注入进来</span><br>    Dog dog;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(dog); <span class="hljs-comment">//打印看下狗狗对象</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>结果成功输出，@Value注入成功，这是我们原来的办法对吧。</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/f4b5b469d501459276edfcdca7593736.png" alt="img"></p><p>5、我们在编写一个复杂一点的实体类：Person 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span> <span class="hljs-comment">//注册bean到容器中</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Boolean happy;<br>    <span class="hljs-keyword">private</span> Date birth;<br>    <span class="hljs-keyword">private</span> Map&lt;String,Object&gt; maps;<br>    <span class="hljs-keyword">private</span> List&lt;Object&gt; lists;<br>    <span class="hljs-keyword">private</span> Dog dog;<br>    <br>    <span class="hljs-comment">//有参无参构造、get、set方法、toString()方法  </span><br>&#125;<br></code></pre></td></tr></table></figure><p>6、我们来使用yaml配置的方式进行注入，大家写的时候注意区别和优势，我们编写一个yaml配置！</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">person:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">qinjiang</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">happy:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">birth:</span> <span class="hljs-number">2000</span><span class="hljs-string">/01/01</span><br>  <span class="hljs-attr">maps:</span> &#123;<span class="hljs-attr">k1:</span> <span class="hljs-string">v1</span>,<span class="hljs-attr">k2:</span> <span class="hljs-string">v2</span>&#125;<br>  <span class="hljs-attr">lists:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">code</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">girl</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">music</span><br>  <span class="hljs-attr">dog:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">旺财</span><br>    <span class="hljs-attr">age:</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>7、我们刚才已经把person这个对象的所有值都写好了，我们现在来注入到我们的类中！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">@ConfigurationProperties作用：</span><br><span class="hljs-comment">将配置文件中配置的每一个属性的值，映射到这个组件中；</span><br><span class="hljs-comment">告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定</span><br><span class="hljs-comment">参数 prefix = “person” : 将配置文件中的person下面的所有属性一一对应</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Component</span> <span class="hljs-comment">//注册bean</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Boolean happy;<br>    <span class="hljs-keyword">private</span> Date birth;<br>    <span class="hljs-keyword">private</span> Map&lt;String,Object&gt; maps;<br>    <span class="hljs-keyword">private</span> List&lt;Object&gt; lists;<br>    <span class="hljs-keyword">private</span> Dog dog;<br>&#125;<br></code></pre></td></tr></table></figure><p>8、IDEA 提示，springboot配置注解处理器没有找到，让我们看文档，我们可以查看文档，找到一个依赖！</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/a649492c5790c6094179cc188da9549b.png" alt="img"></p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ec908c08207d9bfb692323354102cd84.png" alt="img"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 导入配置文件处理器，配置文件进行绑定就会有提示，需要重启 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>9、确认以上配置都OK之后，我们去测试类中测试一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    Person person; <span class="hljs-comment">//将person自动注入进来</span><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(person); <span class="hljs-comment">//打印person信息</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>结果：所有值全部注入成功！</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/212158dbd10ae36dc1ddf9d59cabed41.png" alt="img"></p><p><strong>yaml配置注入到实体类完全OK！</strong></p><p>课堂测试：</p><p>1、将配置文件的key 值 和 属性的值设置为不一样，则结果输出为null，注入失败</p><p>2、在配置一个person2，然后将 @ConfigurationProperties(prefix &#x3D; “person2”) 指向我们的person2；</p><h3 id="3-5、加载指定的配置文件"><a href="#3-5、加载指定的配置文件" class="headerlink" title="3.5、加载指定的配置文件"></a>3.5、加载指定的配置文件</h3><p>**@PropertySource ：**加载指定的配置文件；</p><p><strong>@configurationProperties</strong>：默认从全局配置文件中获取值；</p><p>1、我们去在resources目录下新建一个<strong>person.properties</strong>文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">name</span>=<span class="hljs-string">kuangshen</span><br></code></pre></td></tr></table></figure><p>2、然后在我们的代码中指定加载person.properties文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PropertySource(value = &quot;classpath:person.properties&quot;)</span><br><span class="hljs-meta">@Component</span> <span class="hljs-comment">//注册bean</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;name&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    ......  <br>&#125;<br></code></pre></td></tr></table></figure><p>3、再次输出测试一下：指定配置文件绑定成功！</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9605695dd77fb69bfce15a9a652e7e1a.png" alt="img"></p><h3 id="3-6、配置文件占位符"><a href="#3-6、配置文件占位符" class="headerlink" title="3.6、配置文件占位符"></a>3.6、配置文件占位符</h3><p>配置文件还可以编写占位符生成随机数</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">person:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">qinjiang$&#123;random.uuid&#125;</span> <span class="hljs-comment"># 随机uuid</span><br>    <span class="hljs-attr">age:</span> <span class="hljs-string">$&#123;random.int&#125;</span>  <span class="hljs-comment"># 随机int</span><br>    <span class="hljs-attr">happy:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">birth:</span> <span class="hljs-number">2000</span><span class="hljs-string">/01/01</span><br>    <span class="hljs-attr">maps:</span> &#123;<span class="hljs-attr">k1:</span> <span class="hljs-string">v1</span>,<span class="hljs-attr">k2:</span> <span class="hljs-string">v2</span>&#125;<br>    <span class="hljs-attr">lists:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">code</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">girl</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">music</span><br>    <span class="hljs-attr">dog:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">$&#123;person.hello:other&#125;_旺财</span><br>      <span class="hljs-attr">age:</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="3-7、回顾properties配置"><a href="#3-7、回顾properties配置" class="headerlink" title="3.7、回顾properties配置"></a>3.7、回顾properties配置</h3><p>我们上面采用的yaml方法都是最简单的方式，开发中最常用的；也是springboot所推荐的！那我们来唠唠其他的实现方式，道理都是相同的；写还是那样写；配置文件除了yml还有我们之前常用的properties ， 我们没有讲，我们来唠唠！</p><p>【注意】properties配置文件在写中文的时候，会有乱码 ， 我们需要去IDEA中设置编码格式为UTF-8；</p><p>settings–&gt;FileEncodings 中配置；</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7bff4ffc9659deac539004cc935f2de2.png" alt="img"></p><p><strong>测试步骤：</strong></p><p>1、新建一个实体类User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span> <span class="hljs-comment">//注册bean</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String sex;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、编辑配置文件 user.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">user1.name</span>=<span class="hljs-string">kuangshen</span><br><span class="hljs-attr">user1.age</span>=<span class="hljs-string">18user1.sex=男</span><br></code></pre></td></tr></table></figure><p>3、我们在User类上使用@Value来进行注入！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span> <span class="hljs-comment">//注册bean</span><br><span class="hljs-meta">@PropertySource(value = &quot;classpath:user.properties&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-comment">//直接使用@value</span><br>    <span class="hljs-meta">@Value(&quot;$&#123;user.name&#125;&quot;)</span> <span class="hljs-comment">//从配置文件中取值</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-meta">@Value(&quot;#&#123;9*2&#125;&quot;)</span>  <span class="hljs-comment">// #&#123;SPEL&#125; Spring表达式</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-meta">@Value(&quot;男&quot;)</span>  <span class="hljs-comment">// 字面量</span><br>    <span class="hljs-keyword">private</span> String sex;<br>&#125;<br></code></pre></td></tr></table></figure><p>4、Springboot测试</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">user1.name</span>=kuangshen<br><span class="hljs-attr">user1.age</span>=<span class="hljs-number">18</span><br><span class="hljs-attr">user1.sex</span>=男<br></code></pre></td></tr></table></figure><p>结果正常输出：</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/54ad5658245e88d2ffc98d2812169e38.png" alt="img"></p><h3 id="3-8、对比小结"><a href="#3-8、对比小结" class="headerlink" title="3.8、对比小结"></a>3.8、对比小结</h3><p>@Value这个使用起来并不友好！我们需要为每个属性单独注解赋值，比较麻烦；我们来看个功能对比图</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/d71f74fa21dd90be0a1059a6b212ec9f.png" alt="img"></p><p>1、@ConfigurationProperties只需要写一次即可 ， @Value则需要每个字段都添加</p><p>2、松散绑定：这个什么意思呢? 比如我的yml中写的last-name，这个和lastName是一样的， - 后面跟着的字母默认是大写的。这就是松散绑定。可以测试一下</p><p>3、<a href="https://so.csdn.net/so/search?q=JSR303&spm=1001.2101.3001.7020">JSR303</a>数据校验 ， 这个就是我们可以在字段是增加一层过滤器验证 ， 可以保证数据的合法性</p><p>4、复杂类型封装，yml中可以封装对象 ， 使用value就不支持</p><p><strong>结论：</strong></p><p>配置yml和配置properties都可以获取到值 ， 强烈推荐 yml；</p><p>如果我们在某个业务中，只需要获取配置文件中的某个值，可以使用一下 @value；</p><p>如果说，我们专门编写了一个JavaBean来和配置文件进行一一映射，就直接@configurationProperties，不要犹豫！</p><h2 id="4、JSR303数据校验及多环境切换"><a href="#4、JSR303数据校验及多环境切换" class="headerlink" title="4、JSR303数据校验及多环境切换"></a>4、JSR303<a href="https://so.csdn.net/so/search?q=%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C&spm=1001.2101.3001.7020">数据校验</a>及多环境切换</h2><p>JSR303数据校验</p><h3 id="4-1、先看看如何使用"><a href="#4-1、先看看如何使用" class="headerlink" title="4.1、先看看如何使用"></a>4.1、先看看如何使用</h3><p>Springboot中可以用@validated来校验数据，如果数据异常则会统一抛出异常，方便异常中心统一处理。我们这里来写个注解让我们的name只能支持Email格式；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span> <span class="hljs-comment">//注册bean</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span><br><span class="hljs-meta">@Validated</span>  <span class="hljs-comment">//数据校验</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><br>    <span class="hljs-meta">@Email(message=&quot;邮箱格式错误&quot;)</span> <span class="hljs-comment">//name必须是邮箱格式</span><br>    <span class="hljs-keyword">private</span> String name;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果 ：default message [不是一个合法的电子邮件地址];</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5d3ef1ba0d27f2364f2d91633b595b04.png" alt="img"></p><p><strong>使用数据校验，可以保证数据的正确性；</strong></p><h3 id="4-2、常见参数"><a href="#4-2、常见参数" class="headerlink" title="4.2、常见参数"></a>4.2、常见参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@NotNull(message=&quot;名字不能为空&quot;)</span><br><span class="hljs-keyword">private</span> String userName;<br><span class="hljs-meta">@Max(value=120,message=&quot;年龄最大不能查过120&quot;)</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><span class="hljs-meta">@Email(message=&quot;邮箱格式错误&quot;)</span><br><span class="hljs-keyword">private</span> String email;<br><br>空检查<br><span class="hljs-meta">@Null</span>       验证对象是否为<span class="hljs-literal">null</span><br><span class="hljs-meta">@NotNull</span>    验证对象是否不为<span class="hljs-literal">null</span>, 无法查检长度为<span class="hljs-number">0</span>的字符串<br><span class="hljs-meta">@NotBlank</span>   检查约束字符串是不是Null还有被Trim的长度是否大于<span class="hljs-number">0</span>,只对字符串,且会去掉前后空格.<br><span class="hljs-meta">@NotEmpty</span>   检查约束元素是否为NULL或者是EMPTY.<br>    <br>Booelan检查<br><span class="hljs-meta">@AssertTrue</span>     验证 Boolean 对象是否为 <span class="hljs-literal">true</span>  <br><span class="hljs-meta">@AssertFalse</span>    验证 Boolean 对象是否为 <span class="hljs-literal">false</span>  <br>    <br>长度检查<br><span class="hljs-meta">@Size(min=, max=)</span> 验证对象（Array,Collection,Map,String）长度是否在给定的范围之内  <br><span class="hljs-meta">@Length(min=, max=)</span> string is between min and max included.<br><br>日期检查<br><span class="hljs-meta">@Past</span>       验证 Date 和 Calendar 对象是否在当前时间之前  <br><span class="hljs-meta">@Future</span>     验证 Date 和 Calendar 对象是否在当前时间之后  <br><span class="hljs-meta">@Pattern</span>    验证 String 对象是否符合正则表达式的规则<br><br>.......等等<br>除此以外，我们还可以自定义一些数据校验规则<br></code></pre></td></tr></table></figure><p>多环境切换</p><p>profile是Spring对不同环境提供不同配置功能的支持，可以通过激活不同的环境版本，实现快速切换环境；</p><h3 id="4-3、多配置文件"><a href="#4-3、多配置文件" class="headerlink" title="4.3、多配置文件"></a>4.3、多配置文件</h3><p>我们在主配置文件编写的时候，文件名可以是 application-{profile}.properties&#x2F;yml , 用来指定多个环境版本；</p><p><strong>例如：</strong></p><p>application-test.properties 代表测试环境配置</p><p>application-dev.properties 代表开发环境配置</p><p>但是Springboot并不会直接启动这些配置文件，它<strong>默认使用application.properties主配置文件</strong>；</p><p>我们需要通过一个配置来选择需要激活的环境：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#比如在配置文件中指定使用dev环境，我们可以通过设置不同的端口号进行测试；</span><br><span class="hljs-comment">#我们启动SpringBoot，就可以看到已经切换到dev下的配置了；</span><br><span class="hljs-attr">spring.profiles.active</span>=<span class="hljs-string">dev</span><br></code></pre></td></tr></table></figure><h3 id="4-4、yaml的多文档块"><a href="#4-4、yaml的多文档块" class="headerlink" title="4.4、yaml的多文档块"></a>4.4、yaml的多文档块</h3><p>和properties配置文件中一样，但是使用yml去实现不需要创建多个配置文件，更加方便了 !</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br><span class="hljs-comment">#选择要激活那个环境块</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">prod</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8083</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">dev</span> <span class="hljs-comment">#配置环境的名称</span><br><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8084</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">prod</span>  <span class="hljs-comment">#配置环境的名称</span><br></code></pre></td></tr></table></figure><p><strong>注意：如果yml和properties同时都配置了端口，并且没有激活其他环境 ， 默认会使用properties配置文件的！</strong></p><h3 id="4-5、配置文件加载位置"><a href="#4-5、配置文件加载位置" class="headerlink" title="4.5、配置文件加载位置"></a>4.5、配置文件加载位置</h3><p><strong>外部加载配置文件的方式十分多，我们选择最常用的即可，在开发的资源文件中进行配置！</strong></p><p>官方外部配置文件说明参考文档</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/bf3df4d99bf7f261ed1599009e1e9cea.png" alt="img"></p><p>springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua">优先级<span class="hljs-number">1</span>：项目路径下的<span class="hljs-built_in">config</span>文件夹配置文件<br>优先级<span class="hljs-number">2</span>：项目路径下配置文件<br>优先级<span class="hljs-number">3</span>：资源路径下的<span class="hljs-built_in">config</span>文件夹配置文件<br>优先级<span class="hljs-number">4</span>：资源路径下配置文件<br></code></pre></td></tr></table></figure><p>优先级由高到底，高优先级的配置会覆盖低优先级的配置；</p><p><strong>SpringBoot会从这四个位置全部加载主配置文件；互补配置；</strong></p><p>我们在最低级的配置文件中设置一个项目访问路径的配置来测试互补问题；</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#配置项目的访问路径</span><br><span class="hljs-attr">server.servlet.context-path</span>=<span class="hljs-string">/kuang</span><br></code></pre></td></tr></table></figure><h3 id="4-6、拓展，运维小技巧"><a href="#4-6、拓展，运维小技巧" class="headerlink" title="4.6、拓展，运维小技巧"></a>4.6、拓展，运维小技巧</h3><p>指定位置加载配置文件</p><p>我们还可以通过spring.config.location来改变默认的配置文件位置</p><p>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；这种情况，一般是后期运维做的多，相同配置，外部指定的配置文件优先级最高</p><h2 id="5、自动配置原理"><a href="#5、自动配置原理" class="headerlink" title="5、自动配置原理"></a>5、自动配置原理</h2><p>自动配置原理</p><p>配置文件到底能写什么？怎么写？</p><p>SpringBoot官方文档中有大量的配置，我们无法全部记住</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7a42a55cedd13a8589b878fbb9a8aec4.png" alt="img"></p><h3 id="5-1、分析自动配置原理"><a href="#5-1、分析自动配置原理" class="headerlink" title="5.1、分析自动配置原理"></a>5.1、分析自动配置原理</h3><p>我们以**HttpEncodingAutoConfiguration（Http编码自动配置）**为例解释自动配置原理；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//表示这是一个配置类，和以前编写的配置文件一样，也可以给容器中添加组件；</span><br><span class="hljs-meta">@Configuration</span> <br><br><span class="hljs-comment">//启动指定类的ConfigurationProperties功能；</span><br>  <span class="hljs-comment">//进入这个HttpProperties查看，将配置文件中对应的值和HttpProperties绑定起来；</span><br>  <span class="hljs-comment">//并把HttpProperties加入到ioc容器中</span><br><span class="hljs-meta">@EnableConfigurationProperties(&#123;HttpProperties.class&#125;)</span> <br><br><span class="hljs-comment">//Spring底层@Conditional注解</span><br>  <span class="hljs-comment">//根据不同的条件判断，如果满足指定的条件，整个配置类里面的配置就会生效；</span><br>  <span class="hljs-comment">//这里的意思就是判断当前应用是否是web应用，如果是，当前配置类生效</span><br><span class="hljs-meta">@ConditionalOnWebApplication(</span><br><span class="hljs-meta">    type = Type.SERVLET</span><br><span class="hljs-meta">)</span><br><br><span class="hljs-comment">//判断当前项目有没有这个类CharacterEncodingFilter；SpringMVC中进行乱码解决的过滤器；</span><br><span class="hljs-meta">@ConditionalOnClass(&#123;CharacterEncodingFilter.class&#125;)</span><br><br><span class="hljs-comment">//判断配置文件中是否存在某个配置：spring.http.encoding.enabled；</span><br>  <span class="hljs-comment">//如果不存在，判断也是成立的</span><br>  <span class="hljs-comment">//即使我们配置文件中不配置pring.http.encoding.enabled=true，也是默认生效的；</span><br><span class="hljs-meta">@ConditionalOnProperty(</span><br><span class="hljs-meta">    prefix = &quot;spring.http.encoding&quot;,</span><br><span class="hljs-meta">    value = &#123;&quot;enabled&quot;&#125;,</span><br><span class="hljs-meta">    matchIfMissing = true</span><br><span class="hljs-meta">)</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpEncodingAutoConfiguration</span> &#123;<br>    <span class="hljs-comment">//他已经和SpringBoot的配置文件映射了</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Encoding properties;<br>    <span class="hljs-comment">//只有一个有参构造器的情况下，参数的值就会从容器中拿</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HttpEncodingAutoConfiguration</span><span class="hljs-params">(HttpProperties properties)</span> &#123;<br>        <span class="hljs-built_in">this</span>.properties = properties.getEncoding();<br>    &#125;<br>    <br>    <span class="hljs-comment">//给容器中添加一个组件，这个组件的某些值需要从properties中获取</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConditionalOnMissingBean</span> <span class="hljs-comment">//判断容器没有这个组件？</span><br>    <span class="hljs-keyword">public</span> CharacterEncodingFilter <span class="hljs-title function_">characterEncodingFilter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">CharacterEncodingFilter</span> <span class="hljs-variable">filter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderedCharacterEncodingFilter</span>();<br>        filter.setEncoding(<span class="hljs-built_in">this</span>.properties.getCharset().name());<br>        filter.setForceRequestEncoding(<span class="hljs-built_in">this</span>.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpProperties.Encoding.Type.REQUEST));<br>        filter.setForceResponseEncoding(<span class="hljs-built_in">this</span>.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpProperties.Encoding.Type.RESPONSE));<br>        <span class="hljs-keyword">return</span> filter;<br>    &#125;<br>    <span class="hljs-comment">//。。。。。。。</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>一句话总结 ：根据当前不同的条件判断，决定这个配置类是否生效！</strong></p><ul><li>一但这个配置类生效；这个配置类就会给容器中添加各种组件；</li><li>这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的；</li><li>所有在配置文件中能配置的属性都是在xxxxProperties类中封装着；</li><li>配置文件能配置什么就可以参照某个功能对应的这个属性类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//从配置文件中获取指定的值和bean的属性进行绑定</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.http&quot;)</span> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpProperties</span> &#123;<br>    <span class="hljs-comment">// .....</span><br>&#125;<br></code></pre></td></tr></table></figure><p>我们去配置文件里面试试前缀，看提示！</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/0f0fa5361a7874551589cbfdf629a729.png" alt="img"></p><p><strong>这就是自动装配的原理！</strong></p><h3 id="5-2、精髓"><a href="#5-2、精髓" class="headerlink" title="5.2、精髓"></a>5.2、精髓</h3><p>1、SpringBoot启动会加载大量的自动配置类</p><p>2、我们看我们需要的功能有没有在SpringBoot默认写好的自动配置类当中；</p><p>3、我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件存在在其中，我们就不需要再手动配置了）</p><p>4、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们只需要在配置文件中指定这些属性的值即可；</p><p>**xxxxAutoConfigurartion：自动配置类；**给容器中添加组件</p><p><strong>xxxxProperties:封装配置文件中相关属性；</strong></p><h3 id="5-3、了解：-Conditional"><a href="#5-3、了解：-Conditional" class="headerlink" title="5.3、了解：@Conditional"></a>5.3、了解：@Conditional</h3><p>了解完自动装配的原理后，我们来关注一个细节问题，<strong>自动配置类必须在一定的条件下才能生效；</strong></p><p><strong>@Conditional派生注解（Spring注解版原生的@Conditional作用）</strong></p><p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/88e3f8d5e1e56e1546f75332ad2c2b44.png" alt="img"></p><p><strong>那么多的自动配置类，必须在一定的条件下才能生效；也就是说，我们加载了这么多的配置类，但不是所有的都生效了。</strong></p><p>我们怎么知道哪些自动配置类生效？</p><p><strong>我们可以通过启用 debug&#x3D;true属性；来让控制台打印自动配置报告，这样我们就可以很方便的知道哪些自动配置类生效；</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#开启springboot的调试类</span><br><span class="hljs-attr">debug</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure><p><strong>Positive matches:（自动配置类启用的：正匹配）</strong></p><p><strong>Negative matches:（没有启动，没有匹配成功的自动配置类：负匹配）</strong></p><p><strong>Unconditional classes: （没有条件的类）</strong></p><p>【演示：查看输出的日志】</p><p>掌握吸收理解原理，即可以不变应万变！</p><h2 id="6、自定义starter"><a href="#6、自定义starter" class="headerlink" title="6、自定义starter"></a>6、自定义starter</h2><p>我们分析完毕了源码以及自动装配的过程，我们可以尝试自定义一个启动器来玩玩！</p><h3 id="6-1、说明"><a href="#6-1、说明" class="headerlink" title="6.1、说明"></a>6.1、说明</h3><p>启动器模块是一个 空 jar 文件，仅提供辅助性依赖管理，这些依赖可能用于自动装配或者其他类库；</p><p><strong>命名归约：</strong></p><p>官方命名：</p><ul><li>前缀：spring-boot-starter-xxx</li><li>比如：spring-boot-starter-web…</li></ul><p>自定义命名：</p><ul><li>xxx-spring-boot-starter</li><li>比如：mybatis-spring-boot-starter</li></ul><h3 id="6-2、编写启动器"><a href="#6-2、编写启动器" class="headerlink" title="6.2、编写启动器"></a>6.2、编写启动器</h3><p>1、在IDEA中新建一个空项目 spring-boot-starter-diy</p><p>2、新建一个普通Maven模块：kuang-spring-boot-starter</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5a61b3197fa233ab286ae9f9d9409873.png" alt="img"></p><p>3、新建一个Springboot模块：kuang-spring-boot-starter-autoconfigure</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5873f10f11e7c42971ee641a3070eb41.png" alt="img"></p><p>4、点击apply即可，基本结构</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/09e520334bb8b0a3888403c7b2605f28.png" alt="img"></p><p>5、在我们的 starter 中 导入 autoconfigure 的依赖！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 启动器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  引入自动配置模块 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.kuang<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>kuang-spring-boot-starter-autoconfigure<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>6、将 autoconfigure 项目下多余的文件都删掉，Pom中只留下一个 starter，这是所有的启动器基本配置！</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/f2aaa0c67ccb3a0027468f291ddd50c9.png" alt="img"></p><p>7、我们编写一个自己的服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloService</span> &#123;<br><br>    HelloProperties helloProperties;<br><br>    <span class="hljs-keyword">public</span> HelloProperties <span class="hljs-title function_">getHelloProperties</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> helloProperties;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHelloProperties</span><span class="hljs-params">(HelloProperties helloProperties)</span> &#123;<br>        <span class="hljs-built_in">this</span>.helloProperties = helloProperties;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayHello</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-keyword">return</span> helloProperties.getPrefix() + name + helloProperties.getSuffix();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>8、编写HelloProperties 配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><br><span class="hljs-comment">// 前缀 kuang.hello</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;kuang.hello&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloProperties</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String prefix;<br>    <span class="hljs-keyword">private</span> String suffix;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPrefix</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> prefix;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPrefix</span><span class="hljs-params">(String prefix)</span> &#123;<br>        <span class="hljs-built_in">this</span>.prefix = prefix;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSuffix</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> suffix;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSuffix</span><span class="hljs-params">(String suffix)</span> &#123;<br>        <span class="hljs-built_in">this</span>.suffix = suffix;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>9、编写我们的自动配置类并注入bean，测试！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConditionalOnWebApplication</span> <span class="hljs-comment">//web应用生效</span><br><span class="hljs-meta">@EnableConfigurationProperties(HelloProperties.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServiceAutoConfiguration</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    HelloProperties helloProperties;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> HelloService <span class="hljs-title function_">helloService</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">HelloService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HelloService</span>();<br>        service.setHelloProperties(helloProperties);<br>        <span class="hljs-keyword">return</span> service;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>10、在resources编写一个自己的 META-INF\spring.factories</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"># Auto Configure<br>org.springframework.boot.autoconfigure.EnableAutoConfiguration=\<br>com.kuang.HelloServiceAutoConfiguration<br></code></pre></td></tr></table></figure><p>11、编写完成后，可以安装到maven仓库中！</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/28390ef541558dfcd2b740be4a920951.png" alt="img"></p><h3 id="6-3、新建项目测试我们自己写的启动器"><a href="#6-3、新建项目测试我们自己写的启动器" class="headerlink" title="6.3、新建项目测试我们自己写的启动器"></a>6.3、新建项目测试我们自己写的启动器</h3><p>1、新建一个SpringBoot 项目</p><p>2、导入我们自己写的启动器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.kuang<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>kuang-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3、编写一个 HelloController 进行测试我们自己的写的接口！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.controller;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    HelloService helloService;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> helloService.sayHello(<span class="hljs-string">&quot;zxc&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>4、编写配置文件 application.properties</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">kuang.hello.prefix=<span class="hljs-string">&quot;ppp&quot;</span><br>kuang.hello.suffix=<span class="hljs-string">&quot;sss&quot;</span><br></code></pre></td></tr></table></figure><p>5、启动项目进行测试，结果成功 !</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/77b2763b09cabb2472e77c6b56e55c4e.png" alt="img"></p><h2 id="7、SpringBoot整合JDBC"><a href="#7、SpringBoot整合JDBC" class="headerlink" title="7、SpringBoot整合JDBC"></a>7、SpringBoot整合JDBC</h2><h3 id="7-1、SpringData简介"><a href="#7-1、SpringData简介" class="headerlink" title="7.1、SpringData简介"></a>7.1、SpringData简介</h3><p>对于数据访问层，无论是 SQL(关系型数据库) 还是 NOSQL(非关系型数据库)，Spring Boot 底层都是采用 Spring Data 的方式进行统一处理。</p><p>Spring Boot 底层都是采用 Spring Data 的方式进行统一处理各种数据库，Spring Data 也是 Spring 中与 Spring Boot、Spring Cloud 等齐名的知名项目。</p><p>Sping Data 官网：<a href="https://spring.io/projects/spring-data">https://spring.io/projects/spring-data</a></p><p>数据库相关的启动器 ：可以参考官方文档：<br><a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter">https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter</a></p><p>整合JDBC</p><h3 id="7-2、创建测试项目测试数据源"><a href="#7-2、创建测试项目测试数据源" class="headerlink" title="7.2、创建测试项目测试数据源"></a>7.2、创建测试项目测试数据源</h3><p>1、我去新建一个项目测试：springboot-data-jdbc ; 引入相应的模块！基础模块</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2751daac4465bfe9b95f378153854cd7.png" alt="img"></p><p>2、项目建好之后，发现自动帮我们导入了如下的启动器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3、编写yaml配置文件连接数据库；</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-comment">#?serverTimezone=UTC解决时区的报错</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/springboot?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br></code></pre></td></tr></table></figure><p>4、配置完这一些东西后，我们就可以直接去使用了，因为SpringBoot已经默认帮我们进行了自动配置；去测试类测试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootDataJdbcApplicationTests</span> &#123;<br><br>    <span class="hljs-comment">//DI注入数据源</span><br>    <span class="hljs-meta">@Autowired</span><br>    DataSource dataSource;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-comment">//看一下默认数据源</span><br>        System.out.println(dataSource.getClass());<br>        <span class="hljs-comment">//获得连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span>   dataSource.getConnection();<br>        System.out.println(connection);<br>        <span class="hljs-comment">//关闭连接</span><br>        connection.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：我们可以看到他默认给我们配置的数据源为 : class com.zaxxer.hikari.HikariDataSource ， 我们并没有手动配置</p><p>我们来全局搜索一下，找到数据源的所有自动配置都在 ：DataSourceAutoConfiguration文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Import(</span><br><span class="hljs-meta">    &#123;Hikari.class, Tomcat.class, Dbcp2.class, Generic.class, DataSourceJmxConfiguration.class&#125;</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PooledDataSourceConfiguration</span> &#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">PooledDataSourceConfiguration</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里导入的类都在 DataSourceConfiguration 配置类下，可以看出 Spring Boot 2.2.5 默认使用HikariDataSource 数据源，而以前版本，如 Spring Boot 1.5 默认使用 org.apache.tomcat.jdbc.pool.DataSource 作为数据源；</p><p><strong>HikariDataSource 号称 Java WEB 当前速度最快的数据源，相比于传统的 C3P0 、DBCP、Tomcat jdbc 等连接池更加优秀；</strong></p><p><strong>可以使用 spring.datasource.type 指定自定义的数据源类型，值为 要使用的连接池实现的完全限定名。</strong></p><p>关于数据源我们并不做介绍，有了数据库连接，显然就可以 CRUD 操作数据库了。但是我们需要先了解一个对象 JdbcTemplate</p><h3 id="7-3、JDBCTemplate"><a href="#7-3、JDBCTemplate" class="headerlink" title="7.3、JDBCTemplate"></a>7.3、JDBCTemplate</h3><p>1、有了数据源(com.zaxxer.hikari.HikariDataSource)，然后可以拿到数据库连接(java.sql.Connection)，有了连接，就可以使用原生的 JDBC 语句来操作数据库；<br>2、即使不使用第三方第数据库操作框架，如 MyBatis等，Spring 本身也对原生的JDBC 做了轻量级的封装，即JdbcTemplate。<br>3、数据库操作的所有 CRUD 方法都在 JdbcTemplate 中。<br>4、Spring Boot 不仅提供了默认的数据源，同时默认已经配置好了 JdbcTemplate 放在了容器中，程序员只需自己注入即可使用<br>5、JdbcTemplate 的自动配置是依赖 org.springframework.boot.autoconfigure.jdbc 包下的 JdbcTemplateConfiguration 类</p><p><strong>JdbcTemplate主要提供以下几类方法：</strong></p><ul><li>execute方法：可以用于执行任何SQL语句，一般用于执行DDL语句；</li><li>update方法及batchUpdate方法：update方法用于执行新增、修改、删除等语句；batchUpdate方法用于执行批处理相关语句；</li><li>query方法及queryForXXX方法：用于执行查询相关语句；</li><li>call方法：用于执行存储过程、函数相关语句。</li></ul><h3 id="7-4、测试"><a href="#7-4、测试" class="headerlink" title="7.4、测试"></a>7.4、测试</h3><p>编写一个Controller，注入 jdbcTemplate，编写测试方法进行访问测试；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/jdbc&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcController</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Spring Boot 默认提供了数据源，默认提供了 org.springframework.jdbc.core.JdbcTemplate</span><br><span class="hljs-comment">     * JdbcTemplate 中会自己注入数据源，用于简化 JDBC操作</span><br><span class="hljs-comment">     * 还能避免一些常见的错误,使用起来也不用再自己来关闭数据库连接</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Autowired</span><br>    JdbcTemplate jdbcTemplate;<br><br>    <span class="hljs-comment">//查询employee表中所有数据</span><br>    <span class="hljs-comment">//List 中的1个 Map 对应数据库的 1行数据</span><br>    <span class="hljs-comment">//Map 中的 key 对应数据库的字段名，value 对应数据库的字段值</span><br>    <span class="hljs-meta">@GetMapping(&quot;/list&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; <span class="hljs-title function_">userList</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from employee&quot;</span>;<br>        List&lt;Map&lt;String, Object&gt;&gt; maps = jdbcTemplate.queryForList(sql);<br>        <span class="hljs-keyword">return</span> maps;<br>    &#125;<br>    <br>    <span class="hljs-comment">//新增一个用户</span><br>    <span class="hljs-meta">@GetMapping(&quot;/add&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">addUser</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//插入语句，注意时间问题</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into employee(last_name, email,gender,department,birth)&quot;</span> +<br>                <span class="hljs-string">&quot; values (&#x27;狂神说&#x27;,&#x27;24736743@qq.com&#x27;,1,101,&#x27;&quot;</span>+ <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().toLocaleString() +<span class="hljs-string">&quot;&#x27;)&quot;</span>;<br>        jdbcTemplate.update(sql);<br>        <span class="hljs-comment">//查询</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;addOk&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//修改用户信息</span><br>    <span class="hljs-meta">@GetMapping(&quot;/update/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">updateUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> <span class="hljs-type">int</span> id)</span>&#123;<br>        <span class="hljs-comment">//插入语句</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update employee set last_name=?,email=? where id=&quot;</span>+id;<br>        <span class="hljs-comment">//数据</span><br>        Object[] objects = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">2</span>];<br>        objects[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;秦疆&quot;</span>;<br>        objects[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;24736743@sina.com&quot;</span>;<br>        jdbcTemplate.update(sql,objects);<br>        <span class="hljs-comment">//查询</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;updateOk&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//删除用户</span><br>    <span class="hljs-meta">@GetMapping(&quot;/delete/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">delUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> <span class="hljs-type">int</span> id)</span>&#123;<br>        <span class="hljs-comment">//插入语句</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;delete from employee where id=?&quot;</span>;<br>        jdbcTemplate.update(sql,id);<br>        <span class="hljs-comment">//查询</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;deleteOk&quot;</span>;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>测试请求，结果正常；</p><p>到此，CURD的基本操作，使用 JDBC 就搞定了。<a href="https://docs.spring.io/spring-boot/docs/2.0.4.RELEASE/reference/htmlsingle/#using-boot-starter">https://docs.spring.io/spring-boot/docs/2.0.4.RELEASE/reference/htmlsingle/#using-boot-starter</a>)</p><h3 id><a href="#" class="headerlink" title></a></h3><h3 id="7-5、原理探究-："><a href="#7-5、原理探究-：" class="headerlink" title="7.5、原理探究 ："></a>7.5、原理探究 ：</h3><p>org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration 数据源配置类作用 ：根据逻辑判断之后，添加数据源；</p><p><strong>SpringBoot默认支持以下数据源：</strong></p><p><strong>com.zaxxer.hikari.HikariDataSource （Spring Boot 2.0 以上，默认使用此数据源）</strong></p><p>org.apache.tomcat.jdbc.pool.DataSource<br>org.apache.commons.dbcp2.BasicDataSource</p><p><strong>可以使用 spring.datasource.type 指定自定义的数据源类型，值为 要使用的连接池实现的完全限定名。默认情况下，它是从类路径自动检测的。</strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Configuration</span><br><span class="hljs-variable">@ConditionalOnMissingBean</span>(&#123;DataSource.class&#125;)<br><span class="hljs-variable">@ConditionalOnProperty</span>(<br>    name = &#123;<span class="hljs-string">&quot;spring.datasource.type&quot;</span>&#125;<br>)<br>static class Generic &#123;<br>    <span class="hljs-selector-tag">Generic</span>() &#123;<br>    &#125;<br><br>    <span class="hljs-variable">@Bean</span><br>    public DataSource <span class="hljs-built_in">dataSource</span>(DataSourceProperties properties) &#123;<br>        <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">properties</span><span class="hljs-selector-class">.initializeDataSourceBuilder</span>()<span class="hljs-selector-class">.build</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8、SpringBoot整合Druid"><a href="#8、SpringBoot整合Druid" class="headerlink" title="8、SpringBoot整合Druid"></a>8、SpringBoot整合Druid</h2><h3 id="8-1、Druid简介"><a href="#8-1、Druid简介" class="headerlink" title="8.1、Druid简介"></a>8.1、Druid简介</h3><blockquote><p>Java程序很大一部分要操作数据库，为了提高性能操作数据库的时候，又不得不使用数据库连接池。</p><p>Druid 是阿里巴巴开源平台上一个数据库连接池实现，结合了 C3P0、DBCP 等 DB 池的优点，同时加入了日志监控。</p><p>Druid 可以很好的监控 DB 池连接和 SQL 的执行情况，天生就是针对监控而生的 DB 连接池。</p><p>Druid已经在阿里巴巴部署了超过600个应用，经过一年多生产环境大规模部署的严苛考验。</p><p>Spring Boot 2.0 以上默认使用 Hikari 数据源，可以说 Hikari 与 Driud 都是当前 Java Web<br>上最优秀的数据源，我们来重点介绍 Spring Boot 如何集成 Druid 数据源，如何实现数据库监控。</p><p>Github地址：<a href="https://github.com/alibaba/druid/">https://github.com/alibaba/druid/</a></p></blockquote><p><strong>com.alibaba.druid.pool.DruidDataSource 基本配置参数如下：</strong></p><table><thead><tr><th>配置</th><th>缺省值</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td></td><td>配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。 如果没有配置，将会生成一个名字，格式是：“DataSource-” + System.identityHashCode(this). 另外配置此属性至少在1.0.5版本中是不起作用的，强行设置name会出错 <a href="http://blog.csdn.net/lanmo555/article/details/41248763">详情-点此处</a>。</td></tr><tr><td>url</td><td></td><td>连接数据库的url，不同数据库不一样。例如： mysql : jdbc:mysql:&#x2F;&#x2F;10.20.153.104:3306&#x2F;druid2 oracle : jdbc:oracle:thin:@10.20.149.85:1521:ocnauto</td></tr><tr><td>username</td><td></td><td>连接数据库的用户名</td></tr><tr><td>password</td><td></td><td>连接数据库的密码。如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。详细看这里：<a href="https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter">https://github.com/alibaba/druid/wiki/使用ConfigFilter</a></td></tr><tr><td>driverClassName</td><td>根据url自动识别</td><td>这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName</td></tr><tr><td>initialSize</td><td>0</td><td>初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</td></tr><tr><td>maxActive</td><td>8</td><td>最大连接池数量</td></tr><tr><td>maxIdle</td><td>8</td><td>已经不再使用，配置了也没效果</td></tr><tr><td>minIdle</td><td></td><td>最小连接池数量</td></tr><tr><td>maxWait</td><td></td><td>获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。</td></tr><tr><td>poolPreparedStatements</td><td>false</td><td>是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。</td></tr><tr><td>maxOpenPreparedStatements</td><td>-1</td><td>要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</td></tr><tr><td>validationQuery</td><td></td><td>用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。</td></tr><tr><td>validationQueryTimeout</td><td></td><td>单位：秒，检测连接是否有效的超时时间。底层调用jdbc Statement对象的void setQueryTimeout(int seconds)方法</td></tr><tr><td>testOnBorrow</td><td>true</td><td>申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</td></tr><tr><td>testOnReturn</td><td>false</td><td>归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</td></tr><tr><td>testWhileIdle</td><td>false</td><td>建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</td></tr><tr><td>timeBetweenEvictionRunsMillis</td><td>1分钟（1.0.14）</td><td>有两个含义： 1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接 2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明</td></tr><tr><td>numTestsPerEvictionRun</td><td></td><td>不再使用，一个DruidDataSource只支持一个EvictionRun</td></tr><tr><td>minEvictableIdleTimeMillis</td><td>30分钟（1.0.14）</td><td>连接保持空闲而不被驱逐的最长时间</td></tr><tr><td>connectionInitSqls</td><td></td><td>物理连接初始化的时候执行的sql</td></tr><tr><td>exceptionSorter</td><td>根据dbType自动识别</td><td>当数据库抛出一些不可恢复的异常时，抛弃连接</td></tr><tr><td>filters</td><td></td><td>属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat 日志用的filter:log4j 防御sql注入的filter:wall</td></tr><tr><td>proxyFilters</td><td></td><td>类型是List&lt;com.alibaba.druid.filter.Filter&gt;，如果同时配置了filters和proxyFilters，是组合关系，并非替换关系</td></tr></tbody></table><h3 id="8-2、配置数据源"><a href="#8-2、配置数据源" class="headerlink" title="8.2、配置数据源"></a>8.2、配置数据源</h3><p>1、添加上 Druid 数据源依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、切换数据源；之前已经说过 Spring Boot 2.0 以上默认使用 com.zaxxer.hikari.HikariDataSource 数据源，但可以 通过 spring.datasource.type 指定数据源。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/springboot?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span> <span class="hljs-comment"># 自定义数据源</span><br></code></pre></td></tr></table></figure><p>3、数据源切换之后，在测试类中注入 DataSource，然后获取到它，输出一看便知是否成功切换；</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2fd4baeb1bc0caf48b4da3034b0d417a.png" alt="img"></p><p>4、切换成功！既然切换成功，就可以设置数据源连接初始化大小、最大连接数、等待时间、最小连接数 等设置项；可以查看源码</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-comment">#?serverTimezone=UTC解决时区的报错</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/springboot?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br><br>    <span class="hljs-comment">#Spring Boot 默认是不注入这些属性值的，需要自己绑定</span><br>    <span class="hljs-comment">#druid 数据源专有配置</span><br>    <span class="hljs-attr">initialSize:</span> <span class="hljs-number">5</span><br>    <span class="hljs-attr">minIdle:</span> <span class="hljs-number">5</span><br>    <span class="hljs-attr">maxActive:</span> <span class="hljs-number">20</span><br>    <span class="hljs-attr">maxWait:</span> <span class="hljs-number">60000</span><br>    <span class="hljs-attr">timeBetweenEvictionRunsMillis:</span> <span class="hljs-number">60000</span><br>    <span class="hljs-attr">minEvictableIdleTimeMillis:</span> <span class="hljs-number">300000</span><br>    <span class="hljs-attr">validationQuery:</span> <span class="hljs-string">SELECT</span> <span class="hljs-number">1</span> <span class="hljs-string">FROM</span> <span class="hljs-string">DUAL</span><br>    <span class="hljs-attr">testWhileIdle:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">testOnBorrow:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">testOnReturn:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">poolPreparedStatements:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment">#配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</span><br>    <span class="hljs-comment">#如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority</span><br>    <span class="hljs-comment">#则导入 log4j 依赖即可，Maven 地址：https://mvnrepository.com/artifact/log4j/log4j</span><br>    <span class="hljs-attr">filters:</span> <span class="hljs-string">stat,wall,log4j</span><br>    <span class="hljs-attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="hljs-number">20</span><br>    <span class="hljs-attr">useGlobalDataSourceStat:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">connectionProperties:</span> <span class="hljs-string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span><br></code></pre></td></tr></table></figure><p>5、导入Log4j 的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>6、现在需要程序员自己为 DruidDataSource 绑定全局配置文件中的参数，再添加到容器中，而不再使用 Spring Boot 的自动生成了；我们需要 自己添加 DruidDataSource 组件到容器中，并绑定属性；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.config;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DruidConfig</span> &#123;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">       将自定义的 Druid数据源添加到容器中，不再让 Spring Boot 自动创建</span><br><span class="hljs-comment">       绑定全局配置文件中的 druid 数据源属性到 com.alibaba.druid.pool.DruidDataSource从而让它们生效</span><br><span class="hljs-comment">       @ConfigurationProperties(prefix = &quot;spring.datasource&quot;)：作用就是将 全局配置文件中</span><br><span class="hljs-comment">       前缀为 spring.datasource的属性值注入到 com.alibaba.druid.pool.DruidDataSource 的同名参数中</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">druidDataSource</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>7、去测试类中测试一下；看是否成功！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootDataJdbcApplicationTests</span> &#123;<br><br>    <span class="hljs-comment">//DI注入数据源</span><br>    <span class="hljs-meta">@Autowired</span><br>    DataSource dataSource;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-comment">//看一下默认数据源</span><br>        System.out.println(dataSource.getClass());<br>        <span class="hljs-comment">//获得连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span>   dataSource.getConnection();<br>        System.out.println(connection);<br><br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">druidDataSource</span> <span class="hljs-operator">=</span> (DruidDataSource) dataSource;<br>        System.out.println(<span class="hljs-string">&quot;druidDataSource 数据源最大连接数：&quot;</span> + druidDataSource.getMaxActive());<br>        System.out.println(<span class="hljs-string">&quot;druidDataSource 数据源初始化连接数：&quot;</span> + druidDataSource.getInitialSize());<br><br>        <span class="hljs-comment">//关闭连接</span><br>        connection.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果 ：可见配置参数已经生效！</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/12ab41add90f1cb53bd7b7c9018e374c.png" alt="img"></p><h3 id="8-3、配置Druid数据源监控"><a href="#8-3、配置Druid数据源监控" class="headerlink" title="8.3、配置Druid数据源监控"></a>8.3、配置Druid数据源监控</h3><p>Druid 数据源具有监控的功能，并提供了一个 web 界面方便用户查看，类似安装 路由器 时，人家也提供了一个默认的 web 页面。</p><p>所以第一步需要设置 Druid 的后台管理页面，比如 登录账号、密码 等；配置后台管理；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//配置 Druid 监控管理后台的Servlet；</span><br><span class="hljs-comment">//内置 Servlet 容器时没有web.xml文件，所以使用 Spring Boot 的注册 Servlet 方式</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> ServletRegistrationBean <span class="hljs-title function_">statViewServlet</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ServletRegistrationBean</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletRegistrationBean</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StatViewServlet</span>(), <span class="hljs-string">&quot;/druid/*&quot;</span>);<br><br>    <span class="hljs-comment">// 这些参数可以在 com.alibaba.druid.support.http.StatViewServlet </span><br>    <span class="hljs-comment">// 的父类 com.alibaba.druid.support.http.ResourceServlet 中找到</span><br>    Map&lt;String, String&gt; initParams = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    initParams.put(<span class="hljs-string">&quot;loginUsername&quot;</span>, <span class="hljs-string">&quot;admin&quot;</span>); <span class="hljs-comment">//后台管理界面的登录账号</span><br>    initParams.put(<span class="hljs-string">&quot;loginPassword&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>); <span class="hljs-comment">//后台管理界面的登录密码</span><br><br>    <span class="hljs-comment">//后台允许谁可以访问</span><br>    <span class="hljs-comment">//initParams.put(&quot;allow&quot;, &quot;localhost&quot;)：表示只有本机可以访问</span><br>    <span class="hljs-comment">//initParams.put(&quot;allow&quot;, &quot;&quot;)：为空或者为null时，表示允许所有访问</span><br>    initParams.put(<span class="hljs-string">&quot;allow&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-comment">//deny：Druid 后台拒绝谁访问</span><br>    <span class="hljs-comment">//initParams.put(&quot;kuangshen&quot;, &quot;192.168.1.20&quot;);表示禁止此ip访问</span><br><br>    <span class="hljs-comment">//设置初始化参数</span><br>    bean.setInitParameters(initParams);<br>    <span class="hljs-keyword">return</span> bean;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置完毕后，我们可以选择访问 ：<a href="http://localhost:8080/druid/login.html">http://localhost:8080/druid/login.html</a></p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4a3f84fb19ba00cadfd002f3880aa682.png" alt="img"></p><p>进入之后</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/b6c0506a3ad7013af1c9cc80aac72fa7.png" alt="img"></p><p><strong>配置 Druid web 监控 filter 过滤器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//配置 Druid 监控 之  web 监控的 filter</span><br><span class="hljs-comment">//WebStatFilter：用于配置Web和Druid数据源之间的管理关联监控统计</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> FilterRegistrationBean <span class="hljs-title function_">webStatFilter</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">FilterRegistrationBean</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterRegistrationBean</span>();<br>    bean.setFilter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WebStatFilter</span>());<br><br>    <span class="hljs-comment">//exclusions：设置哪些请求进行过滤排除掉，从而不进行统计</span><br>    Map&lt;String, String&gt; initParams = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    initParams.put(<span class="hljs-string">&quot;exclusions&quot;</span>, <span class="hljs-string">&quot;*.js,*.css,/druid/*,/jdbc/*&quot;</span>);<br>    bean.setInitParameters(initParams);<br><br>    <span class="hljs-comment">//&quot;/*&quot; 表示过滤所有请求</span><br>    bean.setUrlPatterns(Arrays.asList(<span class="hljs-string">&quot;/*&quot;</span>));<br>    <span class="hljs-keyword">return</span> bean;<br>&#125;<br></code></pre></td></tr></table></figure><p>平时在工作中，按需求进行配置即可，主要用作监</p><h2 id="9、SpringBoot-整合mybatis"><a href="#9、SpringBoot-整合mybatis" class="headerlink" title="9、SpringBoot 整合mybatis"></a>9、SpringBoot 整合mybatis</h2><h3 id="9-1、导入mybatis所需要的依赖"><a href="#9-1、导入mybatis所需要的依赖" class="headerlink" title="9.1、导入mybatis所需要的依赖"></a>9.1、导入mybatis所需要的依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 引入 myBatis，这是 MyBatis官方提供的适配 Spring Boot 的，而不是Spring Boot自己的--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="9-2、配置数据库连接信息"><a href="#9-2、配置数据库连接信息" class="headerlink" title="9.2、配置数据库连接信息"></a>9.2、配置数据库连接信息</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">123456</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span><br><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br></code></pre></td></tr></table></figure><h3 id="9-3、我们这里就是用默认的数据源了；先去测试一下连接是否成功！"><a href="#9-3、我们这里就是用默认的数据源了；先去测试一下连接是否成功！" class="headerlink" title="9.3、我们这里就是用默认的数据源了；先去测试一下连接是否成功！"></a>9.3、我们这里就是用默认的数据源了；先去测试一下连接是否成功！</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootDemoMybatisApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    DataSource dataSource;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br><br>        System.out.println(<span class="hljs-string">&quot;数据源&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span> + dataSource.getClass());<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> dataSource.getConnection();<br>        System.out.println(<span class="hljs-string">&quot;连接&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span> + connection);<br>        System.out.println(<span class="hljs-string">&quot;连接地址&gt;&gt;&gt;&gt;&gt;&quot;</span> + connection.getMetaData().getURL());<br>        connection.close();<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>查看输出结果，数据库配置OK！</strong></p><h3 id="9-4、创建实体类"><a href="#9-4、创建实体类" class="headerlink" title="9.4、创建实体类"></a>9.4、创建实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.mybatis.pojo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String pwd;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(<span class="hljs-type">int</span> id, String name, String pwd)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.pwd = pwd;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPwd</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> pwd;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPwd</span><span class="hljs-params">(String pwd)</span> &#123;<br>        <span class="hljs-built_in">this</span>.pwd = pwd;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, pwd=&#x27;&quot;</span> + pwd + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-5、配置Mapper接口类"><a href="#9-5、配置Mapper接口类" class="headerlink" title="9.5、配置Mapper接口类"></a>9.5、配置Mapper接口类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.mybatis.pojo.mapper;<br><br><span class="hljs-keyword">import</span> com.kuang.mybatis.pojo.User;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">//@Mapper : 表示本类是一个 MyBatis 的 Mapper，等价于以前 Spring 整合 MyBatis 时的 Mapper 接口</span><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br><br>    <span class="hljs-comment">//选择全部用户</span><br>    List&lt;User&gt; <span class="hljs-title function_">selectUser</span><span class="hljs-params">()</span>;<br>    <span class="hljs-comment">//根据id选择用户</span><br>    User <span class="hljs-title function_">selectUserById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br>    <span class="hljs-comment">//添加一个用户</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">(User user)</span>;<br>    <span class="hljs-comment">//修改一个用户</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">(User user)</span>;<br>    <span class="hljs-comment">//根据id删除用户</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">deleteUser</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-6、对应Mapper映射文件"><a href="#9-6、对应Mapper映射文件" class="headerlink" title="9.6、对应Mapper映射文件"></a>9.6、对应Mapper映射文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.kuang.mybatis.pojo.mapper.UserMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUser&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    select * from user<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUserById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    select * from user where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    insert into user (id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    update user set name=#&#123;name&#125;,pwd=#&#123;pwd&#125; where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span>&gt;</span><br>    delete from user where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="9-7、maven配置资源过滤问题"><a href="#9-7、maven配置资源过滤问题" class="headerlink" title="9.7、maven配置资源过滤问题"></a>9.7、maven配置资源过滤问题</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="9-8、SpringBoot-整合！"><a href="#9-8、SpringBoot-整合！" class="headerlink" title="9.8、SpringBoot 整合！"></a>9.8、SpringBoot 整合！</h3><p>以前 MyBatis 未与 spring 整合时，配置数据源、事务、连接数据库的账号、密码等都是在 myBatis 核心配置文件中进行的myBatis 与 spring 整合后，配置数据源、事务、连接数据库的账号、密码等就交由 spring 管理。因此，在这里我们即使不使用mybatis配置文件也完全ok！<br><strong>既然已经提供了 myBatis 的映射配置文件，自然要告诉 spring boot 这些文件的位置</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">123456</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span><br><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#指定myBatis的核心配置文件与Mapper映射文件</span><br><span class="hljs-attr">mybatis.mapper-locations</span>=<span class="hljs-string">classpath:mybatis/mapper/*.xml</span><br><span class="hljs-comment"># 注意：对应实体类的路径</span><br><span class="hljs-attr">mybatis.type-aliases-package</span>=<span class="hljs-string">com.kuang.mybatis.pojo</span><br></code></pre></td></tr></table></figure><p>已经说过 spring boot 官方并没有提供 myBaits 的启动器，是 myBatis 官方提供的开发包来适配的 spring boot，从 pom.xml 文件中的依赖包名也能看出来，并非是以 spring-boot 开头的；</p><p>同理上面全局配置文件中的这两行配置也是以 mybatis 开头 而非 spring 开头也充分说明这些都是 myBatis 官方提供的</p><p>可以从 org.mybatis.spring.boot.autoconfigure.MybatisProperties 中查看所有配置项</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(</span><br><span class="hljs-meta">    prefix = &quot;mybatis&quot;</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisProperties</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">MYBATIS_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ResourcePatternResolver</span> <span class="hljs-variable">resourceResolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PathMatchingResourcePatternResolver</span>();<br>    <span class="hljs-keyword">private</span> String configLocation;<br>    <span class="hljs-keyword">private</span> String[] mapperLocations;<br>    <span class="hljs-keyword">private</span> String typeAliasesPackage;<br>    <span class="hljs-keyword">private</span> Class&lt;?&gt; typeAliasesSuperType;<br>    <span class="hljs-keyword">private</span> String typeHandlersPackage;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">checkConfigLocation</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">private</span> ExecutorType executorType;<br>    <span class="hljs-keyword">private</span> Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">LanguageDriver</span>&gt; defaultScriptingLanguageDriver;<br>    <span class="hljs-keyword">private</span> Properties configurationProperties;<br>    <span class="hljs-meta">@NestedConfigurationProperty</span><br>    <span class="hljs-keyword">private</span> Configuration configuration;<br></code></pre></td></tr></table></figure><p>也可以直接去查看 <a href="http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/">官方文档</a></p><h3 id="9-9、编写controller"><a href="#9-9、编写controller" class="headerlink" title="9.9、编写controller"></a>9.9、编写controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.mybatis.controller;<br><br><span class="hljs-keyword">import</span> com.kuang.mybatis.pojo.User;<br><span class="hljs-keyword">import</span> com.kuang.mybatis.pojo.mapper.UserMapper;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-comment">//选择全部用户</span><br>    <span class="hljs-meta">@GetMapping(&quot;/selectUser&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">selectUser</span><span class="hljs-params">()</span>&#123;<br>        List&lt;User&gt; users = userMapper.selectUser();<br>        <span class="hljs-keyword">for</span> (User user : users) &#123;<br>            System.out.println(user);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">//根据id选择用户</span><br>    <span class="hljs-meta">@GetMapping(&quot;/selectUserById&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">selectUserById</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectUserById(<span class="hljs-number">1</span>);<br>        System.out.println(user);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">//添加一个用户</span><br>    <span class="hljs-meta">@GetMapping(&quot;/addUser&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">addUser</span><span class="hljs-params">()</span>&#123;<br>        userMapper.addUser(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">5</span>,<span class="hljs-string">&quot;阿毛&quot;</span>,<span class="hljs-string">&quot;456789&quot;</span>));<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">//修改一个用户</span><br>    <span class="hljs-meta">@GetMapping(&quot;/updateUser&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">updateUser</span><span class="hljs-params">()</span>&#123;<br>        userMapper.updateUser(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">5</span>,<span class="hljs-string">&quot;阿毛&quot;</span>,<span class="hljs-string">&quot;421319&quot;</span>));<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">//根据id删除用户</span><br>    <span class="hljs-meta">@GetMapping(&quot;/deleteUser&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">deleteUser</span><span class="hljs-params">()</span>&#123;<br>        userMapper.deleteUser(<span class="hljs-number">5</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-10、启动项目访问进行测试！"><a href="#9-10、启动项目访问进行测试！" class="headerlink" title="9.10、启动项目访问进行测试！"></a>9.10、启动项目访问进行测试！</h3><p><strong>步骤：</strong></p><p>Mybatis整合包</p><p>mybatis-spring-boot-starter</p><p>1.导入包</p><p>2.配置文件</p><p>3.mybatis配置</p><p>4.编写sql</p><p>5.service层调用dao层</p><p>6.controller调用service层</p><h3 id="注：配置数据库连接信息（不变）"><a href="#注：配置数据库连接信息（不变）" class="headerlink" title="注：配置数据库连接信息（不变）"></a>注：配置数据库连接信息（不变）</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-comment">#?serverTimezone=UTC解决时区的报错</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br><br>    <span class="hljs-comment">#Spring Boot 默认是不注入这些属性值的，需要自己绑定</span><br>    <span class="hljs-comment">#druid 数据源专有配置</span><br>    <span class="hljs-attr">initialSize:</span> <span class="hljs-number">5</span><br>    <span class="hljs-attr">minIdle:</span> <span class="hljs-number">5</span><br>    <span class="hljs-attr">maxActive:</span> <span class="hljs-number">20</span><br>    <span class="hljs-attr">maxWait:</span> <span class="hljs-number">60000</span><br>    <span class="hljs-attr">timeBetweenEvictionRunsMillis:</span> <span class="hljs-number">60000</span><br>    <span class="hljs-attr">minEvictableIdleTimeMillis:</span> <span class="hljs-number">300000</span><br>    <span class="hljs-attr">validationQuery:</span> <span class="hljs-string">SELECT</span> <span class="hljs-number">1</span> <span class="hljs-string">FROM</span> <span class="hljs-string">DUAL</span><br>    <span class="hljs-attr">testWhileIdle:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">testOnBorrow:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">testOnReturn:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">poolPreparedStatements:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment">#配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</span><br>    <span class="hljs-comment">#如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority</span><br>    <span class="hljs-comment">#则导入 log4j 依赖即可，Maven 地址： https://mvnrepository.com/artifact/log4j/log4j</span><br>    <span class="hljs-attr">filters:</span> <span class="hljs-string">stat,wall,log4j</span><br>    <span class="hljs-attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="hljs-number">20</span><br>    <span class="hljs-attr">useGlobalDataSourceStat:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">connectionProperties:</span> <span class="hljs-string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span><br></code></pre></td></tr></table></figure><h2 id="10、Web开发静态资源处理"><a href="#10、Web开发静态资源处理" class="headerlink" title="10、Web开发静态资源处理"></a>10、Web开发静态资源处理</h2><p>Web开发探究</p><h3 id="10-1、简介"><a href="#10-1、简介" class="headerlink" title="10.1、简介"></a>10.1、简介</h3><p>好的，同学们，那么接下来呢，我们开始学习SpringBoot与Web开发，从这一章往后，就属于我们实战部分的内容了；</p><p>其实SpringBoot的东西用起来非常简单，因为SpringBoot最大的特点就是自动装配。</p><p><strong>使用SpringBoot的步骤：</strong></p><p>1、创建一个SpringBoot应用，选择我们需要的模块，SpringBoot就会默认将我们的需要的模块自动配置好</p><p>2、手动在配置文件中配置部分配置项目就可以运行起来了</p><p>3、专注编写业务代码，不需要考虑以前那样一大堆的配置了。</p><p>要熟悉掌握开发，之前学习的自动配置的原理一定要搞明白！</p><p>比如SpringBoot到底帮我们配置了什么？我们能不能修改？我们能修改哪些配置？我们能不能扩展？</p><ul><li>向容器中自动配置组件 ：*** Autoconfiguration</li><li>自动配置类，封装配置文件的内容：***Properties</li></ul><p>没事就找找类，看看自动装配原理！</p><p>我们之后来进行一个单体项目的小项目测试，让大家能够快速上手开发！</p><p>静态资源处理</p><h3 id="10-2、静态资源映射规则"><a href="#10-2、静态资源映射规则" class="headerlink" title="10.2、静态资源映射规则"></a>10.2、静态资源映射规则</h3><p><strong>首先，我们搭建一个普通的SpringBoot项目，回顾一下HelloWorld程序！</strong></p><p>写请求非常简单，那我们要引入我们前端资源，我们项目中有许多的静态资源，比如css，js等文件，这个SpringBoot怎么处理呢？</p><p>如果我们是一个web应用，我们的main下会有一个webapp，我们以前都是将所有的页面导在这里面的，对吧！但是我们现在的pom呢，打包方式是为jar的方式，那么这种方式SpringBoot能不能来给我们写页面呢？当然是可以的，但是SpringBoot对于静态资源放置的位置，是有规定的！</p><p><strong>我们先来聊聊这个静态资源映射规则：</strong></p><p>SpringBoot中，SpringMVC的web配置都在 WebMvcAutoConfiguration 这个配置类里面；</p><p>我们可以去看看 WebMvcAutoConfigurationAdapter 中有很多配置方法；</p><p>有一个方法：addResourceHandlers 添加资源处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.resourceProperties.isAddMappings()) &#123;<br>        <span class="hljs-comment">// 已禁用默认资源处理</span><br>        logger.debug(<span class="hljs-string">&quot;Default resource handling disabled&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// 缓存控制</span><br>    <span class="hljs-type">Duration</span> <span class="hljs-variable">cachePeriod</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.resourceProperties.getCache().getPeriod();<br>    <span class="hljs-type">CacheControl</span> <span class="hljs-variable">cacheControl</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();<br>    <span class="hljs-comment">// webjars 配置</span><br>    <span class="hljs-keyword">if</span> (!registry.hasMappingForPattern(<span class="hljs-string">&quot;/webjars/**&quot;</span>)) &#123;<br>        customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="hljs-string">&quot;/webjars/**&quot;</span>)<br>                                             .addResourceLocations(<span class="hljs-string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>)<br>                                             .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));<br>    &#125;<br>    <span class="hljs-comment">// 静态资源配置</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">staticPathPattern</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.mvcProperties.getStaticPathPattern();<br>    <span class="hljs-keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;<br>        customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)<br>                                             .addResourceLocations(getResourceLocations(<span class="hljs-built_in">this</span>.resourceProperties.getStaticLocations()))<br>                                             .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>读一下源代码：比如所有的 &#x2F;webjars&#x2F;** ， 都需要去 classpath:&#x2F;META-INF&#x2F;resources&#x2F;webjars&#x2F; 找对应的资源；</p><h3 id="10-3、什么是webjars-呢？"><a href="#10-3、什么是webjars-呢？" class="headerlink" title="10.3、什么是webjars 呢？"></a>10.3、什么是webjars 呢？</h3><p>Webjars本质就是以jar包的方式引入我们的静态资源 ， 我们以前要导入一个静态资源文件，直接导入即可。</p><p>使用SpringBoot需要使用Webjars，我们可以去搜索一下：</p><p>网站：<a href="https://www.webjars.org/">https://www.webjars.org</a></p><p>要使用jQuery，我们只要要引入jQuery对应版本的pom依赖即可！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.webjars<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jquery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>导入完毕，查看webjars目录结构，并访问Jquery.js文件！</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1eddbc4c46c04f5325eb87d4a9ff4650.png" alt="img"></p><p>访问：只要是静态资源，SpringBoot就会去对应的路径寻找资源，我们这里访问：<a href="http://localhost:8080/webjars/jquery/3.4.1/jquery.js">http://localhost:8080/webjars/jquery/3.4.1/jquery.js</a></p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/47d0d478f0bdbd36a1be8cdcc7e58b8a.png" alt="img"></p><h3 id="10-4、第二种静态资源映射规则"><a href="#10-4、第二种静态资源映射规则" class="headerlink" title="10.4、第二种静态资源映射规则"></a>10.4、第二种静态资源映射规则</h3><p>那我们项目中要是使用自己的静态资源该怎么导入呢？我们看下一行代码；</p><p>我们去找staticPathPattern发现第二种映射规则 ：&#x2F;** , 访问当前的项目任意资源，它会去找 resourceProperties 这个类，我们可以点进去看一下分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 进入方法</span><br><span class="hljs-keyword">public</span> String[] getStaticLocations() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.staticLocations;<br>&#125;<br><span class="hljs-comment">// 找到对应的值</span><br><span class="hljs-keyword">private</span> String[] staticLocations = CLASSPATH_RESOURCE_LOCATIONS;<br><span class="hljs-comment">// 找到路径</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = &#123; <br>    <span class="hljs-string">&quot;classpath:/META-INF/resources/&quot;</span>,<br>  <span class="hljs-string">&quot;classpath:/resources/&quot;</span>, <br>    <span class="hljs-string">&quot;classpath:/static/&quot;</span>, <br>    <span class="hljs-string">&quot;classpath:/public/&quot;</span> <br>&#125;;<br></code></pre></td></tr></table></figure><p>ResourceProperties 可以设置和我们静态资源有关的参数；这里面指向了它会去寻找资源的文件夹，即上面数组的内容。</p><p>所以得出结论，以下四个目录存放的静态资源可以被我们识别：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;classpath:/META-INF/resources/&quot;</span><br><span class="hljs-string">&quot;classpath:/resources/&quot;</span><br><span class="hljs-string">&quot;classpath:/static/&quot;</span><br><span class="hljs-string">&quot;classpath:/public/&quot;</span><br></code></pre></td></tr></table></figure><p>我们可以在resources根目录下新建对应的文件夹，都可以存放我们的静态文件；</p><p>比如我们访问 <a href="http://localhost:8080/1.js">http://localhost:8080/1.js</a> , 他就会去这些文件夹中寻找对应的静态资源文件；</p><h3 id="10-5、自定义静态资源路径"><a href="#10-5、自定义静态资源路径" class="headerlink" title="10.5、自定义静态资源路径"></a>10.5、自定义静态资源路径</h3><p>我们也可以自己通过配置文件来指定一下，哪些文件夹是需要我们放静态资源文件的，在application.properties中配置；</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.resources.static-locations</span>=<span class="hljs-string">classpath:/coding/,classpath:/kuang/</span><br></code></pre></td></tr></table></figure><p>一旦自己定义了静态文件夹的路径，原来的自动配置就都会失效了！</p><p>首页处理</p><p>静态资源文件夹说完后，我们继续向下看源码！可以看到一个欢迎页的映射，就是我们的首页！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> WelcomePageHandlerMapping <span class="hljs-title function_">welcomePageHandlerMapping</span><span class="hljs-params">(ApplicationContext applicationContext, FormattingConversionService mvcConversionService,ResourceUrlProvider mvcResourceUrlProvider)</span> &#123;<br>    <span class="hljs-type">WelcomePageHandlerMapping</span> <span class="hljs-variable">welcomePageHandlerMapping</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WelcomePageHandlerMapping</span>(<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplateAvailabilityProviders</span>(applicationContext), applicationContext, getWelcomePage(), <span class="hljs-comment">// getWelcomePage 获得欢迎页</span><br>        <span class="hljs-built_in">this</span>.mvcProperties.getStaticPathPattern());<br>    welcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));<br>    <span class="hljs-keyword">return</span> welcomePageHandlerMapping;<br>&#125;<br></code></pre></td></tr></table></figure><p>点进去继续看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Optional&lt;Resource&gt; <span class="hljs-title function_">getWelcomePage</span><span class="hljs-params">()</span> &#123;<br>    String[] locations = getResourceLocations(<span class="hljs-built_in">this</span>.resourceProperties.getStaticLocations());<br>    <span class="hljs-comment">// ::是java8 中新引入的运算符</span><br>    <span class="hljs-comment">// Class::function的时候function是属于Class的，应该是静态方法。</span><br>    <span class="hljs-comment">// this::function的funtion是属于这个对象的。</span><br>    <span class="hljs-comment">// 简而言之，就是一种语法糖而已，是一种简写</span><br>    <span class="hljs-keyword">return</span> Arrays.stream(locations).map(<span class="hljs-built_in">this</span>::getIndexHtml).filter(<span class="hljs-built_in">this</span>::isReadable).findFirst();<br>&#125;<br><span class="hljs-comment">// 欢迎页就是一个location下的的 index.html 而已</span><br><span class="hljs-keyword">private</span> Resource <span class="hljs-title function_">getIndexHtml</span><span class="hljs-params">(String location)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.resourceLoader.getResource(location + <span class="hljs-string">&quot;index.html&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>欢迎页，静态资源文件夹下的所有 index.html 页面；被 &#x2F;** 映射。</p><p>比如我访问 <a href="http://localhost:8080/">http://localhost:8080/</a> ，就会找静态资源文件夹下的 index.html</p><p>新建一个 index.html ，在我们上面的3个目录中任意一个；然后访问测试 <a href="http://localhost:8080/">http://localhost:8080/</a> 看结果！</p><p><strong>关于网站图标说明</strong>：</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/d14bb47a259e22392f69ee9c9bc79b8c.png" alt="img"></p><p>与其他静态资源一样，Spring Boot在配置的静态内容位置中查找 favicon.ico。如果存在这样的文件，它将自动用作应用程序的favicon。</p><p>1、关闭SpringBoot默认图标</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#关闭默认图标spring.mvc.favicon.enabled=false</span><br></code></pre></td></tr></table></figure><p>2、自己放一个图标在静态资源目录下，我放在 public 目录下</p><p>3、清除浏览器缓存！刷新网页，发现图标已经变成自己的了！</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/b44bafa9e4c43b543c384bc855aed9ec.png" alt="img"></p><h2 id="11、Thymeleaf模板引擎"><a href="#11、Thymeleaf模板引擎" class="headerlink" title="11、Thymeleaf模板引擎"></a>11、Thymeleaf模板引擎</h2><h3 id="11-1、模板引擎"><a href="#11-1、模板引擎" class="headerlink" title="11.1、模板引擎"></a>11.1、模板引擎</h3><p>前端交给我们的页面，是html页面。如果是我们以前开发，我们需要把他们转成jsp页面，jsp好处就是当我们查出一些数据转发到JSP页面以后，我们可以用jsp轻松实现数据的显示，及交互等。</p><p>jsp支持非常强大的功能，包括能写Java代码，但是呢，我们现在的这种情况，SpringBoot这个项目首先是以jar的方式，不是war，像第二，我们用的还是嵌入式的Tomcat，所以呢，<strong>他现在默认是不支持jsp的</strong>。</p><p>那不支持jsp，如果我们直接用纯静态页面的方式，那给我们开发会带来非常大的麻烦，那怎么办呢？</p><p><strong>SpringBoot推荐你可以来使用模板引擎：</strong></p><p>模板引擎，我们其实大家听到很多，其实jsp就是一个模板引擎，还有用的比较多的freemarker，包括SpringBoot给我们推荐的Thymeleaf，模板引擎有非常多，但再多的模板引擎，他们的思想都是一样的，什么样一个思想呢我们来看一下这张图：</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/45bd801ef96719b0732b86f32cd39e30.png" alt="img"></p><p>模板引擎的作用就是我们来写一个页面模板，比如有些值呢，是动态的，我们写一些表达式。而这些值，从哪来呢，就是我们在后台封装一些数据。然后把这个模板和这个数据交给我们模板引擎，模板引擎按照我们这个数据帮你把这表达式解析、填充到我们指定的位置，然后把这个数据最终生成一个我们想要的内容给我们写出去，这就是我们这个模板引擎，不管是jsp还是其他模板引擎，都是这个思想。只不过呢，就是说不同模板引擎之间，他们可能这个语法有点不一样。其他的我就不介绍了，我主要来介绍一下SpringBoot给我们推荐的Thymeleaf模板引擎，这模板引擎呢，是一个高级语言的模板引擎，他的这个语法更简单。而且呢，功能更强大。</p><p>我们呢，就来看一下这个模板引擎，那既然要看这个模板引擎。首先，我们来看SpringBoot里边怎么用。</p><h3 id="11-2、引入Thymeleaf"><a href="#11-2、引入Thymeleaf" class="headerlink" title="11.2、引入Thymeleaf"></a>11.2、引入Thymeleaf</h3><p>怎么引入呢，对于springboot来说，什么事情不都是一个start的事情嘛，我们去在项目中引入一下。给大家三个网址：</p><p>Thymeleaf 官网：<a href="https://www.thymeleaf.org/">https://www.thymeleaf.org/</a></p><p>Thymeleaf 在Github 的主页：<a href="https://github.com/thymeleaf/thymeleaf">https://github.com/thymeleaf/thymeleaf</a></p><p>Spring官方文档：找到我们对应的版本</p><p><a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter">https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter</a></p><p>找到对应的pom依赖：可以适当点进源码看下本来的包！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--thymeleaf--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Maven会自动下载jar包，我们可以去看下下载的东西；</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/29ccd652e7cf231a3d9be913ec77ba3c.png" alt="img"></p><h3 id="11-3、Thymeleaf分析"><a href="#11-3、Thymeleaf分析" class="headerlink" title="11.3、Thymeleaf分析"></a>11.3、Thymeleaf分析</h3><p>前面呢，我们已经引入了Thymeleaf，那这个要怎么使用呢？</p><p>我们首先得按照SpringBoot的自动配置原理看一下我们这个Thymeleaf的自动配置规则，在按照那个规则，我们进行使用。</p><p>我们去找一下Thymeleaf的自动配置类：ThymeleafPropert</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(</span><br><span class="hljs-meta">    prefix = &quot;spring.thymeleaf&quot;</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThymeleafProperties</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Charset DEFAULT_ENCODING;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;classpath:/templates/&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_SUFFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;.html&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">checkTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">checkTemplateLocation</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">prefix</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;classpath:/templates/&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">suffix</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;.html&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">mode</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;HTML&quot;</span>;<br>    <span class="hljs-keyword">private</span> Charset encoding;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以在其中看到默认的前缀和后缀！</p><p>我们只需要把我们的html页面放在类路径下的templates下，thymeleaf就可以帮我们自动渲染了。</p><p>使用thymeleaf什么都不需要配置，只需要将他放在指定的文件夹下即可！</p><p><strong>测试</strong></p><p>1、编写一个TestController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;<br>    <br>    <span class="hljs-meta">@RequestMapping(&quot;/t1&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//classpath:/templates/test.html</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>2、编写一个测试页面 test.html 放在 templates 目录下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>测试页面<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3、启动项目请求测试</p><h3 id="11-4、Thymeleaf-语法学习"><a href="#11-4、Thymeleaf-语法学习" class="headerlink" title="11.4、Thymeleaf 语法学习"></a>11.4、Thymeleaf 语法学习</h3><p>要学习语法，还是参考官网文档最为准确，我们找到对应的版本看一下；</p><p>Thymeleaf 官网：<a href="https://www.thymeleaf.org/">https://www.thymeleaf.org/</a> ， 简单看一下官网！我们去下载Thymeleaf的官方文档！</p><p><strong>我们做个最简单的练习 ：我们需要查出一些数据，在页面中展示</strong></p><p>1、修改测试请求，增加数据传输；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/t1&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">test1</span><span class="hljs-params">(Model model)</span>&#123;<br>    <span class="hljs-comment">//存入数据</span><br>    model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;Hello,Thymeleaf&quot;</span>);<br>    <span class="hljs-comment">//classpath:/templates/test.html</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、我们要使用thymeleaf，需要在html文件中导入命名空间的约束，方便提示。</p><p>我们可以去官方文档的#3中看一下命名空间拿来过来：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">xmlns:th=&quot;http://www.thymeleaf.org&quot;<br></code></pre></td></tr></table></figure><p>3、我们去编写下前端页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>狂神说<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>测试页面<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--th:text就是将div中的内容设置为它指定的值，和之前学习的Vue一样--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>4、启动测试！</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5fe0dde4dd4ca790f77ee097c3995b7d.png" alt="img"></p><p><strong>OK，入门搞定，我们来认真研习一下Thymeleaf的使用语法！</strong></p><p><strong>1、我们可以使用任意的 th:attr 来替换Html中原生属性的值！</strong></p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/472a44e8df3f36e7d8c31667206596de.png" alt="img"></p><p><strong>2、我们能写哪些表达式呢？</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java">Simple expressions:（表达式语法）<br>Variable Expressions: $&#123;...&#125;：获取变量值；OGNL；<br>    <span class="hljs-number">1</span>）、获取对象的属性、调用方法<br>    <span class="hljs-number">2</span>）、使用内置的基本对象：#<span class="hljs-number">18</span><br>         #ctx : the context object.<br>         #vars: the context variables.<br>         #locale : the context locale.<br>         #request : (only in Web Contexts) the HttpServletRequest object.<br>         #response : (only in Web Contexts) the HttpServletResponse object.<br>         #session : (only in Web Contexts) the HttpSession object.<br>         #servletContext : (only in Web Contexts) the ServletContext object.<br><br>    <span class="hljs-number">3</span>）、内置的一些工具对象：<br>　　　　　　#execInfo : information about the template being processed.<br>　　　　　　#uris : methods <span class="hljs-keyword">for</span> escaping parts of URLs/URIs<br>　　　　　　#conversions : methods <span class="hljs-keyword">for</span> executing the configured conversion <span class="hljs-title function_">service</span> <span class="hljs-params">(<span class="hljs-keyword">if</span> any)</span>.<br>　　　　　　#dates : methods <span class="hljs-keyword">for</span> java.util.Date objects: formatting, component extraction, etc.<br>　　　　　　#calendars : analogous to #dates , but <span class="hljs-keyword">for</span> java.util.Calendar objects.<br>　　　　　　#numbers : methods <span class="hljs-keyword">for</span> formatting numeric objects.<br>　　　　　　#strings : methods <span class="hljs-keyword">for</span> String objects: contains, startsWith, prepending/appending, etc.<br>　　　　　　#objects : methods <span class="hljs-keyword">for</span> objects in general.<br>　　　　　　#bools : methods <span class="hljs-keyword">for</span> <span class="hljs-type">boolean</span> evaluation.<br>　　　　　　#arrays : methods <span class="hljs-keyword">for</span> arrays.<br>　　　　　　#lists : methods <span class="hljs-keyword">for</span> lists.<br>　　　　　　#sets : methods <span class="hljs-keyword">for</span> sets.<br>　　　　　　#maps : methods <span class="hljs-keyword">for</span> maps.<br>　　　　　　#aggregates : methods <span class="hljs-keyword">for</span> creating aggregates on arrays or collections.<br>==================================================================================<br><br>  Selection Variable Expressions: *&#123;...&#125;：选择表达式：和$&#123;&#125;在功能上是一样；<br>  Message Expressions: #&#123;...&#125;：获取国际化内容<br>  Link URL Expressions: @&#123;...&#125;：定义URL；<br>  Fragment Expressions: ~&#123;...&#125;：片段引用表达式<br><br>Literals（字面量）<br>      Text literals: <span class="hljs-string">&#x27;one text&#x27;</span> , <span class="hljs-string">&#x27;Another one!&#x27;</span> ,…<br>      Number literals: <span class="hljs-number">0</span> , <span class="hljs-number">34</span> , <span class="hljs-number">3.0</span> , <span class="hljs-number">12.3</span> ,…<br>      Boolean literals: <span class="hljs-literal">true</span> , <span class="hljs-literal">false</span><br>      Null literal: <span class="hljs-literal">null</span><br>      Literal tokens: one , sometext , main ,…<br>      <br>Text operations:（文本操作）<br>    String concatenation: +<br>    Literal substitutions: |The name is $&#123;name&#125;|<br>    <br>Arithmetic operations:（数学运算）<br>    Binary operators: + , - , * , / , %<br>    Minus <span class="hljs-title function_">sign</span> <span class="hljs-params">(unary operator)</span>: -<br>    <br>Boolean operations:（布尔运算）<br>    Binary operators: and , or<br>    Boolean <span class="hljs-title function_">negation</span> <span class="hljs-params">(unary operator)</span>: ! , not<br>    <br>Comparisons and equality:（比较运算）<br>    Comparators: &gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )<br>    Equality operators: == , != ( eq , ne )<br>    <br>Conditional operators:条件运算（三元运算符）<br>    If-then: (<span class="hljs-keyword">if</span>) ? (then)<br>    If-then-<span class="hljs-keyword">else</span>: (<span class="hljs-keyword">if</span>) ? (then) : (<span class="hljs-keyword">else</span>)<br>    Default: (value) ?: (defaultvalue)<br>    <br>Special tokens:<br>    No-Operation: _<br></code></pre></td></tr></table></figure><p><strong>练习测试：</strong></p><p>1、 我们编写一个Controller，放一些数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/t2&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">test2</span><span class="hljs-params">(Map&lt;String,Object&gt; map)</span>&#123;<br>    <span class="hljs-comment">//存入数据</span><br>    map.put(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;&lt;h1&gt;Hello&lt;/h1&gt;&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;users&quot;</span>, Arrays.asList(<span class="hljs-string">&quot;qinjiang&quot;</span>,<span class="hljs-string">&quot;kuangshen&quot;</span>));<br>    <span class="hljs-comment">//classpath:/templates/test.html</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、测试页面取出数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>狂神说<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>测试页面<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!--不转义--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:utext</span>=<span class="hljs-string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--遍历数据--&gt;</span><br><span class="hljs-comment">&lt;!--th:each每次遍历都会生成当前这个标签：官网#9--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;user :$&#123;users&#125;&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--行内写法：官网#12--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;user:$&#123;users&#125;&quot;</span>&gt;</span>[[$&#123;user&#125;]]<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3、启动项目测试！</p><p><strong>我们看完语法，很多样式，我们即使现在学习了，也会忘记，所以我们在学习过程中，需要使用什么，根据官方文档来查询，才是最重要的，要熟练使用官方文档！</strong></p><h2 id="12、MVC自动配置原理"><a href="#12、MVC自动配置原理" class="headerlink" title="12、MVC自动配置原理"></a>12、MVC自动配置原理</h2><h3 id="12-1、官网阅读"><a href="#12-1、官网阅读" class="headerlink" title="12.1、官网阅读"></a>12.1、官网阅读</h3><p>在进行项目编写前，我们还需要知道一个东西，就是SpringBoot对我们的SpringMVC还做了哪些配置，包括如何扩展，如何定制。</p><p>只有把这些都搞清楚了，我们在之后使用才会更加得心应手。途径一：源码分析，途径二：官方文档！</p><p>地址 ：<a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-auto-configuration">https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-auto-configuration</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java">Spring MVC Auto-configuration<br><span class="hljs-comment">// Spring Boot为Spring MVC提供了自动配置，它可以很好地与大多数应用程序一起工作。</span><br>Spring Boot provides auto-configuration <span class="hljs-keyword">for</span> Spring MVC that works well with most applications.<br><span class="hljs-comment">// 自动配置在Spring默认设置的基础上添加了以下功能：</span><br>The auto-configuration adds the following features on top of Spring’s defaults:<br><span class="hljs-comment">// 包含视图解析器</span><br>Inclusion of ContentNegotiatingViewResolver and BeanNameViewResolver beans.<br><span class="hljs-comment">// 支持静态资源文件夹的路径，以及webjars</span><br>Support <span class="hljs-keyword">for</span> serving <span class="hljs-keyword">static</span> resources, including support <span class="hljs-keyword">for</span> WebJars <br><span class="hljs-comment">// 自动注册了Converter：</span><br><span class="hljs-comment">// 转换器，这就是我们网页提交数据到后台自动封装成为对象的东西，比如把&quot;1&quot;字符串自动转换为int类型</span><br><span class="hljs-comment">// Formatter：【格式化器，比如页面给我们了一个2019-8-10，它会给我们自动格式化为Date对象】</span><br>Automatic registration of Converter, GenericConverter, and Formatter beans.<br><span class="hljs-comment">// HttpMessageConverters</span><br><span class="hljs-comment">// SpringMVC用来转换Http请求和响应的的，比如我们要把一个User对象转换为JSON字符串，可以去看官网文档解释；</span><br>Support <span class="hljs-keyword">for</span> <span class="hljs-title function_">HttpMessageConverters</span> <span class="hljs-params">(covered later in <span class="hljs-built_in">this</span> document)</span>.<br><span class="hljs-comment">// 定义错误代码生成规则的</span><br>Automatic registration of <span class="hljs-title function_">MessageCodesResolver</span> <span class="hljs-params">(covered later in <span class="hljs-built_in">this</span> document)</span>.<br><span class="hljs-comment">// 首页定制</span><br>Static index.html support.<br><span class="hljs-comment">// 图标定制</span><br>Custom Favicon <span class="hljs-title function_">support</span> <span class="hljs-params">(covered later in <span class="hljs-built_in">this</span> document)</span>.<br><span class="hljs-comment">// 初始化数据绑定器：帮我们把请求数据绑定到JavaBean中！</span><br>Automatic use of a ConfigurableWebBindingInitializer <span class="hljs-title function_">bean</span> <span class="hljs-params">(covered later in <span class="hljs-built_in">this</span> document)</span>.<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">如果您希望保留Spring Boot MVC功能，并且希望添加其他MVC配置（拦截器、格式化程序、视图控制器和其他功能），则可以添加自己</span><br><span class="hljs-comment">的@configuration类，类型为webmvcconfiguer，但不添加@EnableWebMvc。如果希望提供</span><br><span class="hljs-comment">RequestMappingHandlerMapping、RequestMappingHandlerAdapter或ExceptionHandlerExceptionResolver的自定义</span><br><span class="hljs-comment">实例，则可以声明WebMVCregistrationAdapter实例来提供此类组件。</span><br><span class="hljs-comment">*/</span><br>If you want to keep Spring Boot MVC features and you want to add additional MVC <span class="hljs-title function_">configuration</span> <br><span class="hljs-params">(interceptors, formatters, view controllers, and other features)</span>, you can add your own <br><span class="hljs-meta">@Configuration</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">of</span> type WebMvcConfigurer but without <span class="hljs-meta">@EnableWebMvc</span>. If you wish to provide <br>custom instances of RequestMappingHandlerMapping, RequestMappingHandlerAdapter, or <br>ExceptionHandlerExceptionResolver, you can declare a WebMvcRegistrationsAdapter instance to provide such components.<br><br><span class="hljs-comment">// 如果您想完全控制Spring MVC，可以添加自己的@Configuration，并用@EnableWebMvc进行注释。</span><br>If you want to take complete control of Spring MVC, you can add your own <span class="hljs-meta">@Configuration</span> annotated with <span class="hljs-meta">@EnableWebMvc</span>.<br></code></pre></td></tr></table></figure><p>我们来仔细对照，看一下它怎么实现的，它告诉我们SpringBoot已经帮我们自动配置好了SpringMVC，然后自动配置了哪些东西呢？</p><h3 id="12-2、ContentNegotiatingViewResolver-内容协商视图解析器"><a href="#12-2、ContentNegotiatingViewResolver-内容协商视图解析器" class="headerlink" title="12.2、ContentNegotiatingViewResolver 内容协商视图解析器"></a>12.2、ContentNegotiatingViewResolver 内容协商视图解析器</h3><p>自动配置了ViewResolver，就是我们之前学习的SpringMVC的视图解析器；</p><p>即根据方法的返回值取得视图对象（View），然后由视图对象决定如何渲染（转发，重定向）。</p><p>我们去看看这里的源码：我们找到 WebMvcAutoConfiguration ， 然后搜索ContentNegotiatingViewResolver。找到如下方法！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnBean(ViewResolver.class)</span><br><span class="hljs-meta">@ConditionalOnMissingBean(name = &quot;viewResolver&quot;, value = ContentNegotiatingViewResolver.class)</span><br><span class="hljs-keyword">public</span> ContentNegotiatingViewResolver <span class="hljs-title function_">viewResolver</span><span class="hljs-params">(BeanFactory beanFactory)</span> &#123;<br>    <span class="hljs-type">ContentNegotiatingViewResolver</span> <span class="hljs-variable">resolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ContentNegotiatingViewResolver</span>();<br>    resolver.setContentNegotiationManager(beanFactory.getBean(ContentNegotiationManager.class));<br>    <span class="hljs-comment">// ContentNegotiatingViewResolver使用所有其他视图解析器来定位视图，因此它应该具有较高的优先级</span><br>    resolver.setOrder(Ordered.HIGHEST_PRECEDENCE);<br>    <span class="hljs-keyword">return</span> resolver;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以点进这类看看！找到对应的解析视图的代码；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Nullable</span> <span class="hljs-comment">// 注解说明：@Nullable 即参数可为null</span><br><span class="hljs-keyword">public</span> View <span class="hljs-title function_">resolveViewName</span><span class="hljs-params">(String viewName, Locale locale)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">RequestAttributes</span> <span class="hljs-variable">attrs</span> <span class="hljs-operator">=</span> RequestContextHolder.getRequestAttributes();<br>    Assert.state(attrs <span class="hljs-keyword">instanceof</span> ServletRequestAttributes, <span class="hljs-string">&quot;No current ServletRequestAttributes&quot;</span>);<br>    List&lt;MediaType&gt; requestedMediaTypes = <span class="hljs-built_in">this</span>.getMediaTypes(((ServletRequestAttributes)attrs).getRequest());<br>    <span class="hljs-keyword">if</span> (requestedMediaTypes != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 获取候选的视图对象</span><br>        List&lt;View&gt; candidateViews = <span class="hljs-built_in">this</span>.getCandidateViews(viewName, locale, requestedMediaTypes);<br>        <span class="hljs-comment">// 选择一个最适合的视图对象，然后把这个对象返回</span><br>        <span class="hljs-type">View</span> <span class="hljs-variable">bestView</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getBestView(candidateViews, requestedMediaTypes, attrs);<br>        <span class="hljs-keyword">if</span> (bestView != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> bestView;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// .....</span><br>&#125;<br></code></pre></td></tr></table></figure><p>我们继续点进去看，他是怎么获得候选的视图的呢？</p><p>getCandidateViews中看到他是把所有的视图解析器拿来，进行while循环，挨个解析！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Iterator</span> <span class="hljs-variable">var5</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.viewResolvers.iterator();<br></code></pre></td></tr></table></figure><p>所以得出结论：<strong>ContentNegotiatingViewResolver 这个视图解析器就是用来组合所有的视图解析器的</strong></p><p>我们再去研究下他的组合逻辑，看到有个属性viewResolvers，看看它是在哪里进行赋值的！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initServletContext</span><span class="hljs-params">(ServletContext servletContext)</span> &#123;<br>    <span class="hljs-comment">// 这里它是从beanFactory工具中获取容器中的所有视图解析器</span><br>    <span class="hljs-comment">// ViewRescolver.class 把所有的视图解析器来组合的</span><br>    Collection&lt;ViewResolver&gt; matchingBeans = BeanFactoryUtils.beansOfTypeIncludingAncestors(<span class="hljs-built_in">this</span>.obtainApplicationContext(), ViewResolver.class).values();<br>    ViewResolver viewResolver;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.viewResolvers == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-built_in">this</span>.viewResolvers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(matchingBeans.size());<br>    &#125;<br>    <span class="hljs-comment">// ...............</span><br>&#125;<br></code></pre></td></tr></table></figure><p>既然它是在容器中去找视图解析器，我们是否可以猜想，我们就可以去实现一个视图解析器了呢？</p><p>我们可以自己给容器中去添加一个视图解析器；这个类就会帮我们自动的将它组合进来；<strong>我们去实现一下</strong></p><p>1、我们在我们的主程序中去写一个视图解析器来试试；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span> <span class="hljs-comment">//放到bean中</span><br><span class="hljs-keyword">public</span> ViewResolver <span class="hljs-title function_">myViewResolver</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyViewResolver</span>();<br>&#125;<br><br><span class="hljs-comment">//我们写一个静态内部类，视图解析器就需要实现ViewResolver接口</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyViewResolver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ViewResolver</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> View <span class="hljs-title function_">resolveViewName</span><span class="hljs-params">(String s, Locale locale)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、怎么看我们自己写的视图解析器有没有起作用呢？</p><p>我们给 DispatcherServlet 中的 doDispatch方法 加个断点进行调试一下，因为所有的请求都会走到这个方法中</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1dd1ac2220ca3f4ed1eb47f7717e21e4.png" alt="img"></p><p>3、我们启动我们的项目，然后随便访问一个页面，看一下Debug信息；</p><p>找到this</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7644e464e64f4faeffd9e73ee7f75964.png" alt="img"></p><p>找到视图解析器，我们看到我们自己定义的就在这里了；</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/750d27e0da36745ef53160b0db5b34e3.png" alt="img"></p><p>所以说，我们如果想要使用自己定制化的东西，我们只需要给容器中添加这个组件就好了！剩下的事情SpringBoot就会帮我们做了！</p><h3 id="12-3、转换器和格式化器"><a href="#12-3、转换器和格式化器" class="headerlink" title="12.3、转换器和格式化器"></a>12.3、转换器和格式化器</h3><p>找到格式化转换器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> FormattingConversionService <span class="hljs-title function_">mvcConversionService</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 拿到配置文件中的格式化规则</span><br>    <span class="hljs-type">WebConversionService</span> <span class="hljs-variable">conversionService</span> <span class="hljs-operator">=</span> <br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebConversionService</span>(<span class="hljs-built_in">this</span>.mvcProperties.getDateFormat());<br>    addFormatters(conversionService);<br>    <span class="hljs-keyword">return</span> conversionService;<br>&#125;<br></code></pre></td></tr></table></figure><p>点击去：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDateFormat</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.dateFormat;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* Date format to use. For instance, `dd/MM/yyyy`. 默认的</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> String dateFormat;<br></code></pre></td></tr></table></figure><p>可以看到在我们的Properties文件中，我们可以进行自动配置它！</p><p>如果配置了自己的格式化方式，就会注册到Bean中生效，我们可以在配置文件中配置日期格式化的规则：</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4381c01b87bed2666b6988c5b201c607.png" alt="img"></p><p>其余的就不一一举例了，大家可以下去多研究探讨即可！</p><h3 id="12-4、修改SpringBoot的默认配置"><a href="#12-4、修改SpringBoot的默认配置" class="headerlink" title="12.4、修改SpringBoot的默认配置"></a>12.4、修改SpringBoot的默认配置</h3><p>这么多的自动配置，原理都是一样的，通过这个WebMVC的自动配置原理分析，我们要学会一种学习方式，通过源码探究，得出结论；这个结论一定是属于自己的，而且一通百通。</p><p>SpringBoot的底层，大量用到了这些设计细节思想，所以，没事需要多阅读源码！得出结论；</p><p>SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（如果用户自己配置@bean），如果有就用用户配置的，如果没有就用自动配置的；</p><p>如果有些组件可以存在多个，比如我们的视图解析器，就将用户配置的和自己默认的组合起来！</p><p><strong>扩展使用SpringMVC</strong> 官方文档如下：</p><p>If you want to keep Spring Boot MVC features and you want to add additional MVC configuration (interceptors, formatters, view controllers, and other features), you can add your own @Configuration class of type WebMvcConfigurer but without @EnableWebMvc. If you wish to provide custom instances of RequestMappingHandlerMapping, RequestMappingHandlerAdapter, or ExceptionHandlerExceptionResolver, you can declare a WebMvcRegistrationsAdapter instance to provide such components.</p><p>我们要做的就是编写一个@Configuration注解类，并且类型要为WebMvcConfigurer，还不能标注@EnableWebMvc注解；我们去自己写一个；我们新建一个包叫config，写一个类MyMvcConfig；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//应为类型要求为WebMvcConfigurer，所以我们实现其接口</span><br><span class="hljs-comment">//可以使用自定义类扩展MVC的功能</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> &#123;<br>        <span class="hljs-comment">// 浏览器发送/test ， 就会跳转到test页面；</span><br>        registry.addViewController(<span class="hljs-string">&quot;/test&quot;</span>).setViewName(<span class="hljs-string">&quot;test&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们去浏览器访问一下：</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ae3a38337f34f6e1389f4d3406cd9976.png" alt="img"></p><p><strong>确实也跳转过来了！所以说，我们要扩展SpringMVC，官方就推荐我们这么去使用，既保SpringBoot留所有的自动配置，也能用我们扩展的配置！</strong></p><p>我们可以去分析一下原理：</p><p>1、WebMvcAutoConfiguration 是 SpringMVC的自动配置类，里面有一个类WebMvcAutoConfigurationAdapter</p><p>2、这个类上有一个注解，在做其他自动配置时会导入：@Import(EnableWebMvcConfiguration.class)</p><p>3、我们点进EnableWebMvcConfiguration这个类看一下，它继承了一个父类：DelegatingWebMvcConfiguration</p><p>这个父类中有这样一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DelegatingWebMvcConfiguration</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebMvcConfigurationSupport</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">WebMvcConfigurerComposite</span> <span class="hljs-variable">configurers</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebMvcConfigurerComposite</span>();<br>    <br>  <span class="hljs-comment">// 从容器中获取所有的webmvcConfigurer</span><br>    <span class="hljs-meta">@Autowired(required = false)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setConfigurers</span><span class="hljs-params">(List&lt;WebMvcConfigurer&gt; configurers)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;<br>            <span class="hljs-built_in">this</span>.configurers.addWebMvcConfigurers(configurers);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4、我们可以在这个类中去寻找一个我们刚才设置的viewController当做参考，发现它调用了一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> &#123;<br>    <span class="hljs-built_in">this</span>.configurers.addViewControllers(registry);<br>&#125;<br></code></pre></td></tr></table></figure><p>5、我们点进去看一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> &#123;<br>    <span class="hljs-type">Iterator</span> <span class="hljs-variable">var2</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.delegates.iterator();<br><br>    <span class="hljs-keyword">while</span>(var2.hasNext()) &#123;<br>        <span class="hljs-comment">// 将所有的WebMvcConfigurer相关配置来一起调用！包括我们自己配置的和Spring给我们配置的</span><br>        <span class="hljs-type">WebMvcConfigurer</span> <span class="hljs-variable">delegate</span> <span class="hljs-operator">=</span> (WebMvcConfigurer)var2.next();<br>        delegate.addViewControllers(registry);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>所以得出结论：所有的WebMvcConfiguration都会被作用，不止Spring自己的配置类，我们自己的配置类当然也会被调用；</p><h3 id="12-5、全面接管SpringMVC"><a href="#12-5、全面接管SpringMVC" class="headerlink" title="12.5、全面接管SpringMVC"></a>12.5、全面接管SpringMVC</h3><p>官方文档：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">If you want to take complete control of Spring MVC<br>you can add your own <span class="hljs-meta">@Configuration</span> annotated with <span class="hljs-meta">@EnableWebMvc</span>.<br></code></pre></td></tr></table></figure><p>全面接管即：SpringBoot对SpringMVC的自动配置不需要了，所有都是我们自己去配置！</p><p>只需在我们的配置类中要加一个@EnableWebMvc。</p><p>我们看下如果我们全面接管了SpringMVC了，我们之前SpringBoot给我们配置的静态资源映射一定会无效，我们可以去测试一下；</p><p>不加注解之前，访问首页：</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/e800d1746b709218e9be51b341b0aaac.png" alt="img"></p><p>给配置类加上注解：@EnableWebMvc</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/66590fa7cd033afe0e038fd0ed3a24a0.png" alt="img"></p><p>我们发现所有的SpringMVC自动配置都失效了！回归到了最初的样子；</p><p><strong>当然，我们开发中，不推荐使用全面接管SpringMVC</strong></p><p>思考问题？为什么加了一个注解，自动配置就失效了！我们看下源码：</p><p>1、这里发现它是导入了一个类，我们可以继续进去看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Import(&#123;DelegatingWebMvcConfiguration.class&#125;)</span><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableWebMvc &#123;&#125;<br></code></pre></td></tr></table></figure><p>2、它继承了一个父类 WebMvcConfigurationSupport</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DelegatingWebMvcConfiguration</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebMvcConfigurationSupport</span> &#123;  <span class="hljs-comment">// ......&#125;</span><br></code></pre></td></tr></table></figure><p>3、我们来回顾一下Webmvc自动配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span><br><span class="hljs-meta">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class &#125;)</span><br><span class="hljs-comment">// 这个注解的意思就是：容器中没有这个组件的时候，这个自动配置类才生效</span><br><span class="hljs-meta">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span><br><span class="hljs-meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span><br><span class="hljs-meta">@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,</span><br><span class="hljs-meta">    ValidationAutoConfiguration.class &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcAutoConfiguration</span> &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>总结一句话：@EnableWebMvc将WebMvcConfigurationSupport组件导入进来了；</p><p>而导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能！</p><p><strong>在SpringBoot中会有非常多的扩展配置，只要看见了这个，我们就应该多留心注意~</strong></p><h2 id="13、页面国际化"><a href="#13、页面国际化" class="headerlink" title="13、页面国际化"></a>13、页面国际化</h2><p>有的时候，我们的网站会去涉及中英文甚至多语言的切换，这时候我们就需要学习国际化了！</p><h3 id="13-1、准备工作"><a href="#13-1、准备工作" class="headerlink" title="13.1、准备工作"></a>13.1、准备工作</h3><p>先在IDEA中统一设置properties的编码问题！</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/489cfba0cf357bde4057a2c2d2b580ad.png" alt="img"></p><p>编写国际化配置文件，抽取页面需要显示的国际化页面消息。我们可以去登录页面查看一下，哪些内容我们需要编写国际化的配置！</p><h3 id="13-2、配置文件编写"><a href="#13-2、配置文件编写" class="headerlink" title="13.2、配置文件编写"></a>13.2、配置文件编写</h3><p>1、我们在resources资源文件下新建一个i18n目录，存放国际化配置文件</p><p>2、建立一个login.properties文件，还有一个login_zh_CN.properties；发现IDEA自动识别了我们要做国际化操作；文件夹变了！</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7ff470c81ba288ddee594df797d5a6b3.png" alt="img"></p><p>3、我们可以在这上面去新建一个文件；</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4402cca5d690d1d9dc5d2648c0fdd4fa.png" alt="img"></p><p>弹出如下页面：我们再添加一个英文的；</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/75c3225ba6f34cc37677941c9faf21ef.png" alt="img"></p><p>这样就快捷多了！</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/899381a02f9f84587c8406180f56c2cc.png" alt="img"></p><p><strong>4、接下来，我们就来编写配置，我们可以看到idea下面有另外一个视图；</strong></p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/917e4ca891de6158dbb1dce997711002.png" alt="img"></p><p>这个视图我们点击 + 号就可以直接添加属性了；我们新建一个login.tip，可以看到边上有三个文件框可以输入</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/770d1b597e3f83f6ace86ec69f74e5aa.png" alt="img"></p><p>我们添加一下首页的内容！</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/0c809b3d3056772c6c5701ede8b5b9e4.png" alt="img"></p><p>然后依次添加其他页面内容即可！</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3aef671b15e64cf33e82f04a539bf07f.png" alt="img"></p><p>然后去查看我们的配置文件；</p><p>login.properties ：默认</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">login.btn</span>=<span class="hljs-string">登录</span><br><span class="hljs-attr">login.password</span>=<span class="hljs-string">密码</span><br><span class="hljs-attr">login.remember</span>=<span class="hljs-string">记住我</span><br><span class="hljs-attr">login.tip</span>=<span class="hljs-string">请登录</span><br><span class="hljs-attr">login.username</span>=<span class="hljs-string">用户名</span><br></code></pre></td></tr></table></figure><p>英文：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">login.btn</span>=<span class="hljs-string">Sign in</span><br><span class="hljs-attr">login.password</span>=<span class="hljs-string">Password</span><br><span class="hljs-attr">login.remember</span>=<span class="hljs-string">Remember me</span><br><span class="hljs-attr">login.tip</span>=<span class="hljs-string">Please sign in</span><br><span class="hljs-attr">login.username</span>=<span class="hljs-string">Username</span><br></code></pre></td></tr></table></figure><p>中文：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">login.btn</span>=<span class="hljs-string">登录</span><br><span class="hljs-attr">login.password</span>=<span class="hljs-string">密码</span><br><span class="hljs-attr">login.remember</span>=<span class="hljs-string">记住我</span><br><span class="hljs-attr">login.tip</span>=<span class="hljs-string">请登录</span><br><span class="hljs-attr">login.username</span>=<span class="hljs-string">用户名</span><br></code></pre></td></tr></table></figure><p>OK，配置文件步骤搞定！</p><h3 id="13-3、配置文件生效探究"><a href="#13-3、配置文件生效探究" class="headerlink" title="13.3、配置文件生效探究"></a>13.3、配置文件生效探究</h3><p>我们去看一下SpringBoot对国际化的自动配置！这里又涉及到一个类：MessageSourceAutoConfiguration</p><p>里面有一个方法，这里发现SpringBoot已经自动配置好了管理我们国际化资源文件的组件 ResourceBundleMessageSource；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取 properties 传递过来的值进行判断</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> MessageSource <span class="hljs-title function_">messageSource</span><span class="hljs-params">(MessageSourceProperties properties)</span> &#123;<br>    <span class="hljs-type">ResourceBundleMessageSource</span> <span class="hljs-variable">messageSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceBundleMessageSource</span>();<br>    <span class="hljs-keyword">if</span> (StringUtils.hasText(properties.getBasename())) &#123;<br>        <span class="hljs-comment">// 设置国际化文件的基础名（去掉语言国家代码的）</span><br>        messageSource.setBasenames(<br>            StringUtils.commaDelimitedListToStringArray(<br>                                       StringUtils.trimAllWhitespace(properties.getBasename())));<br>    &#125;<br>    <span class="hljs-keyword">if</span> (properties.getEncoding() != <span class="hljs-literal">null</span>) &#123;<br>        messageSource.setDefaultEncoding(properties.getEncoding().name());<br>    &#125;<br>    messageSource.setFallbackToSystemLocale(properties.isFallbackToSystemLocale());<br>    <span class="hljs-type">Duration</span> <span class="hljs-variable">cacheDuration</span> <span class="hljs-operator">=</span> properties.getCacheDuration();<br>    <span class="hljs-keyword">if</span> (cacheDuration != <span class="hljs-literal">null</span>) &#123;<br>        messageSource.setCacheMillis(cacheDuration.toMillis());<br>    &#125;<br>    messageSource.setAlwaysUseMessageFormat(properties.isAlwaysUseMessageFormat());<br>    messageSource.setUseCodeAsDefaultMessage(properties.isUseCodeAsDefaultMessage());<br>    <span class="hljs-keyword">return</span> messageSource;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们真实 的情况是放在了i18n目录下，所以我们要去配置这个messages的路径；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">spring.messages.basename=i18n.login<br></code></pre></td></tr></table></figure><h3 id="13-4、配置页面国际化值"><a href="#13-4、配置页面国际化值" class="headerlink" title="13.4、配置页面国际化值"></a>13.4、配置页面国际化值</h3><p>去页面获取国际化的值，查看Thymeleaf的文档，找到message取值操作为：#{…}。我们去页面测试下：</p><p>IDEA还有提示，非常智能的！</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/fa17b1326a55bce26580e6b981e3eef3.png" alt="img"></p><p>我们可以去启动项目，访问一下，发现已经自动识别为中文的了！</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/859fe297ddbc63f7af87a1e3ae6813bd.png" alt="img"></p><p><strong>但是我们想要更好！可以根据按钮自动切换中文英文！</strong></p><h3 id="13-5、配置国际化解析"><a href="#13-5、配置国际化解析" class="headerlink" title="13.5、配置国际化解析"></a>13.5、配置国际化解析</h3><p>在Spring中有一个国际化的Locale （区域信息对象）；里面有一个叫做LocaleResolver （获取区域信息对象）的解析器！</p><p>我们去我们webmvc自动配置文件，寻找一下！看到SpringBoot默认配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnMissingBean</span><br><span class="hljs-meta">@ConditionalOnProperty(prefix = &quot;spring.mvc&quot;, name = &quot;locale&quot;)</span><br><span class="hljs-keyword">public</span> LocaleResolver <span class="hljs-title function_">localeResolver</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 容器中没有就自己配，有的话就用用户配置的</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.mvcProperties.getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FixedLocaleResolver</span>(<span class="hljs-built_in">this</span>.mvcProperties.getLocale());<br>    &#125;<br>    <span class="hljs-comment">// 接收头国际化分解</span><br>    <span class="hljs-type">AcceptHeaderLocaleResolver</span> <span class="hljs-variable">localeResolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AcceptHeaderLocaleResolver</span>();<br>    localeResolver.setDefaultLocale(<span class="hljs-built_in">this</span>.mvcProperties.getLocale());<br>    <span class="hljs-keyword">return</span> localeResolver;<br>&#125;<br></code></pre></td></tr></table></figure><p>AcceptHeaderLocaleResolver 这个类中有一个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Locale <span class="hljs-title function_">resolveLocale</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>    <span class="hljs-type">Locale</span> <span class="hljs-variable">defaultLocale</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getDefaultLocale();<br>    <span class="hljs-comment">// 默认的就是根据请求头带来的区域信息获取Locale进行国际化</span><br>    <span class="hljs-keyword">if</span> (defaultLocale != <span class="hljs-literal">null</span> &amp;&amp; request.getHeader(<span class="hljs-string">&quot;Accept-Language&quot;</span>) == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> defaultLocale;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">Locale</span> <span class="hljs-variable">requestLocale</span> <span class="hljs-operator">=</span> request.getLocale();<br>        List&lt;Locale&gt; supportedLocales = <span class="hljs-built_in">this</span>.getSupportedLocales();<br>        <span class="hljs-keyword">if</span> (!supportedLocales.isEmpty() &amp;&amp; !supportedLocales.contains(requestLocale)) &#123;<br>            <span class="hljs-type">Locale</span> <span class="hljs-variable">supportedLocale</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.findSupportedLocale(request, supportedLocales);<br>            <span class="hljs-keyword">if</span> (supportedLocale != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> supportedLocale;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> defaultLocale != <span class="hljs-literal">null</span> ? defaultLocale : requestLocale;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> requestLocale;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>那假如我们现在想点击链接让我们的国际化资源生效，就需要让我们自己的Locale生效！</p><p>我们去自己写一个自己的LocaleResolver，可以在链接上携带区域信息！</p><p>修改一下前端页面的跳转连接：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 这里传入参数不需要使用 ？使用 （key=value）--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-sm&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/index.html(l=&#x27;zh_CN&#x27;)&#125;&quot;</span>&gt;</span>中文<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-sm&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/index.html(l=&#x27;en_US&#x27;)&#125;&quot;</span>&gt;</span>English<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们去写一个处理的组件类！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.component;<br><br><span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.LocaleResolver;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.util.Locale;<br><br><span class="hljs-comment">//可以在链接上携带区域信息</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyLocaleResolver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">LocaleResolver</span> &#123;<br><br>    <span class="hljs-comment">//解析请求</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Locale <span class="hljs-title function_">resolveLocale</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">language</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;l&quot;</span>);<br>        <span class="hljs-type">Locale</span> <span class="hljs-variable">locale</span> <span class="hljs-operator">=</span> Locale.getDefault(); <span class="hljs-comment">// 如果没有获取到就使用系统默认的</span><br>        <span class="hljs-comment">//如果请求链接不为空</span><br>        <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(language))&#123;<br>            <span class="hljs-comment">//分割请求参数</span><br>            String[] split = language.split(<span class="hljs-string">&quot;_&quot;</span>);<br>            <span class="hljs-comment">//国家，地区</span><br>            locale = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Locale</span>(split[<span class="hljs-number">0</span>],split[<span class="hljs-number">1</span>]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> locale;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLocale</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Locale locale)</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>为了让我们的区域化信息能够生效，我们需要再配置一下这个组件！在我们自己的MvcConofig下添加bean；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Beanpublic</span> LocaleResolver <span class="hljs-title function_">localeResolver</span><span class="hljs-params">()</span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyLocaleResolver</span>();&#125;<br></code></pre></td></tr></table></figure><p><strong>我们重启项目，来访问一下，发现点击按钮可以实现成功切换！搞定收工！</strong></p><h2 id="14、集成Swagger终极版"><a href="#14、集成Swagger终极版" class="headerlink" title="14、集成Swagger终极版"></a>14、集成Swagger终极版</h2><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9e2e15e1d4fdf8d686a1ac974e7c1d15.png" alt="img"></p><p><strong>学习目标：</strong></p><ul><li>了解Swagger的概念及作用</li><li>掌握在项目中集成Swagger自动生成API文档</li></ul><h3 id="14-1、Swagger简介"><a href="#14-1、Swagger简介" class="headerlink" title="14.1、Swagger简介"></a>14.1、Swagger简介</h3><p><strong>前后端分离</strong></p><ul><li>前端 -&gt; 前端控制层、视图层</li><li>后端 -&gt; 后端控制层、服务层、数据访问层</li><li>前后端通过API进行交互</li><li>前后端相对独立且松耦合</li></ul><p><strong>产生的问题</strong></p><ul><li>前后端集成，前端或者后端无法做到“及时协商，尽早解决”，最终导致问题集中爆发</li></ul><p><strong>解决方案</strong></p><ul><li>首先定义schema [ 计划的提纲 ]，并实时跟踪最新的API，降低集成风险</li></ul><p><strong>Swagger</strong></p><ul><li>号称世界上最流行的API框架</li><li>Restful Api 文档在线自动生成器 &#x3D;&gt; <strong>API 文档 与API 定义同步更新</strong></li><li>直接运行，在线测试API</li><li>支持多种语言 （如：Java，PHP等）</li><li>官网：<a href="https://swagger.io/">https://swagger.io/</a></li></ul><h3 id="14-2、SpringBoot集成Swagger"><a href="#14-2、SpringBoot集成Swagger" class="headerlink" title="14.2、SpringBoot集成Swagger"></a>14.2、SpringBoot集成Swagger</h3><p><strong>SpringBoot集成Swagger</strong> &#x3D;&gt; <strong>springfox</strong>，两个jar包</p><ul><li><strong>Springfox-swagger2</strong></li><li>swagger-springmvc</li></ul><p><strong>使用Swagger</strong></p><p>要求：jdk 1.8 + 否则swagger2无法运行</p><p>步骤：</p><p>1、新建一个SpringBoot-web项目</p><p>2、添加Maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3、编写HelloController，测试确保运行成功！</p><p>4、要使用Swagger，我们需要编写一个配置类-SwaggerConfig来配置 Swagger</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span> <span class="hljs-comment">//配置类</span><br><span class="hljs-meta">@EnableSwagger2</span><span class="hljs-comment">// 开启Swagger2的自动配置</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwaggerConfig</span> &#123;  <br>&#125;<br></code></pre></td></tr></table></figure><p>5、访问测试 ：<a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a> ，可以看到swagger的界面；</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/a98baaec2e7d61f501fd90da0ffb009b.png" alt="img"></p><h3 id="14-3、配置Swagger"><a href="#14-3、配置Swagger" class="headerlink" title="14.3、配置Swagger"></a>14.3、配置Swagger</h3><p>1、Swagger实例Bean是Docket，所以通过配置Docket实例来配置Swaggger。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span> <span class="hljs-comment">//配置docket以配置Swagger具体参数</span><br><span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">docket</span><span class="hljs-params">()</span> &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2);<br>&#125;<br></code></pre></td></tr></table></figure><p>2、可以通过apiInfo()属性配置文档信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//配置文档信息</span><br><span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">apiInfo</span><span class="hljs-params">()</span> &#123;<br>   <span class="hljs-type">Contact</span> <span class="hljs-variable">contact</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Contact</span>(<span class="hljs-string">&quot;联系人名字&quot;</span>, <span class="hljs-string">&quot;http://xxx.xxx.com/联系人访问链接&quot;</span>, <span class="hljs-string">&quot;联系人邮箱&quot;</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfo</span>(<br>           <span class="hljs-string">&quot;Swagger学习&quot;</span>, <span class="hljs-comment">// 标题</span><br>           <span class="hljs-string">&quot;学习演示如何配置Swagger&quot;</span>, <span class="hljs-comment">// 描述</span><br>           <span class="hljs-string">&quot;v1.0&quot;</span>, <span class="hljs-comment">// 版本</span><br>           <span class="hljs-string">&quot;http://terms.service.url/组织链接&quot;</span>, <span class="hljs-comment">// 组织链接</span><br>           contact, <span class="hljs-comment">// 联系人信息</span><br>           <span class="hljs-string">&quot;Apach 2.0 许可&quot;</span>, <span class="hljs-comment">// 许可</span><br>           <span class="hljs-string">&quot;许可链接&quot;</span>, <span class="hljs-comment">// 许可连接</span><br>           <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;()<span class="hljs-comment">// 扩展</span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>3、Docket 实例关联上 apiInfo()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">docket</span><span class="hljs-params">()</span> &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2).apiInfo(apiInfo());<br>&#125;<br></code></pre></td></tr></table></figure><p>4、重启项目，访问测试 <a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a> 看下效果；</p><h3 id="14-4、配置扫描接口"><a href="#14-4、配置扫描接口" class="headerlink" title="14.4、配置扫描接口"></a>14.4、配置扫描接口</h3><p>1、构建Docket时通过select()方法配置怎么扫描接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">any() <span class="hljs-comment">// 扫描所有，项目中的所有接口都会被扫描到</span><br>none() <span class="hljs-comment">// 不扫描接口</span><br><span class="hljs-comment">// 通过方法上的注解扫描，如withMethodAnnotation(GetMapping.class)只扫描get请求</span><br>withMethodAnnotation(<span class="hljs-keyword">final</span> Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Annotation</span>&gt; annotation)<br><span class="hljs-comment">// 通过类上的注解扫描，如.withClassAnnotation(Controller.class)只扫描有controller注解的类中的接口</span><br>withClassAnnotation(<span class="hljs-keyword">final</span> Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Annotation</span>&gt; annotation)<br>basePackage(<span class="hljs-keyword">final</span> String basePackage) <span class="hljs-comment">// 根据包路径扫描接口</span><br></code></pre></td></tr></table></figure><p>2、重启项目测试，由于我们配置根据包的路径扫描接口，所以我们只能看到一个类</p><p>3、除了通过包路径配置扫描接口外，还可以通过配置其他方式扫描接口，这里注释一下所有的配置方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">any() <span class="hljs-comment">// 扫描所有，项目中的所有接口都会被扫描到</span><br>none() <span class="hljs-comment">// 不扫描接口</span><br><span class="hljs-comment">// 通过方法上的注解扫描，如withMethodAnnotation(GetMapping.class)只扫描get请求</span><br>withMethodAnnotation(<span class="hljs-keyword">final</span> Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Annotation</span>&gt; annotation)<br><span class="hljs-comment">// 通过类上的注解扫描，如.withClassAnnotation(Controller.class)只扫描有controller注解的类中的接口</span><br>withClassAnnotation(<span class="hljs-keyword">final</span> Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Annotation</span>&gt; annotation)<br>basePackage(<span class="hljs-keyword">final</span> String basePackage) <span class="hljs-comment">// 根据包路径扫描接口</span><br></code></pre></td></tr></table></figure><p>4、除此之外，我们还可以配置接口扫描过滤：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">docket</span><span class="hljs-params">()</span> &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>      .apiInfo(apiInfo())<br>      .select()<span class="hljs-comment">// 通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span><br>      .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.kuang.swagger.controller&quot;</span>))<br>       <span class="hljs-comment">// 配置如何通过path过滤,即这里只扫描请求以/kuang开头的接口</span><br>      .paths(PathSelectors.ant(<span class="hljs-string">&quot;/kuang/**&quot;</span>))<br>      .build();<br>&#125;<br></code></pre></td></tr></table></figure><p>5、这里的可选值还有</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">any() <span class="hljs-comment">// 任何请求都扫描</span><br>none() <span class="hljs-comment">// 任何请求都不扫描</span><br>regex(<span class="hljs-keyword">final</span> String pathRegex) <span class="hljs-comment">// 通过正则表达式控制</span><br>ant(<span class="hljs-keyword">final</span> String antPattern) <span class="hljs-comment">// 通过ant()控制</span><br></code></pre></td></tr></table></figure><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/39f55a2246beb94dc6d2e9e49e87d09e.png" alt="img"></p><h3 id="14-5、配置Swagger开关"><a href="#14-5、配置Swagger开关" class="headerlink" title="14.5、配置Swagger开关"></a>14.5、配置Swagger开关</h3><p>1、通过enable()方法配置是否启用swagger，如果是false，swagger将不能在浏览器中访问了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">docket</span><span class="hljs-params">()</span> &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>      .apiInfo(apiInfo())<br>      .enable(<span class="hljs-literal">false</span>) <span class="hljs-comment">//配置是否启用Swagger，如果是false，在浏览器将无法访问</span><br>      .select()<span class="hljs-comment">// 通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span><br>      .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.kuang.swagger.controller&quot;</span>))<br>       <span class="hljs-comment">// 配置如何通过path过滤,即这里只扫描请求以/kuang开头的接口</span><br>      .paths(PathSelectors.ant(<span class="hljs-string">&quot;/kuang/**&quot;</span>))<br>      .build();<br>&#125;<br></code></pre></td></tr></table></figure><p>2、如何动态配置当项目处于test、dev环境时显示swagger，处于prod时不显示？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">docket</span><span class="hljs-params">(Environment environment)</span> &#123;<br>   <span class="hljs-comment">// 设置要显示swagger的环境</span><br>   <span class="hljs-type">Profiles</span> <span class="hljs-variable">of</span> <span class="hljs-operator">=</span> Profiles.of(<span class="hljs-string">&quot;dev&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>);<br>   <span class="hljs-comment">// 判断当前是否处于该环境</span><br>   <span class="hljs-comment">// 通过 enable() 接收此参数判断是否要显示</span><br>   <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> environment.acceptsProfiles(of);<br>   <br>   <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>      .apiInfo(apiInfo())<br>      .enable(b) <span class="hljs-comment">//配置是否启用Swagger，如果是false，在浏览器将无法访问</span><br>      .select()<span class="hljs-comment">// 通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span><br>      .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.kuang.swagger.controller&quot;</span>))<br>       <span class="hljs-comment">// 配置如何通过path过滤,即这里只扫描请求以/kuang开头的接口</span><br>      .paths(PathSelectors.ant(<span class="hljs-string">&quot;/kuang/**&quot;</span>))<br>      .build();<br>&#125;<br></code></pre></td></tr></table></figure><p>3、可以在项目中增加一个dev的配置文件查看效果！</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5bb0ad6b2e6f27d8b688068459fb9da2.png" alt="img"></p><h3 id="14-6、配置API分组"><a href="#14-6、配置API分组" class="headerlink" title="14.6、配置API分组"></a>14.6、配置API分组</h3><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6b9a92dfc15a16f8febaf5013fba7d0b.png" alt="img"></p><p>1、如果没有配置分组，默认是default。通过groupName()方法即可配置分组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">docket</span><span class="hljs-params">(Environment environment)</span> &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2).apiInfo(apiInfo())<br>      .groupName(<span class="hljs-string">&quot;hello&quot;</span>) <span class="hljs-comment">// 配置分组</span><br>       <span class="hljs-comment">// 省略配置....</span><br>&#125;<br></code></pre></td></tr></table></figure><p>2、重启项目查看分组</p><p>3、如何配置多个分组？配置多个分组只需要配置多个docket即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">docket1</span><span class="hljs-params">()</span>&#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2).groupName(<span class="hljs-string">&quot;group1&quot;</span>);<br>&#125;<br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">docket2</span><span class="hljs-params">()</span>&#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2).groupName(<span class="hljs-string">&quot;group2&quot;</span>);<br>&#125;<br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">docket3</span><span class="hljs-params">()</span>&#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2).groupName(<span class="hljs-string">&quot;group3&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>4、重启项目查看即可</p><h3 id="14-7、实体配置"><a href="#14-7、实体配置" class="headerlink" title="14.7、实体配置"></a>14.7、实体配置</h3><p>1、新建一个实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiModel(&quot;用户实体&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>   <span class="hljs-meta">@ApiModelProperty(&quot;用户名&quot;)</span><br>   <span class="hljs-keyword">public</span> String username;<br>   <span class="hljs-meta">@ApiModelProperty(&quot;密码&quot;)</span><br>   <span class="hljs-keyword">public</span> String password;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、只要这个实体在<strong>请求接口</strong>的返回值上（即使是泛型），都能映射到实体项中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/getUser&quot;)</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUser</span><span class="hljs-params">()</span>&#123;   <br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>3、重启查看测试</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1530a7da75249b088f3cbf72832f5ca6.png" alt="img"></p><p>注：并不是因为@ApiModel这个注解让实体显示在这里了，而是只要出现在接口方法的返回值上的实体都会显示在这里，而@ApiModel和@ApiModelProperty这两个注解只是为实体添加注释的。</p><p>@ApiModel为类添加注释</p><p>@ApiModelProperty为类属性添加注释</p><h3 id="14-8、常用注解"><a href="#14-8、常用注解" class="headerlink" title="14.8、常用注解"></a>14.8、常用注解</h3><p>Swagger的所有注解定义在io.swagger.annotations包下</p><p>下面列一些经常用到的，未列举出来的可以另行查阅说明：</p><table><thead><tr><th>Swagger注解</th><th>简单说明</th></tr></thead><tbody><tr><td>@Api(tags &#x3D; “xxx模块说明”)</td><td>作用在模块类上</td></tr><tr><td>@ApiOperation(“xxx接口说明”)</td><td>作用在接口方法上</td></tr><tr><td>@ApiModel(“xxxPOJO说明”)</td><td>作用在模型类上：如VO、BO</td></tr><tr><td>@ApiModelProperty(value &#x3D; “xxx属性说明”,hidden &#x3D; true)</td><td>作用在类方法和属性上，hidden设置为true可以隐藏该属性</td></tr><tr><td>@ApiParam(“xxx参数说明”)</td><td>作用在参数、方法和字段上，类似@ApiModelProperty</td></tr></tbody></table><p>我们也可以给请求的接口配置一些注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(&quot;狂神的接口&quot;)</span><br><span class="hljs-meta">@PostMapping(&quot;/kuang&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">kuang</span><span class="hljs-params">(<span class="hljs-meta">@ApiParam(&quot;这个名字会被返回&quot;)</span>String username)</span>&#123;<br>   <span class="hljs-keyword">return</span> username;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样的话，可以给一些比较难理解的属性或者接口，增加一些配置信息，让人更容易阅读！</p><p>相较于传统的Postman或Curl方式测试接口，使用swagger简直就是傻瓜式操作，不需要额外说明文档(写得好本身就是文档)而且更不容易出错，只需要录入数据然后点击Execute，如果再配合自动化框架，可以说基本就不需要人为操作了。</p><p>Swagger是个优秀的工具，现在国内已经有很多的中小型互联网公司都在使用它，相较于传统的要先出Word接口文档再测试的方式，显然这样也更符合现在的快速迭代开发行情。当然了，提醒下大家在正式环境要记得关闭Swagger，一来出于安全考虑二来也可以节省运行时内存。</p><h3 id="14-9、拓展：其他皮肤"><a href="#14-9、拓展：其他皮肤" class="headerlink" title="14.9、拓展：其他皮肤"></a>14.9、拓展：其他皮肤</h3><p>我们可以导入不同的包实现不同的皮肤定义：</p><p>1、默认的 <strong>访问 <a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4b85f27d345e0721b30c515e44f35315.png" alt="img"></p><p>2、bootstrap-ui <strong>访问 <a href="http://localhost:8080/doc.html">http://localhost:8080/doc.html</a></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 引入swagger-bootstrap-ui包 /doc.html--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.xiaoymin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>swagger-bootstrap-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/53ed7462db0918663a9e373483cf6a68.png" alt="img"></p><p>3、Layui-ui <strong>访问 <a href="http://localhost:8080/docs.html">http://localhost:8080/docs.html</a></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 引入swagger-ui-layer包 /docs.html--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.caspar-chen<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>swagger-ui-layer<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4897fad155b2390212f59795d85ec647.png" alt="img"></p><p>4、mg-ui <strong>访问 <a href="http://localhost:8080/document.html">http://localhost:8080/document.html</a></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 引入swagger-ui-layer包 /document.html--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zyplayer<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>swagger-mg-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/f86965902655c7f439b21b450dd2efee.png" alt="img"></p><h2 id="15、异步、定时、邮件任务"><a href="#15、异步、定时、邮件任务" class="headerlink" title="15、异步、定时、邮件任务"></a>15、异步、定时、邮件任务</h2><p>前言</p><blockquote><p>在我们的工作中，常常会用到异步处理任务，比如我们在网站上发送邮件，后台会去发送邮件，此时前台会造成响应不动，直到邮件发送完毕，响应才会成功，所以我们一般会采用多线程的方式去处理这些任务。还有一些定时任务，比如需要在每天凌晨的时候，分析一次前一天的日志信息。还有就是邮件的发送，微信的前身也是邮件服务呢？这些东西都是怎么实现的呢？其实SpringBoot都给我们提供了对应的支持，我们上手使用十分的简单，只需要开启一些注解支持，配置一些配置文件即可！那我们来看看吧~</p></blockquote><h3 id="15-1、异步任务"><a href="#15-1、异步任务" class="headerlink" title="15.1、异步任务"></a>15.1、异步任务</h3><p>1、创建一个service包</p><p>2、创建一个类AsyncService</p><p>异步处理还是非常常用的，比如我们在网站上发送邮件，后台会去发送邮件，此时前台会造成响应不动，直到邮件发送完毕，响应才会成功，所以我们一般会采用多线程的方式去处理这些任务。</p><p>编写方法，假装正在处理数据，使用线程设置一些延时，模拟同步等待的情况；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AsyncService</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>           Thread.sleep(<span class="hljs-number">3000</span>);<br>      &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>           e.printStackTrace();<br>      &#125;<br>       System.out.println(<span class="hljs-string">&quot;业务进行中....&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、编写controller包</p><p>4、编写AsyncController类</p><p>我们去写一个Controller测试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AsyncController</span> &#123;<br><br>   <span class="hljs-meta">@Autowired</span><br>   AsyncService asyncService;<br><br>   <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>       asyncService.hello();<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>5、访问<a href="http://localhost:8080/hello%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%EF%BC%8C3%E7%A7%92%E5%90%8E%E5%87%BA%E7%8E%B0success%EF%BC%8C%E8%BF%99%E6%98%AF%E5%90%8C%E6%AD%A5%E7%AD%89%E5%BE%85%E7%9A%84%E6%83%85%E5%86%B5%E3%80%82">http://localhost:8080/hello进行测试，3秒后出现success，这是同步等待的情况。</a></p><p>问题：我们如果想让用户直接得到消息，就在后台使用多线程的方式进行处理即可，但是每次都需要自己手动去编写多线程的实现的话，太麻烦了，我们只需要用一个简单的办法，在我们的方法上加一个简单的注解即可，如下：</p><p>6、给hello方法添加@Async注解；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//告诉Spring这是一个异步方法</span><br><span class="hljs-meta">@Async</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>   <span class="hljs-keyword">try</span> &#123;<br>       Thread.sleep(<span class="hljs-number">3000</span>);<br>  &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>       e.printStackTrace();<br>  &#125;<br>   System.out.println(<span class="hljs-string">&quot;业务进行中....&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>SpringBoot就会自己开一个线程池，进行调用！但是要让这个注解生效，我们还需要在主程序上添加一个注解@EnableAsync ，开启异步注解功能；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableAsync</span> <span class="hljs-comment">//开启异步注解功能</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootTaskApplication</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>       SpringApplication.run(SpringbootTaskApplication.class, args);<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>7、重启测试，网页瞬间响应，后台代码依旧执行！</p><h3 id="15-2、定时任务"><a href="#15-2、定时任务" class="headerlink" title="15.2、定时任务"></a>15.2、定时任务</h3><p>项目开发中经常需要执行一些定时任务，比如需要在每天凌晨的时候，分析一次前一天的日志信息，Spring为我们提供了异步执行任务调度的方式，提供了两个接口。</p><ul><li>TaskExecutor接口</li><li>TaskScheduler接口</li></ul><p>两个注解：</p><ul><li>@EnableScheduling</li><li>@Scheduled</li></ul><p><strong>cron表达式：</strong></p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/e566e581e6a3489faa70938bedd73771.png" alt="img"></p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5495e2b098f25257879acf055fc74722.png" alt="img"></p><p><strong>测试步骤：</strong></p><p>1、创建一个ScheduledService</p><p>我们里面存在一个hello方法，他需要定时执行，怎么处理呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScheduledService</span> &#123;<br>   <br>   <span class="hljs-comment">//秒   分   时     日   月   周几</span><br>   <span class="hljs-comment">//0 * * * * MON-FRI</span><br>   <span class="hljs-comment">//注意cron表达式的用法；</span><br>   <span class="hljs-meta">@Scheduled(cron = &quot;0 * * * * 0-7&quot;)</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;hello.....&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、这里写完定时任务之后，我们需要在主程序上增加@EnableScheduling 开启定时任务功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableAsync</span> <span class="hljs-comment">//开启异步注解功能</span><br><span class="hljs-meta">@EnableScheduling</span> <span class="hljs-comment">//开启基于注解的定时任务</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootTaskApplication</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>       SpringApplication.run(SpringbootTaskApplication.class, args);<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>3、我们来详细了解下cron表达式；</p><p><a href="http://www.bejson.com/othertools/cron/">http://www.bejson.com/othertools/cron/</a></p><p>4、常用的表达式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs markdown"> (1）0/2 * * * * ?   表示每2秒 执行任务<br>（1）0 0/2 * * * ?   表示每2分钟 执行任务<br>（1）0 0 2 1 * ?   表示在每月的1日的凌晨2点调整任务<br>（2）0 15 10 ? * MON-FRI   表示周一到周五每天上午10:15执行作业<br>（3）0 15 10 ? 6L 2002-2006   表示2002-2006年的每个月的最后一个星期五上午10:15执行作<br>（4）0 0 10,14,16 * * ?   每天上午10点，下午2点，4点<br>（5）0 0/30 9-17 * * ?   朝九晚五工作时间内每半小时<br>（6）0 0 12 ? * WED   表示每个星期三中午12点<br>（7）0 0 12 * * ?   每天中午12点触发<br>（8）0 15 10 ? * *   每天上午10:15触发<br>（9）0 15 10 * * ?     每天上午10:15触发<br>（10）0 15 10 * * ?   每天上午10:15触发<br>（11）0 15 10 * * ? 2005   2005年的每天上午10:15触发<br>（12）0 * 14 * * ?     在每天下午2点到下午2:59期间的每1分钟触发<br>（13）0 0/5 14 * * ?   在每天下午2点到下午2:55期间的每5分钟触发<br>（14）0 0/5 14,18 * * ?     在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发<br>（15）0 0-5 14 * * ?   在每天下午2点到下午2:05期间的每1分钟触发<br>（16）0 10,44 14 ? 3 WED   每年三月的星期三的下午2:10和2:44触发<br>（17）0 15 10 ? * MON-FRI   周一至周五的上午10:15触发<br>（18）0 15 10 15 * ?   每月15日上午10:15触发<br>（19）0 15 10 L * ?   每月最后一日的上午10:15触发<br>（20）0 15 10 ? * 6L   每月的最后一个星期五上午10:15触发<br>（21）0 15 10 ? * 6L 2002-2005   2002年至2005年的每月的最后一个星期五上午10:15触发<br>（22）0 15 10 ? * 6#3   每月的第三个星期五上午10:15触发<br></code></pre></td></tr></table></figure><h3 id="15-3、邮件任务"><a href="#15-3、邮件任务" class="headerlink" title="15.3、邮件任务"></a>15.3、邮件任务</h3><p>邮件发送，在我们的日常开发中，也非常的多，Springboot也帮我们做了支持</p><ul><li>邮件发送需要引入spring-boot-start-mail</li><li>SpringBoot 自动配置MailSenderAutoConfiguration</li><li>定义MailProperties内容，配置在application.yml中</li><li>自动装配JavaMailSender</li><li>测试邮件发送</li></ul><p><strong>测试：</strong></p><p>1、引入pom依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;&lt;dependency&gt;<br>   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>   &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>看它引入的依赖，可以看到 jakarta.mail</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>   &lt;groupId&gt;com.sun.mail&lt;/groupId&gt;<br>   &lt;artifactId&gt;jakarta.mail&lt;/artifactId&gt;<br>   &lt;version&gt;<span class="hljs-number">1.6</span><span class="hljs-number">.4</span>&lt;/version&gt;<br>   &lt;scope&gt;compile&lt;/scope&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>2、查看自动配置类：MailSenderAutoConfiguration</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3970e48be7b190f176fdf6f26faabc51.png" alt="img"></p><p>这个类中存在bean，JavaMailSenderImpl</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/04e279455428bdabe2f613c6988b4c0e.png" alt="img"></p><p>然后我们去看下配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(</span><br><span class="hljs-meta">   prefix = &quot;spring.mail&quot;</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MailProperties</span> &#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Charset DEFAULT_CHARSET;<br>   <span class="hljs-keyword">private</span> String host;<br>   <span class="hljs-keyword">private</span> Integer port;<br>   <span class="hljs-keyword">private</span> String username;<br>   <span class="hljs-keyword">private</span> String password;<br>   <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">protocol</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;smtp&quot;</span>;<br>   <span class="hljs-keyword">private</span> Charset defaultEncoding;<br>   <span class="hljs-keyword">private</span> Map&lt;String, String&gt; properties;<br>   <span class="hljs-keyword">private</span> String jndiName;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、配置文件：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">spring.mail.<span class="hljs-attribute">username</span>=135@qq.comspring.mail.password=你的qq授权码<br>spring.mail.<span class="hljs-attribute">host</span>=smtp.qq.com# qq需要配置sslspring.mail.properties.mail.smtp.ssl.<span class="hljs-attribute">enable</span>=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>获取授权码：在QQ邮箱中的设置-&gt;账户-&gt;开启pop3和smtp服务</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/074d0d85d9833f00f8cd4b3e08b0a544.png" alt="img"></p><p>4、Spring单元测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>JavaMailSenderImpl mailSender;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br>   <span class="hljs-comment">//邮件设置1：一个简单的邮件</span><br>   <span class="hljs-type">SimpleMailMessage</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleMailMessage</span>();<br>   message.setSubject(<span class="hljs-string">&quot;通知-明天来狂神这听课&quot;</span>);<br>   message.setText(<span class="hljs-string">&quot;今晚7:30开会&quot;</span>);<br><br>   message.setTo(<span class="hljs-string">&quot;24736743@qq.com&quot;</span>);<br>   message.setFrom(<span class="hljs-string">&quot;24736743@qq.com&quot;</span>);<br>   mailSender.send(message);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> MessagingException &#123;<br>   <span class="hljs-comment">//邮件设置2：一个复杂的邮件</span><br>   <span class="hljs-type">MimeMessage</span> <span class="hljs-variable">mimeMessage</span> <span class="hljs-operator">=</span> mailSender.createMimeMessage();<br>   <span class="hljs-type">MimeMessageHelper</span> <span class="hljs-variable">helper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MimeMessageHelper</span>(mimeMessage, <span class="hljs-literal">true</span>);<br><br>   helper.setSubject(<span class="hljs-string">&quot;通知-明天来狂神这听课&quot;</span>);<br>   helper.setText(<span class="hljs-string">&quot;&lt;b style=&#x27;color:red&#x27;&gt;今天 7:30来开会&lt;/b&gt;&quot;</span>,<span class="hljs-literal">true</span>);<br><br>   <span class="hljs-comment">//发送附件</span><br>   helper.addAttachment(<span class="hljs-string">&quot;1.jpg&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;&quot;</span>));<br>   helper.addAttachment(<span class="hljs-string">&quot;2.jpg&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;&quot;</span>));<br><br>   helper.setTo(<span class="hljs-string">&quot;24736743@qq.com&quot;</span>);<br>   helper.setFrom(<span class="hljs-string">&quot;24736743@qq.com&quot;</span>);<br><br>   mailSender.send(mimeMessage);<br>&#125;<br></code></pre></td></tr></table></figure><p>查看邮箱，邮件接收成功！</p><p>我们只需要使用Thymeleaf进行前后端结合即可开发自己网站邮件收发功能了！</p><h2 id="16、富文本编辑器"><a href="#16、富文本编辑器" class="headerlink" title="16、富文本编辑器"></a>16、富文本编辑器</h2><h3 id="16-1、简介"><a href="#16-1、简介" class="headerlink" title="16.1、简介"></a>16.1、简介</h3><p>思考：我们平时在博客园，或者CSDN等平台进行写作的时候，有同学思考过他们的编辑器是怎么实现的吗？</p><p>在博客园后台的选项设置中，可以看到一个文本编辑器的选项：</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/e977ff2dcc75e75bffc616b40ad3c28c.png" alt="img"></p><p>其实这个就是富文本编辑器，市面上有许多非常成熟的富文本编辑器，比如：</p><ul><li><strong>Editor.md</strong>——功能非常丰富的编辑器，左端编辑，右端预览，非常方便，完全免费</li><li><ul><li>官网：<a href="https://pandao.github.io/editor.md/">https://pandao.github.io/editor.md/</a></li></ul></li><li><strong>wangEditor</strong>——基于javascript和css开发的 Web富文本编辑器， 轻量、简洁、界面美观、易用、开源免费。</li><li><ul><li>官网：<a href="http://www.wangeditor.com/">http://www.wangeditor.com/</a></li></ul></li><li><strong>TinyMCE</strong>——TinyMCE是一个轻量级的基于浏览器的所见即所得编辑器，由JavaScript写成。它对IE6+和Firefox1.5+都有着非常良好的支持。功能齐全，界面美观，就是文档是英文的，对开发人员英文水平有一定要求。</li><li><ul><li>官网：<a href="https://www.tiny.cloud/docs/demo/full-featured/">https://www.tiny.cloud/docs/demo/full-featured/</a></li><li>博客园</li></ul></li><li><strong>百度ueditor</strong>——UEditor是由百度web前端研发部开发所见即所得富文本web编辑器，具有轻量，功能齐全，可定制，注重用户体验等特点，开源基于MIT协议，允许自由使用和修改代码，缺点是已经没有更新了</li><li><ul><li>官网：<a href="https://ueditor.baidu.com/website/onlinedemo.html">https://ueditor.baidu.com/website/onlinedemo.html</a></li></ul></li><li><strong>kindeditor</strong>——界面经典。</li><li><ul><li>官网：<a href="http://kindeditor.net/demo.php">http://kindeditor.net/demo.php</a></li></ul></li><li><strong>Textbox</strong>——Textbox是一款极简但功能强大的在线文本编辑器，支持桌面设备和移动设备。主要功能包含内置的图像处理和存储、文件拖放、拼写检查和自动更正。此外，该工具还实现了屏幕阅读器等辅助技术，并符合WAI-ARIA可访问性标准。</li><li><ul><li>官网：<a href="https://textbox.io/">https://textbox.io/</a></li></ul></li><li><strong>CKEditor</strong>——国外的，界面美观。</li><li><ul><li>官网：<a href="https://ckeditor.com/ckeditor-5/demo/">https://ckeditor.com/ckeditor-5/demo/</a></li></ul></li><li><strong>quill</strong>——功能强大，还可以编辑公式等</li><li><ul><li>官网：<a href="https://quilljs.com/">https://quilljs.com/</a></li></ul></li><li><strong>simditor</strong>——界面美观，功能较全。</li><li><ul><li>官网：<a href="https://simditor.tower.im/">https://simditor.tower.im/</a></li></ul></li><li><strong>summernote</strong>——UI好看，精美</li><li><ul><li>官网：<a href="https://summernote.org/">https://summernote.org/</a></li></ul></li><li><strong>jodit</strong>——功能齐全</li><li><ul><li>官网：<a href="https://xdsoft.net/jodit/">https://xdsoft.net/jodit/</a></li></ul></li><li><strong>froala Editor</strong>——界面非常好看，功能非常强大，非常好用（非免费）</li><li><ul><li>官网：<a href="https://www.froala.com/wysiwyg-editor">https://www.froala.com/wysiwyg-editor</a></li></ul></li></ul><p>总之，目前可用的富文本编辑器有很多…这只是其中的一部分</p><h3 id="16-2、Editor-md"><a href="#16-2、Editor-md" class="headerlink" title="16.2、Editor.md"></a>16.2、Editor.md</h3><p>我这里使用的就是Editor.md，作为一个资深码农，Mardown必然是我们程序猿最喜欢的格式，看下面，就爱上了！</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5fdf621cbc708042c4499e0c0d0135bd.png" alt="img"></p><p>我们可以在官网下载它：<a href="https://pandao.github.io/editor.md/">https://pandao.github.io/editor.md/</a> ， 得到它的压缩包！</p><p>解压以后，在examples目录下面，可以看到他的很多案例使用！学习，其实就是看人家怎么写的，然后进行模仿就好了！</p><p>我们可以将整个解压的文件倒入我们的项目，将一些无用的测试和案例删掉即可！</p><h3 id="16-3、基础工程搭建"><a href="#16-3、基础工程搭建" class="headerlink" title="16.3、基础工程搭建"></a>16.3、基础工程搭建</h3><blockquote><p>数据库设计</p></blockquote><p>article：文章表</p><table><thead><tr><th>字段</th><th></th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>int</td><td>文章的唯一ID</td></tr><tr><td>author</td><td>varchar</td><td>作者</td></tr><tr><td>title</td><td>varchar</td><td>标题</td></tr><tr><td>content</td><td>longtext</td><td>文章的内容</td></tr></tbody></table><p>建表SQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE TABLE</span> `article` (<br>`id` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;int文章的唯一ID&#x27;</span>,<br>`author` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT NULL</span> COMMENT <span class="hljs-string">&#x27;作者&#x27;</span>,<br>`title` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT NULL</span> COMMENT <span class="hljs-string">&#x27;标题&#x27;</span>,<br>`content` longtext <span class="hljs-keyword">NOT NULL</span> COMMENT <span class="hljs-string">&#x27;文章的内容&#x27;</span>,<br><span class="hljs-keyword">PRIMARY KEY</span> (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8<br></code></pre></td></tr></table></figure><blockquote><p>基础项目搭建</p></blockquote><p>1、建一个SpringBoot项目配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br><span class="hljs-attr">datasource:</span><br>  <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>  <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>  <span class="hljs-comment">#?serverTimezone=UTC解决时区的报错</span><br>  <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/springboot?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span><br>  <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-string">&lt;resources&gt;</span><br>   <span class="hljs-string">&lt;resource&gt;</span><br>       <span class="hljs-string">&lt;directory&gt;src/main/java&lt;/directory&gt;</span><br>       <span class="hljs-string">&lt;includes&gt;</span><br>           <span class="hljs-string">&lt;include&gt;**/*.xml&lt;/include&gt;</span><br>       <span class="hljs-string">&lt;/includes&gt;</span><br>       <span class="hljs-string">&lt;filtering&gt;true&lt;/filtering&gt;</span><br>   <span class="hljs-string">&lt;/resource&gt;</span><br><span class="hljs-string">&lt;/resources&gt;</span><br></code></pre></td></tr></table></figure><p>2、实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//文章类</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Article</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>   <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id; <span class="hljs-comment">//文章的唯一ID</span><br>   <span class="hljs-keyword">private</span> String author; <span class="hljs-comment">//作者名</span><br>   <span class="hljs-keyword">private</span> String title; <span class="hljs-comment">//标题</span><br>   <span class="hljs-keyword">private</span> String content; <span class="hljs-comment">//文章的内容</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>3、mapper接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ArticleMapper</span> &#123;<br>   <span class="hljs-comment">//查询所有的文章</span><br>   List&lt;Article&gt; <span class="hljs-title function_">queryArticles</span><span class="hljs-params">()</span>;<br><br>   <span class="hljs-comment">//新增一个文章</span><br>   <span class="hljs-type">int</span> <span class="hljs-title function_">addArticle</span><span class="hljs-params">(Article article)</span>;<br><br>   <span class="hljs-comment">//根据文章id查询文章</span><br>   Article <span class="hljs-title function_">getArticleById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br><br>   <span class="hljs-comment">//根据文章id删除文章</span><br>   <span class="hljs-type">int</span> <span class="hljs-title function_">deleteArticleById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>既然已经提供了 myBatis 的映射配置文件，自然要告诉 spring boot 这些文件的位置</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">mybatis:</span><br><span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:com/kuang/mapper/*.xml</span><br><span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.kuang.pojo</span><br></code></pre></td></tr></table></figure><p>编写一个Controller测试下，是否ok；</p><h3 id="16-4、文章编辑整合（重点）"><a href="#16-4、文章编辑整合（重点）" class="headerlink" title="16.4、文章编辑整合（重点）"></a>16.4、文章编辑整合（重点）</h3><p>1、导入 editor.md 资源 ，删除多余文件</p><p>2、编辑文章页面 editor.html、需要引入 jQuery；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;x-admin-sm&quot;</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>秦疆&#x27;Blog<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;renderer&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;webkit&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge,chrome=1&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width,user-scalable=yes, minimum-scale=0.4, initial-scale=0.8,target-densitydpi=low-dpi&quot;</span> /&gt;</span><br>   <span class="hljs-comment">&lt;!--Editor.md--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/editormd/css/editormd.css&#125;&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;shortcut icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://pandao.github.io/editor.md/favicon.ico&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/x-icon&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-fluid&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-row layui-col-space15&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-col-md12&quot;</span>&gt;</span><br>           <span class="hljs-comment">&lt;!--博客表单--&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mdEditorForm&quot;</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>                  标题：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>                  作者：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;author&quot;</span>&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;article-content&quot;</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;content&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;content&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:none;&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--editormd--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/editormd/lib/jquery.min.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/editormd/editormd.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">   <span class="hljs-keyword">var</span> testEditor;</span><br><span class="language-javascript"></span><br><span class="language-javascript">   <span class="hljs-comment">//window.onload = function()&#123; &#125;</span></span><br><span class="language-javascript">   $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">       testEditor = <span class="hljs-title function_">editormd</span>(<span class="hljs-string">&quot;article-content&quot;</span>, &#123;</span><br><span class="language-javascript">           width : <span class="hljs-string">&quot;95%&quot;</span>,</span><br><span class="language-javascript">           height : <span class="hljs-number">400</span>,</span><br><span class="language-javascript">           syncScrolling : <span class="hljs-string">&quot;single&quot;</span>,</span><br><span class="language-javascript">           path : <span class="hljs-string">&quot;../editormd/lib/&quot;</span>,</span><br><span class="language-javascript">           saveHTMLToTextarea : <span class="hljs-literal">true</span>,    <span class="hljs-comment">// 保存 HTML 到 Textarea</span></span><br><span class="language-javascript">           <span class="hljs-attr">emoji</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">           <span class="hljs-attr">theme</span>: <span class="hljs-string">&quot;dark&quot;</span>,<span class="hljs-comment">//工具栏主题</span></span><br><span class="language-javascript">           <span class="hljs-attr">previewTheme</span>: <span class="hljs-string">&quot;dark&quot;</span>,<span class="hljs-comment">//预览主题</span></span><br><span class="language-javascript">           <span class="hljs-attr">editorTheme</span>: <span class="hljs-string">&quot;pastel-on-dark&quot;</span>,<span class="hljs-comment">//编辑主题</span></span><br><span class="language-javascript">           tex : <span class="hljs-literal">true</span>,                   <span class="hljs-comment">// 开启科学公式TeX语言支持，默认关闭</span></span><br><span class="language-javascript">           flowChart : <span class="hljs-literal">true</span>,             <span class="hljs-comment">// 开启流程图支持，默认关闭</span></span><br><span class="language-javascript">           sequenceDiagram : <span class="hljs-literal">true</span>,       <span class="hljs-comment">// 开启时序/序列图支持，默认关闭,</span></span><br><span class="language-javascript">           <span class="hljs-comment">//图片上传</span></span><br><span class="language-javascript">           imageUpload : <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">           imageFormats : [<span class="hljs-string">&quot;jpg&quot;</span>, <span class="hljs-string">&quot;jpeg&quot;</span>, <span class="hljs-string">&quot;gif&quot;</span>, <span class="hljs-string">&quot;png&quot;</span>, <span class="hljs-string">&quot;bmp&quot;</span>, <span class="hljs-string">&quot;webp&quot;</span>],</span><br><span class="language-javascript">           imageUploadURL : <span class="hljs-string">&quot;/article/file/upload&quot;</span>,</span><br><span class="language-javascript">           onload : <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">               <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onload&#x27;</span>, <span class="hljs-variable language_">this</span>);</span><br><span class="language-javascript">          &#125;,</span><br><span class="language-javascript">           <span class="hljs-comment">/*指定需要显示的功能按钮*/</span></span><br><span class="language-javascript">           toolbarIcons : <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">               <span class="hljs-keyword">return</span> [<span class="hljs-string">&quot;undo&quot;</span>,<span class="hljs-string">&quot;redo&quot;</span>,<span class="hljs-string">&quot;|&quot;</span>,</span><br><span class="language-javascript">                   <span class="hljs-string">&quot;bold&quot;</span>,<span class="hljs-string">&quot;del&quot;</span>,<span class="hljs-string">&quot;italic&quot;</span>,<span class="hljs-string">&quot;quote&quot;</span>,<span class="hljs-string">&quot;ucwords&quot;</span>,<span class="hljs-string">&quot;uppercase&quot;</span>,<span class="hljs-string">&quot;lowercase&quot;</span>,<span class="hljs-string">&quot;|&quot;</span>,</span><br><span class="language-javascript">                   <span class="hljs-string">&quot;h1&quot;</span>,<span class="hljs-string">&quot;h2&quot;</span>,<span class="hljs-string">&quot;h3&quot;</span>,<span class="hljs-string">&quot;h4&quot;</span>,<span class="hljs-string">&quot;h5&quot;</span>,<span class="hljs-string">&quot;h6&quot;</span>,<span class="hljs-string">&quot;|&quot;</span>,</span><br><span class="language-javascript">                   <span class="hljs-string">&quot;list-ul&quot;</span>,<span class="hljs-string">&quot;list-ol&quot;</span>,<span class="hljs-string">&quot;hr&quot;</span>,<span class="hljs-string">&quot;|&quot;</span>,</span><br><span class="language-javascript">                   <span class="hljs-string">&quot;link&quot;</span>,<span class="hljs-string">&quot;reference-link&quot;</span>,<span class="hljs-string">&quot;image&quot;</span>,<span class="hljs-string">&quot;code&quot;</span>,<span class="hljs-string">&quot;preformatted-text&quot;</span>,</span><br><span class="language-javascript">                   <span class="hljs-string">&quot;code-block&quot;</span>,<span class="hljs-string">&quot;table&quot;</span>,<span class="hljs-string">&quot;datetime&quot;</span>,<span class="hljs-string">&quot;emoji&quot;</span>,<span class="hljs-string">&quot;html-entities&quot;</span>,<span class="hljs-string">&quot;pagebreak&quot;</span>,<span class="hljs-string">&quot;|&quot;</span>,</span><br><span class="language-javascript">                   <span class="hljs-string">&quot;goto-line&quot;</span>,<span class="hljs-string">&quot;watch&quot;</span>,<span class="hljs-string">&quot;preview&quot;</span>,<span class="hljs-string">&quot;fullscreen&quot;</span>,<span class="hljs-string">&quot;clear&quot;</span>,<span class="hljs-string">&quot;search&quot;</span>,<span class="hljs-string">&quot;|&quot;</span>,</span><br><span class="language-javascript">                   <span class="hljs-string">&quot;help&quot;</span>,<span class="hljs-string">&quot;info&quot;</span>,<span class="hljs-string">&quot;releaseIcon&quot;</span>, <span class="hljs-string">&quot;index&quot;</span>]</span><br><span class="language-javascript">          &#125;,</span><br><span class="language-javascript"></span><br><span class="language-javascript">           <span class="hljs-comment">/*自定义功能按钮，下面我自定义了2个，一个是发布，一个是返回首页*/</span></span><br><span class="language-javascript">           toolbarIconTexts : &#123;</span><br><span class="language-javascript">               releaseIcon : <span class="hljs-string">&quot;&lt;span bgcolor=\&quot;gray\&quot;&gt;发布&lt;/span&gt;&quot;</span>,</span><br><span class="language-javascript">               index : <span class="hljs-string">&quot;&lt;span bgcolor=\&quot;red\&quot;&gt;返回首页&lt;/span&gt;&quot;</span>,</span><br><span class="language-javascript">          &#125;,</span><br><span class="language-javascript"></span><br><span class="language-javascript">           <span class="hljs-comment">/*给自定义按钮指定回调函数*/</span></span><br><span class="language-javascript">           <span class="hljs-attr">toolbarHandlers</span>:&#123;</span><br><span class="language-javascript">               releaseIcon : <span class="hljs-keyword">function</span>(<span class="hljs-params">cm, icon, cursor, selection</span>) &#123;</span><br><span class="language-javascript">                   <span class="hljs-comment">//表单提交</span></span><br><span class="language-javascript">                   mdEditorForm.<span class="hljs-property">method</span> = <span class="hljs-string">&quot;post&quot;</span>;</span><br><span class="language-javascript">                   mdEditorForm.<span class="hljs-property">action</span> = <span class="hljs-string">&quot;/article/addArticle&quot;</span>;<span class="hljs-comment">//提交至服务器的路径</span></span><br><span class="language-javascript">                   mdEditorForm.<span class="hljs-title function_">submit</span>();</span><br><span class="language-javascript">              &#125;,</span><br><span class="language-javascript">               index : <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                   <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = <span class="hljs-string">&#x27;/&#x27;</span>;</span><br><span class="language-javascript">              &#125;,</span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">      &#125;);</span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3、编写Controller，进行跳转，以及保存文章</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/article&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArticleController</span> &#123;<br><br>   <span class="hljs-meta">@GetMapping(&quot;/toEditor&quot;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toEditor</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;editor&quot;</span>;<br>  &#125;<br>   <br>   <span class="hljs-meta">@PostMapping(&quot;/addArticle&quot;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">addArticle</span><span class="hljs-params">(Article article)</span>&#123;<br>       articleMapper.addArticle(article);<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;editor&quot;</span>;<br>  &#125;<br>   <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>图片上传问题</p></blockquote><p>1、前端js中添加配置</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs http">//图片上传<br>imageUpload : true,<br>imageFormats : [&quot;jpg&quot;, &quot;jpeg&quot;, &quot;gif&quot;, &quot;png&quot;, &quot;bmp&quot;, &quot;webp&quot;],<br>imageUploadURL : &quot;/article/file/upload&quot;, // //这个是上传图片时的访问地址<br></code></pre></td></tr></table></figure><p>2、后端请求，接收保存这个图片, 需要导入 FastJson 的依赖！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//博客图片上传问题</span><br><span class="hljs-meta">@RequestMapping(&quot;/file/upload&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> JSONObject <span class="hljs-title function_">fileUpload</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;editormd-image-file&quot;, required = true)</span> MultipartFile file, HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>   <span class="hljs-comment">//上传路径保存设置</span><br><br>   <span class="hljs-comment">//获得SpringBoot当前项目的路径：System.getProperty(&quot;user.dir&quot;)</span><br>   <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>)+<span class="hljs-string">&quot;/upload/&quot;</span>;<br><br>   <span class="hljs-comment">//按照月份进行分类：</span><br>   <span class="hljs-type">Calendar</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br>   <span class="hljs-type">String</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> (instance.get(Calendar.MONTH) + <span class="hljs-number">1</span>)+<span class="hljs-string">&quot;月&quot;</span>;<br>   path = path+month;<br><br>   <span class="hljs-type">File</span> <span class="hljs-variable">realPath</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path);<br>   <span class="hljs-keyword">if</span> (!realPath.exists())&#123;<br>       realPath.mkdir();<br>  &#125;<br><br>   <span class="hljs-comment">//上传文件地址</span><br>   System.out.println(<span class="hljs-string">&quot;上传文件保存地址：&quot;</span>+realPath);<br><br>   <span class="hljs-comment">//解决文件名字问题：我们使用uuid;</span><br>   <span class="hljs-type">String</span> <span class="hljs-variable">filename</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ks-&quot;</span>+UUID.randomUUID().toString().replaceAll(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>   <span class="hljs-comment">//通过CommonsMultipartFile的方法直接写文件（注意这个时候）</span><br>   file.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(realPath +<span class="hljs-string">&quot;/&quot;</span>+ filename));<br><br>   <span class="hljs-comment">//给editormd进行回调</span><br>   <span class="hljs-type">JSONObject</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br>   res.put(<span class="hljs-string">&quot;url&quot;</span>,<span class="hljs-string">&quot;/upload/&quot;</span>+month+<span class="hljs-string">&quot;/&quot;</span>+ filename);<br>   res.put(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-number">1</span>);<br>   res.put(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;upload success!&quot;</span>);<br><br>   <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、解决文件回显显示的问题，设置虚拟目录映射！在我们自己拓展的MvcConfig中进行配置即可！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>   <span class="hljs-comment">// 文件保存在真实目录/upload/下，</span><br>   <span class="hljs-comment">// 访问的时候使用虚路径/upload，比如文件名为1.png，就直接/upload/1.png就ok了。</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> &#123;<br>       registry.addResourceHandler(<span class="hljs-string">&quot;/upload/**&quot;</span>)<br>          .addResourceLocations(<span class="hljs-string">&quot;file:&quot;</span>+System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>)+<span class="hljs-string">&quot;/upload/&quot;</span>);<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>表情包问题</p></blockquote><p>自己手动下载，emoji 表情包，放到图片路径下：</p><p>修改editormd.js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Emoji graphics files url path</span><br>editormd.<span class="hljs-property">emoji</span>     = &#123;<br>   path : <span class="hljs-string">&quot;../editormd/plugins/emoji-dialog/emoji/&quot;</span>,<br>   ext   : <span class="hljs-string">&quot;.png&quot;</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="16-5、文章展示"><a href="#16-5、文章展示" class="headerlink" title="16.5、文章展示"></a>16.5、文章展示</h3><p>1、Controller 中增加方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">show</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> <span class="hljs-type">int</span> id,Model model)</span>&#123;<br>   <span class="hljs-type">Article</span> <span class="hljs-variable">article</span> <span class="hljs-operator">=</span> articleMapper.getArticleById(id);<br>   model.addAttribute(<span class="hljs-string">&quot;article&quot;</span>,article);<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;article&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、编写页面 article.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">title</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;article.title&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-comment">&lt;!--文章头部信息：标题，作者，最后更新日期，导航--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin: auto 0&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;article.title&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  作者：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;float: left&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;article.author&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>   <span class="hljs-comment">&lt;!--文章主体内容--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;doc-content&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:none;&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;markdown&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;article.content&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/editormd/css/editormd.preview.css&#125;&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/editormd/lib/jquery.min.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/editormd/lib/marked.min.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/editormd/lib/prettify.min.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/editormd/lib/raphael.min.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/editormd/lib/underscore.min.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/editormd/lib/sequence-diagram.min.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/editormd/lib/flowchart.min.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/editormd/lib/jquery.flowchart.min.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/editormd/editormd.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">   <span class="hljs-keyword">var</span> testEditor;</span><br><span class="language-javascript">   $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">       testEditor = editormd.<span class="hljs-title function_">markdownToHTML</span>(<span class="hljs-string">&quot;doc-content&quot;</span>, &#123;<span class="hljs-comment">//注意：这里是上面DIV的id</span></span><br><span class="language-javascript">           <span class="hljs-attr">htmlDecode</span>: <span class="hljs-string">&quot;style,script,iframe&quot;</span>,</span><br><span class="language-javascript">           <span class="hljs-attr">emoji</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">           <span class="hljs-attr">taskList</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">           <span class="hljs-attr">tocm</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">           <span class="hljs-attr">tex</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 默认不解析</span></span><br><span class="language-javascript">           <span class="hljs-attr">flowChart</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 默认不解析</span></span><br><span class="language-javascript">           <span class="hljs-attr">sequenceDiagram</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 默认不解析</span></span><br><span class="language-javascript">           <span class="hljs-attr">codeFold</span>: <span class="hljs-literal">true</span></span><br><span class="language-javascript">      &#125;);&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>重启项目，访问进行测试！大功告成！</p><p>小结：</p><p>有了富文本编辑器，我们网站的功能就会又多一项，大家到了这里完全可以有时间写一个属于自己的博客网站了，根据所学的知识是完全没有任何问题的！</p><h2 id="17、Dubbo和Zookeeper集成"><a href="#17、Dubbo和Zookeeper集成" class="headerlink" title="17、Dubbo和Zookeeper集成"></a>17、Dubbo和Zookeeper集成</h2><p>分布式理论</p><h3 id="17-1、什么是分布式系统？"><a href="#17-1、什么是分布式系统？" class="headerlink" title="17.1、什么是分布式系统？"></a>17.1、什么是分布式系统？</h3><p>在《分布式系统原理与范型》一书中有如下定义：“分布式系统是若干独立计算机的集合，这些计算机对于用户来说就像单个相关系统”；</p><p>分布式系统是由一组通过网络进行通信、为了完成共同的任务而协调工作的计算机节点组成的系统。分布式系统的出现是为了用廉价的、普通的机器完成单个计算机无法完成的计算、存储任务。其目的是<strong>利用更多的机器，处理更多的数据</strong>。</p><p>分布式系统（distributed system）是建立在网络之上的软件系统。</p><p>首先需要明确的是，只有当单个节点的处理能力无法满足日益增长的计算、存储任务的时候，且硬件的提升（加内存、加磁盘、使用更好的CPU）高昂到得不偿失的时候，应用程序也不能进一步优化的时候，我们才需要考虑分布式系统。因为，分布式系统要解决的问题本身就是和单机系统一样的，而由于分布式系统多节点、通过网络通信的拓扑结构，会引入很多单机系统没有的问题，为了解决这些问题又会引入更多的机制、协议，带来更多的问题。。。</p><h3 id="17-2、Dubbo文档"><a href="#17-2、Dubbo文档" class="headerlink" title="17.2、Dubbo文档"></a>17.2、Dubbo文档</h3><p>随着互联网的发展，网站应用的规模不断扩大，常规的垂直应用架构已无法应对，分布式服务架构以及流动计算架构势在必行，急需<strong>一个治理系统</strong>确保架构有条不紊的演进。</p><p>在Dubbo的官网文档有这样一张图</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/34e74bedcb6e35abc29c5a0a2c382941.png" alt="img"></p><h4 id="单一应用架构"><a href="#单一应用架构" class="headerlink" title="单一应用架构"></a>单一应用架构</h4><p>当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是关键。</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/8769ea82c6fa7f5a43e20e2d0487e307.png" alt="img"></p><p>适用于小型网站，小型管理系统，将所有功能都部署到一个功能里，简单易用。</p><p><strong>缺点：</strong></p><p>1、性能扩展比较难</p><p>2、协同开发问题</p><p>3、不利于升级维护</p><h4 id="垂直应用架构"><a href="#垂直应用架构" class="headerlink" title="垂直应用架构"></a>垂直应用架构</h4><p>当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的Web框架(MVC)是关键。</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/0140e779036efe35d29a0c27c6f80f3d.png" alt="img"></p><p>通过切分业务来实现各个模块独立部署，降低了维护和部署的难度，团队各司其职更易管理，性能扩展也更方便，更有针对性。</p><p>缺点：公用模块无法重复利用，开发性的浪费</p><h4 id="分布式服务架构"><a href="#分布式服务架构" class="headerlink" title="分布式服务架构"></a>分布式服务架构</h4><p>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的**分布式服务框架(RPC)**是关键。</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6c2dc93990ff2e87f28fa370f874d32a.png" alt="img"></p><h4 id="流动计算架构"><a href="#流动计算架构" class="headerlink" title="流动计算架构"></a>流动计算架构</h4><p>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于<strong>提高机器利用率的资源调度和治理中心</strong>(SOA)[ Service Oriented Architecture]是关键。</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/afb9050f9dc8773ceff7673eb13c31c9.png" alt="img"></p><p>什么是RPC</p><p>RPC【Remote Procedure Call】是指远程过程调用，是一种进程间通信方式，他是一种技术的思想，而不是规范。它允许程序调用另一个地址空间（通常是共享网络的另一台机器上）的过程或函数，而不用程序员显式编码这个远程调用的细节。即程序员无论是调用本地的还是远程的函数，本质上编写的调用代码基本相同。</p><p>也就是说两台服务器A，B，一个应用部署在A服务器上，想要调用B服务器上应用提供的函数&#x2F;方法，由于不在一个内存空间，不能直接调用，需要通过网络来表达调用的语义和传达调用的数据。为什么要用RPC呢？就是无法在一个进程内，甚至一个计算机内通过本地调用的方式完成的需求，比如不同的系统间的通讯，甚至不同的组织间的通讯，由于计算能力需要横向扩展，需要在多台机器组成的集群上部署应用。RPC就是要像调用本地的函数一样去调远程函数；</p><p>推荐阅读文章：<a href="https://www.jianshu.com/p/2accc2840a1b">https://www.jianshu.com/p/2accc2840a1b</a></p><p><strong>RPC基本原理</strong></p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/8d4549f60b486065efbf4d18e50b45d9.png" alt="img"></p><p><strong>步骤解析：</strong></p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/0c10f4d3ec820dd4bf663f10dd933e2d.png" alt="img"></p><p>RPC两个核心模块：通讯，序列化。</p><p>测试环境搭建</p><h4 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h4><p>Apache Dubbo |ˈdʌbəʊ| 是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。</p><p>dubbo官网 <a href="http://dubbo.apache.org/zh-cn/index.html">http://dubbo.apache.org/zh-cn/index.html</a></p><p>1.了解Dubbo的特性</p><p>2.查看官方文档</p><p><strong>dubbo基本概念</strong></p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ca6754e043e696e6600743e51df142a7.png" alt="img"></p><p><strong>服务提供者</strong>（Provider）：暴露服务的服务提供方，服务提供者在启动时，向注册中心注册自己提供的服务。</p><p><strong>服务消费者</strong>（Consumer）：调用远程服务的服务消费方，服务消费者在启动时，向注册中心订阅自己所需的服务，服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</p><p><strong>注册中心</strong>（Registry）：注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者</p><p><strong>监控中心</strong>（Monitor）：服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心</p><p><strong>调用关系说明</strong></p><p>l 服务容器负责启动，加载，运行服务提供者。</p><p>l 服务提供者在启动时，向注册中心注册自己提供的服务。</p><p>l 服务消费者在启动时，向注册中心订阅自己所需的服务。</p><p>l 注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</p><p>l 服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</p><p>l 服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</p><h4 id="Dubbo环境搭建"><a href="#Dubbo环境搭建" class="headerlink" title="Dubbo环境搭建"></a>Dubbo环境搭建</h4><p>点进dubbo官方文档，推荐我们使用Zookeeper 注册中心</p><p>什么是zookeeper呢？可以查看官方文档</p><h4 id="Window下安装zookeeper"><a href="#Window下安装zookeeper" class="headerlink" title="Window下安装zookeeper"></a>Window下安装zookeeper</h4><p>1、下载zookeeper ：地址， 我们下载3.4.14 ， 最新版！解压zookeeper</p><p>2、运行&#x2F;bin&#x2F;zkServer.cmd ，初次运行会报错，没有zoo.cfg配置文件；</p><p>可能遇到问题：闪退 !</p><p>解决方案：编辑zkServer.cmd文件末尾添加pause 。这样运行出错就不会退出，会提示错误信息，方便找到原因。</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/8f5003e062b2c5a9dc32fb80554dcbf1.png" alt="img"></p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/8e6f6c2f0c59e3861ad3d3da66d92b05.png" alt="img"></p><p>3、修改zoo.cfg配置文件</p><p>将conf文件夹下面的zoo_sample.cfg复制一份改名为zoo.cfg即可。</p><p>注意几个重要位置：</p><p>dataDir&#x3D;.&#x2F; 临时数据存储的目录（可写相对路径）</p><p>clientPort&#x3D;2181 zookeeper的端口号</p><p>修改完成后再次启动zookeeper</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/627472000958f640bddaa77aa5c09be2.png" alt="img"></p><p>4、使用zkCli.cmd测试</p><p>ls &#x2F;：列出zookeeper根下保存的所有节点</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[zk: 127.0.0.1:2181(CONNECTED) 4]</span> ls /<span class="hljs-selector-attr">[zookeeper]</span><br></code></pre></td></tr></table></figure><p>create –e &#x2F;kuangshen 123：创建一个kuangshen节点，值为123</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9ea067bf17bfa5c34380a07f7f34878b.png" alt="img"></p><p>get &#x2F;kuangshen：获取&#x2F;kuangshen节点的值</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6a7e5cd32b9afc68dd8354cc76e1881b.png" alt="img"></p><p>我们再来查看一下节点</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/dbe748a4685dee3b7231bd1de4564430.png" alt="img"></p><h4 id="window下安装dubbo-admin"><a href="#window下安装dubbo-admin" class="headerlink" title="window下安装dubbo-admin"></a>window下安装dubbo-admin</h4><p>dubbo本身并不是一个服务软件。它其实就是一个jar包，能够帮你的java程序连接到zookeeper，并利用zookeeper消费、提供服务。</p><p>但是为了让用户更好的管理监控众多的dubbo服务，官方提供了一个可视化的监控程序dubbo-admin，不过这个监控即使不装也不影响使用。</p><p>我们这里来安装一下：</p><p><strong>1、下载dubbo-admin</strong></p><p>地址 ：<a href="https://github.com/apache/dubbo-admin/tree/master">https://github.com/apache/dubbo-admin/tree/master</a></p><p><strong>2、解压进入目录</strong></p><p>修改 dubbo-admin\src\main\resources \application.properties 指定zookeeper地址</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">server.port</span>=<span class="hljs-number">7001</span>spring.velocity.cache=<span class="hljs-literal">false</span>spring.velocity.charset=UTF-<span class="hljs-number">8</span>spring.velocity.layout-url=/templates/default.vmspring.messages.fallback-to-system-locale=<span class="hljs-literal">false</span>spring.messages.basename=i18n/messagespring.root.password=rootspring.guest.password=guestdubbo.registry.address=zookeeper://<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">2181</span><br>1<br></code></pre></td></tr></table></figure><p><strong>3、在项目目录下</strong>打包dubbo-admin</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">mvn clean <span class="hljs-keyword">package</span> -Dmaven.test.skip=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p><strong>第一次打包的过程有点慢，需要耐心等待！直到成功！</strong></p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2604a5e280dad102e4376839840348da.png" alt="img"></p><p>4、执行 dubbo-admin\target 下的dubbo-admin-0.0.1-SNAPSHOT.jar</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java </span>-<span class="hljs-keyword">jar </span>dubbo-admin<span class="hljs-number">-0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>-SNAPSHOT.<span class="hljs-keyword">jar</span><br></code></pre></td></tr></table></figure><p>【注意：zookeeper的服务一定要打开！】</p><p>执行完毕，我们去访问一下 <a href="http://localhost:7001/">http://localhost:7001/</a> ， 这时候我们需要输入登录账户和密码，我们都是默认的root-root；</p><p>登录成功后，查看界面</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4ad739bcb76e9e26d87dfe986727925c.png" alt="img"></p><p>安装完成！</p><h3 id="17-3、SpringBoot-Dubbo-zookeeper"><a href="#17-3、SpringBoot-Dubbo-zookeeper" class="headerlink" title="17.3、SpringBoot + Dubbo + zookeeper"></a>17.3、SpringBoot + Dubbo + zookeeper</h3><h4 id="框架搭建"><a href="#框架搭建" class="headerlink" title="框架搭建"></a>框架搭建</h4><p><strong>1. 启zookeeper ！</strong></p><p><strong>2. IDEA创建一个空项目；</strong></p><p><strong>3.创建一个模块，实现服务提供者：provider-server ， 选择web依赖即可</strong></p><p><strong>4.项目创建完毕，我们写一个服务，比如卖票的服务；</strong></p><p>编写接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.provider.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">TicketService</span> &#123;<br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getTicket</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>编写实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.provider.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TicketServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TicketService</span> &#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getTicket</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;《狂神说Java》&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>5.创建一个模块，实现服务消费者：consumer-server ， 选择web依赖即可</strong></p><p><strong>6.项目创建完毕，我们写一个服务，比如用户的服务；</strong></p><p>编写service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.consumer.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>   <span class="hljs-comment">//我们需要去拿去注册中心的服务</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>需求：现在我们的用户想使用买票的服务，这要怎么弄呢 ？</strong></p><h4 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h4><p><strong>1、将服务提供者注册到注册中心，我们需要整合Dubbo和zookeeper，所以需要导包</strong></p><p><strong>我们从dubbo官网进入github，看下方的帮助文档，找到dubbo-springboot，找到依赖包</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Dubbo Spring Boot Starter --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.dubbo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>zookeeper的包我们去maven仓库下载，zkclient；</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.github.sgroschupf/zkclient --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.sgroschupf<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>zkclient<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>【新版的坑】zookeeper及其依赖包，解决日志冲突，还需要剔除日志依赖；</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 引入zookeeper --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.curator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>curator-framework<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.12.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.curator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>curator-recipes<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.12.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.zookeeper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>zookeeper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.14<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-comment">&lt;!--排除这个slf4j-log4j12--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-log4j12<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>2、在springboot配置文件中配置dubbo相关属性！</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#当前应用名字</span><br><span class="hljs-attr">dubbo.application.name</span>=<span class="hljs-string">provider-server</span><br><span class="hljs-comment">#注册中心地址</span><br><span class="hljs-attr">dubbo.registry.address</span>=<span class="hljs-string">zookeeper://127.0.0.1:2181</span><br><span class="hljs-comment">#扫描指定包下服务</span><br><span class="hljs-attr">dubbo.scan.base-packages</span>=<span class="hljs-string">com.kuang.provider.service</span><br></code></pre></td></tr></table></figure><p><strong>3、在service的实现类中配置服务注解，发布服务！注意导包问题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.dubbo.config.annotation.Service;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Service</span> <span class="hljs-comment">//将服务发布出去</span><br><span class="hljs-meta">@Component</span> <span class="hljs-comment">//放在容器中</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TicketServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TicketService</span> &#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getTicket</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;《狂神说Java》&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>逻辑理解 ：应用启动起来，dubbo就会扫描指定的包下带有@component注解的服务，将它发布在指定的注册中心中！</strong></p><h4 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h4><p><strong>1、导入依赖，和之前的依赖一样；</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--dubbo--&gt;</span><br><span class="hljs-comment">&lt;!-- Dubbo Spring Boot Starter --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.dubbo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--zookeeper--&gt;</span><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.github.sgroschupf/zkclient --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.sgroschupf<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>zkclient<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 引入zookeeper --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.curator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>curator-framework<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.12.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.curator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>curator-recipes<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.12.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.zookeeper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>zookeeper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.14<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-comment">&lt;!--排除这个slf4j-log4j12--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-log4j12<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、<strong>配置参数</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#当前应用名字</span><br><span class="hljs-attr">dubbo.application.name</span>=<span class="hljs-string">consumer-server</span><br><span class="hljs-comment">#注册中心地址</span><br><span class="hljs-attr">dubbo.registry.address</span>=<span class="hljs-string">zookeeper://127.0.0.1:2181</span><br></code></pre></td></tr></table></figure><p><strong>3. 本来正常步骤是需要将服务提供者的接口打包，然后用pom文件导入，我们这里使用简单的方式，直接将服务的接口拿过来，路径必须保证正确，即和服务提供者相同；</strong></p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/f1b928584a8360bbce5f9ebb90e807cb.png" alt="img"></p><p><strong>4. 完善消费者的服务类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.consumer.service;<br><br><span class="hljs-keyword">import</span> com.kuang.provider.service.TicketService;<br><span class="hljs-keyword">import</span> org.apache.dubbo.config.annotation.Reference;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-meta">@Service</span> <span class="hljs-comment">//注入到容器中</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>   <span class="hljs-meta">@Reference</span> <span class="hljs-comment">//远程引用指定的服务，他会按照全类名进行匹配，看谁给注册中心注册了这个全类名</span><br>   TicketService ticketService;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bugTicket</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-type">String</span> <span class="hljs-variable">ticket</span> <span class="hljs-operator">=</span> ticketService.getTicket();<br>       System.out.println(<span class="hljs-string">&quot;在注册中心买到&quot;</span>+ticket);<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>5. 测试类编写；</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConsumerServerApplicationTests</span> &#123;<br><br>   <span class="hljs-meta">@Autowired</span><br>   UserService userService;<br><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br><br>       userService.bugTicket();<br><br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h4><p><strong>1. 开启zookeeper</strong></p><p><strong>2. 打开dubbo-admin实现监控【可以不用做】</strong></p><p><strong>3. 开启服务者</strong></p><p><strong>4. 消费者消费测试，结果：</strong></p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7636c6fdfb69acc4f7643a6a411d6db3.png" alt="img"></p><p><strong>监控中心 ：</strong></p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/0e77c1515c85ab5bfe785ba8511f8791.png" alt="img"></p><p><strong>ok , 这就是SpingBoot + dubbo + zookeeper实现分布式开发的应用，其实就是一个服务拆分的思想；</strong></p><h2 id="18、集成SpringSecurity"><a href="#18、集成SpringSecurity" class="headerlink" title="18、集成SpringSecurity"></a>18、集成SpringSecurity</h2><h3 id="18-1、安全简介"><a href="#18-1、安全简介" class="headerlink" title="18.1、安全简介"></a>18.1、安全简介</h3><p>在 Web 开发中，安全一直是非常重要的一个方面。安全虽然属于应用的非功能性需求，但是应该在应用开发的初期就考虑进来。如果在应用开发的后期才考虑安全的问题，就可能陷入一个两难的境地：一方面，应用存在严重的安全漏洞，无法满足用户的要求，并可能造成用户的隐私数据被攻击者窃取；另一方面，应用的基本架构已经确定，要修复安全漏洞，可能需要对系统的架构做出比较重大的调整，因而需要更多的开发时间，影响应用的发布进程。因此，从应用开发的第一天就应该把安全相关的因素考虑进来，并在整个应用的开发过程中。</p><p>市面上存在比较有名的：Shiro，Spring Security ！</p><p>这里需要阐述一下的是，每一个框架的出现都是为了解决某一问题而产生了，那么Spring Security框架的出现是为了解决什么问题呢？</p><p>首先我们看下它的官网介绍：Spring Security官网地址</p><p>Spring Security is a powerful and highly customizable authentication and access-control framework. It is the de-facto standard for securing Spring-based applications.</p><p>Spring Security is a framework that focuses on providing both authentication and authorization to Java applications. Like all Spring projects, the real power of Spring Security is found in how easily it can be extended to meet custom requirements</p><p>Spring Security是一个功能强大且高度可定制的身份验证和访问控制框架。它实际上是保护基于spring的应用程序的标准。</p><p>Spring Security是一个框架，侧重于为Java应用程序提供身份验证和授权。与所有Spring项目一样，Spring安全性的真正强大之处在于它可以轻松地扩展以满足定制需求</p><p>从官网的介绍中可以知道这是一个权限框架。想我们之前做项目是没有使用框架是怎么控制权限的？对于权限 一般会细分为功能权限，访问权限，和菜单权限。代码会写的非常的繁琐，冗余。</p><p>怎么解决之前写权限代码繁琐，冗余的问题，一些主流框架就应运而生而Spring Scecurity就是其中的一种。</p><p>Spring 是一个非常流行和成功的 Java 应用开发框架。Spring Security 基于 Spring 框架，提供了一套 Web 应用安全性的完整解决方案。一般来说，Web 应用的安全性包括用户认证（Authentication）和用户授权（Authorization）两个部分。用户认证指的是验证某个用户是否为系统中的合法主体，也就是说用户能否访问该系统。用户认证一般要求用户提供用户名和密码。系统通过校验用户名和密码来完成认证过程。用户授权指的是验证某个用户是否有权限执行某个操作。在一个系统中，不同用户所具有的权限是不同的。比如对一个文件来说，有的用户只能进行读取，而有的用户可以进行修改。一般来说，系统会为不同的用户分配不同的角色，而每个角色则对应一系列的权限。</p><p>对于上面提到的两种应用情景，Spring Security 框架都有很好的支持。在用户认证方面，Spring Security 框架支持主流的认证方式，包括 HTTP 基本认证、HTTP 表单验证、HTTP 摘要认证、OpenID 和 LDAP 等。在用户授权方面，Spring Security 提供了基于角色的访问控制和访问控制列表（Access Control List，ACL），可以对应用中的领域对象进行细粒度的控制。</p><h3 id="18-2、实战测试"><a href="#18-2、实战测试" class="headerlink" title="18.2、实战测试"></a>18.2、实战测试</h3><h4 id="18-2-1、实验环境搭建"><a href="#18-2-1、实验环境搭建" class="headerlink" title="18.2.1、实验环境搭建"></a>18.2.1、实验环境搭建</h4><p>1、新建一个初始的springboot项目web模块，thymeleaf模块</p><p>2、导入静态资源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs undefined">welcome.html<br>|views<br>|level1<br>1.html<br>2.html<br>3.html<br>|level2<br>1.html<br>2.html<br>3.html<br>|level3<br>1.html<br>2.html<br>3.html<br>Login.html<br></code></pre></td></tr></table></figure><p>3、controller跳转！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RouterController</span> &#123;<br><br>   <span class="hljs-meta">@RequestMapping(&#123;&quot;/&quot;,&quot;/index&quot;&#125;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>  &#125;<br><br>   <span class="hljs-meta">@RequestMapping(&quot;/toLogin&quot;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toLogin</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;views/login&quot;</span>;<br>  &#125;<br><br>   <span class="hljs-meta">@RequestMapping(&quot;/level1/&#123;id&#125;&quot;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">level1</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> <span class="hljs-type">int</span> id)</span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;views/level1/&quot;</span>+id;<br>  &#125;<br><br>   <span class="hljs-meta">@RequestMapping(&quot;/level2/&#123;id&#125;&quot;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">level2</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> <span class="hljs-type">int</span> id)</span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;views/level2/&quot;</span>+id;<br>  &#125;<br><br>   <span class="hljs-meta">@RequestMapping(&quot;/level3/&#123;id&#125;&quot;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">level3</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> <span class="hljs-type">int</span> id)</span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;views/level3/&quot;</span>+id;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>4、测试实验环境是否OK！</p><h4 id="18-2-2、认识SpringSecurity"><a href="#18-2-2、认识SpringSecurity" class="headerlink" title="18.2.2、认识SpringSecurity"></a>18.2.2、认识SpringSecurity</h4><p>Spring Security 是针对Spring项目的安全框架，也是Spring Boot底层安全模块默认的技术选型，他可以实现强大的Web安全控制，对于安全控制，我们仅需要引入spring-boot-starter-security 模块，进行少量的配置，即可实现强大的安全管理！</p><p>记住几个类：</p><ul><li>WebSecurityConfigurerAdapter：自定义Security策略</li><li>AuthenticationManagerBuilder：自定义认证策略</li><li>@EnableWebSecurity：开启WebSecurity模式</li></ul><p>Spring Security的两个主要目标是 “认证” 和 “授权”（访问控制）。</p><p><strong>“认证”（Authentication）</strong></p><p>身份验证是关于验证您的凭据，如用户名&#x2F;用户ID和密码，以验证您的身份。</p><p>身份验证通常通过用户名和密码完成，有时与身份验证因素结合使用。</p><p><strong>“授权” （Authorization）</strong></p><p>授权发生在系统成功验证您的身份后，最终会授予您访问资源（如信息，文件，数据库，资金，位置，几乎任何内容）的完全权限。</p><p>这个概念是通用的，而不是只在Spring Security 中存在。</p><h4 id="18-2-3、认证和授权"><a href="#18-2-3、认证和授权" class="headerlink" title="18.2.3、认证和授权"></a>18.2.3、认证和授权</h4><p>目前，我们的测试环境，是谁都可以访问的，我们使用 Spring Security 增加上认证和授权的功能</p><p>1、引入 Spring Security 模块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>   &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>2、编写 Spring Security 配置类</p><p>参考官网：<a href="https://spring.io/projects/spring-security">https://spring.io/projects/spring-security</a></p><p>查看我们自己项目中的版本，找到对应的帮助文档：</p><p><a href="https://docs.spring.io/spring-security/site/docs/5.3.0.RELEASE/reference/html5">https://docs.spring.io/spring-security/site/docs/5.3.0.RELEASE/reference/html5</a> #servlet-applications 8.16.4</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/c9fa686ef28b6b2f5ec094c7d7fca94a.png" alt="img"></p><p>3、编写基础配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.config;<br><br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;<br><br><span class="hljs-meta">@EnableWebSecurity</span> <span class="hljs-comment">// 开启WebSecurity模式</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>       <br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4、定制请求的授权规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>   <span class="hljs-comment">// 定制请求的授权规则</span><br>   <span class="hljs-comment">// 首页所有人可以访问</span><br>   http.authorizeRequests().antMatchers(<span class="hljs-string">&quot;/&quot;</span>).permitAll()<br>  .antMatchers(<span class="hljs-string">&quot;/level1/**&quot;</span>).hasRole(<span class="hljs-string">&quot;vip1&quot;</span>)<br>  .antMatchers(<span class="hljs-string">&quot;/level2/**&quot;</span>).hasRole(<span class="hljs-string">&quot;vip2&quot;</span>)<br>  .antMatchers(<span class="hljs-string">&quot;/level3/**&quot;</span>).hasRole(<span class="hljs-string">&quot;vip3&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>5、测试一下：发现除了首页都进不去了！因为我们目前没有登录的角色，因为请求需要登录的角色拥有对应的权限才可以！</p><p>6、在configure()方法中加入以下配置，开启自动配置的登录功能！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 开启自动配置的登录功能</span><br><span class="hljs-comment">// /login 请求来到登录页</span><br><span class="hljs-comment">// /login?error 重定向到这里表示登录失败</span><br>http.formLogin();<br></code></pre></td></tr></table></figure><p>7、测试一下：发现，没有权限的时候，会跳转到登录的页面！</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/630e58c4df76e942b8d65e647b87429b.png" alt="img"></p><p>8、查看刚才登录页的注释信息；</p><p>我们可以定义认证规则，重写configure(AuthenticationManagerBuilder auth)方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义认证规则</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>   <br>   <span class="hljs-comment">//在内存中定义，也可以在jdbc中去拿....</span><br>   auth.inMemoryAuthentication()<br>          .withUser(<span class="hljs-string">&quot;kuangshen&quot;</span>).password(<span class="hljs-string">&quot;123456&quot;</span>).roles(<span class="hljs-string">&quot;vip2&quot;</span>,<span class="hljs-string">&quot;vip3&quot;</span>)<br>          .and()<br>          .withUser(<span class="hljs-string">&quot;root&quot;</span>).password(<span class="hljs-string">&quot;123456&quot;</span>).roles(<span class="hljs-string">&quot;vip1&quot;</span>,<span class="hljs-string">&quot;vip2&quot;</span>,<span class="hljs-string">&quot;vip3&quot;</span>)<br>          .and()<br>          .withUser(<span class="hljs-string">&quot;guest&quot;</span>).password(<span class="hljs-string">&quot;123456&quot;</span>).roles(<span class="hljs-string">&quot;vip1&quot;</span>,<span class="hljs-string">&quot;vip2&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>9、测试，我们可以使用这些账号登录进行测试！发现会报错！</p><p>There is no PasswordEncoder mapped for the id “null”</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01938fa11b20edf5cc068257557d9274.png" alt="img"></p><p>10、原因，我们要将前端传过来的密码进行某种方式加密，否则就无法登录，修改代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义认证规则</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>   <span class="hljs-comment">//在内存中定义，也可以在jdbc中去拿....</span><br>   <span class="hljs-comment">//Spring security 5.0中新增了多种加密方式，也改变了密码的格式。</span><br>   <span class="hljs-comment">//要想我们的项目还能够正常登陆，需要修改一下configure中的代码。我们要将前端传过来的密码进行某种方式加密</span><br>   <span class="hljs-comment">//spring security 官方推荐的是使用bcrypt加密方式。</span><br>   <br>   auth.inMemoryAuthentication().passwordEncoder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>())<br>          .withUser(<span class="hljs-string">&quot;kuangshen&quot;</span>).password(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>().encode(<span class="hljs-string">&quot;123456&quot;</span>)).roles(<span class="hljs-string">&quot;vip2&quot;</span>,<span class="hljs-string">&quot;vip3&quot;</span>)<br>          .and()<br>          .withUser(<span class="hljs-string">&quot;root&quot;</span>).password(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>().encode(<span class="hljs-string">&quot;123456&quot;</span>)).roles(<span class="hljs-string">&quot;vip1&quot;</span>,<span class="hljs-string">&quot;vip2&quot;</span>,<span class="hljs-string">&quot;vip3&quot;</span>)<br>          .and()<br>          .withUser(<span class="hljs-string">&quot;guest&quot;</span>).password(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>().encode(<span class="hljs-string">&quot;123456&quot;</span>)).roles(<span class="hljs-string">&quot;vip1&quot;</span>,<span class="hljs-string">&quot;vip2&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>11、测试，发现，登录成功，并且每个角色只能访问自己认证下的规则！搞定</p><h4 id="18-2-4、权限控制和注销"><a href="#18-2-4、权限控制和注销" class="headerlink" title="18.2.4、权限控制和注销"></a>18.2.4、权限控制和注销</h4><p>1、开启自动配置的注销的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定制请求的授权规则</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>   <span class="hljs-comment">//....</span><br>   <span class="hljs-comment">//开启自动配置的注销的功能</span><br>      <span class="hljs-comment">// /logout 注销请求</span><br>   http.logout();<br>&#125;<br></code></pre></td></tr></table></figure><p>2、我们在前端，增加一个注销的按钮，index.html 导航栏中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/logout&#125;&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;address card icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 注销<br><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3、我们可以去测试一下，登录成功后点击注销，发现注销完毕会跳转到登录页面！</p><p>4、但是，我们想让他注销成功后，依旧可以跳转到首页，该怎么处理呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// .logoutSuccessUrl(&quot;/&quot;); 注销成功来到首页</span><br>http.logout().logoutSuccessUrl(<span class="hljs-string">&quot;/&quot;</span>);<br></code></pre></td></tr></table></figure><p>5、测试，注销完毕后，发现跳转到首页OK</p><p>6、我们现在又来一个需求：用户没有登录的时候，导航栏上只显示登录按钮，用户登录之后，导航栏可以显示登录的用户信息及注销按钮！还有就是，比如kuangshen这个用户，它只有 vip2，vip3功能，那么登录则只显示这两个功能，而vip1的功能菜单不显示！这个就是真实的网站情况了！该如何做呢？</p><p><strong>我们需要结合thymeleaf中的一些功能</strong></p><p>sec：authorize&#x3D;“isAuthenticated()”:是否认证登录！来显示不同的页面</p><p>Maven依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.thymeleaf.extras/thymeleaf-extras-springsecurity4 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity5<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>7、修改我们的 前端页面</p><ol><li><p>导入命名空间</p></li><li><pre><code class="language-html">xmlns:sec=&quot;http://www.thymeleaf.org/thymeleaf-extras-springsecurity5&quot;<figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"></span><br><span class="language-xml">3. 修改导航栏，增加认证判断</span><br><span class="language-xml"></span><br><span class="language-xml">4. ```html</span><br><span class="language-xml">   <span class="hljs-comment">&lt;!--登录注销--&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right menu&quot;</span>&gt;</span></span><br><span class="language-xml">   </span><br><span class="language-xml">      <span class="hljs-comment">&lt;!--如果未登录--&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">sec:authorize</span>=<span class="hljs-string">&quot;!isAuthenticated()&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@</span></span></span><span class="hljs-template-tag">&#123;/<span class="hljs-name">login</span>&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;address card icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 登录</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">   </span><br><span class="language-xml">      <span class="hljs-comment">&lt;!--如果已登录--&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">sec:authorize</span>=<span class="hljs-string">&quot;isAuthenticated()&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;address card icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span></span><br><span class="language-xml">             用户名：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">sec:authentication</span>=<span class="hljs-string">&quot;principal.username&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">             角色：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">sec:authentication</span>=<span class="hljs-string">&quot;principal.authorities&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">   </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">sec:authorize</span>=<span class="hljs-string">&quot;isAuthenticated()&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@</span></span></span><span class="hljs-template-tag">&#123;/<span class="hljs-name">logout</span>&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;address card icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 注销</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure></code></pre></li></ol><p>8、重启测试，我们可以登录试试看，登录成功后确实，显示了我们想要的页面；</p><p>9、如果注销404了，就是因为它默认防止csrf跨站请求伪造，因为会产生安全问题，我们可以将请求改为post表单提交，或者在spring security中关闭csrf功能；我们试试：在 配置中增加 <code>http.csrf().disable();</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">http.csrf().disable();<span class="hljs-comment">//关闭csrf功能:跨站请求伪造,默认只能通过post方式提交logout请求</span><br>http.logout().logoutSuccessUrl(<span class="hljs-string">&quot;/&quot;</span>);<br></code></pre></td></tr></table></figure><p>10、我们继续将下面的角色功能块认证完成！</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- sec:authorize=&quot;hasRole(&#x27;vip1&#x27;)&quot; --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;column&quot;</span> <span class="hljs-attr">sec:authorize</span>=<span class="hljs-string">&quot;hasRole(&#x27;vip1&#x27;)&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui raised segment&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">h5</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>Level 1<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/level1/1&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> Level-1-1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/level1/2&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> Level-1-2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/level1/3&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> Level-1-3<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;column&quot;</span> <span class="hljs-attr">sec:authorize</span>=<span class="hljs-string">&quot;hasRole(&#x27;vip2&#x27;)&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui raised segment&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">h5</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>Level 2<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/level2/1&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> Level-2-1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/level2/2&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> Level-2-2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/level2/3&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> Level-2-3<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;column&quot;</span> <span class="hljs-attr">sec:authorize</span>=<span class="hljs-string">&quot;hasRole(&#x27;vip3&#x27;)&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui raised segment&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">h5</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>Level 3<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/level3/1&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> Level-3-1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/level3/2&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> Level-3-2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/level3/3&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> Level-3-3<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>11、测试一下！</p><p>12、权限控制和注销搞定！</p><h4 id="18-2-5、记住我"><a href="#18-2-5、记住我" class="headerlink" title="18.2.5、记住我"></a>18.2.5、记住我</h4><p>现在的情况，我们只要登录之后，关闭浏览器，再登录，就会让我们重新登录，但是很多网站的情况，就是有一个记住密码的功能，这个该如何实现呢？很简单</p><p>1、开启记住我功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定制请求的授权规则</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">//。。。。。。。。。。。</span><br>   <span class="hljs-comment">//记住我</span><br>   http.rememberMe();<br>&#125;<br></code></pre></td></tr></table></figure><p>2、我们再次启动项目测试一下，发现登录页多了一个记住我功能，我们登录之后关闭 浏览器，然后重新打开浏览器访问，发现用户依旧存在！</p><p>思考：如何实现的呢？其实非常简单</p><p>我们可以查看浏览器的cookie</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/e0aeb35664e65c617b573439f9079225.png" alt="img"></p><p>3、我们点击注销的时候，可以发现，spring security 帮我们自动删除了这个 cookie</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/f1ba0f7e575adc7dc4efee07c57f4419.png" alt="img"><br>4、结论：登录成功后，将cookie发送给浏览器保存，以后登录带上这个cookie，只要通过检查就可以免登录了。如果点击注销，则会删除这个cookie，具体的原理我们在JavaWeb阶段都讲过了，这里就不在多说了！</p><h4 id="18-2-6、定制登录页"><a href="#18-2-6、定制登录页" class="headerlink" title="18.2.6、定制登录页"></a>18.2.6、定制登录页</h4><p>现在这个登录页面都是spring security 默认的，怎么样可以使用我们自己写的Login界面呢？</p><p>1、在刚才的登录页配置后面指定 loginpage</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">http.formLogin().loginPage(<span class="hljs-string">&quot;/toLogin&quot;</span>);<br></code></pre></td></tr></table></figure><p>2、然后前端也需要指向我们自己定义的 login请求</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/toLogin&#125;&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;address card icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 登录<br><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3、我们登录，需要将这些信息发送到哪里，我们也需要配置，login.html 配置提交请求及方式，方式必须为post:</p><p>在 loginPage()源码中的注释上有写明：</p><p><img src="/2020/04/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/a0f5e3bca0258f5075415b77973293fb.png" alt="img"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/login&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;field&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Username<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui left icon input&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Username&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;user icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;field&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Password<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui left icon input&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;lock icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui blue submit button&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>4、这个请求提交上来，我们还需要验证处理，怎么做呢？我们可以查看formLogin()方法的源码！我们配置接收登录的用户名和密码的参数！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">http.formLogin()<br>  .usernameParameter(<span class="hljs-string">&quot;username&quot;</span>)<br>  .passwordParameter(<span class="hljs-string">&quot;password&quot;</span>)<br>  .loginPage(<span class="hljs-string">&quot;/toLogin&quot;</span>)<br>  .loginProcessingUrl(<span class="hljs-string">&quot;/login&quot;</span>); <span class="hljs-comment">// 登陆表单提交请求</span><br></code></pre></td></tr></table></figure><p>5、在登录页增加记住我的多选框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;remember&quot;</span>&gt;</span> 记住我<br></code></pre></td></tr></table></figure><p>6、后端验证处理！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定制记住我的参数！</span><br>http.rememberMe().rememberMeParameter(<span class="hljs-string">&quot;remember&quot;</span>);<br></code></pre></td></tr></table></figure><p>7、测试，OK</p><h3 id="18-3、完整配置代码"><a href="#18-3、完整配置代码" class="headerlink" title="18.3、完整配置代码"></a>18.3、完整配置代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.config;<br><br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;<br><br><span class="hljs-meta">@EnableWebSecurity</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br>   <span class="hljs-comment">//定制请求的授权规则</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>       http.authorizeRequests().antMatchers(<span class="hljs-string">&quot;/&quot;</span>).permitAll()<br>      .antMatchers(<span class="hljs-string">&quot;/level1/**&quot;</span>).hasRole(<span class="hljs-string">&quot;vip1&quot;</span>)<br>      .antMatchers(<span class="hljs-string">&quot;/level2/**&quot;</span>).hasRole(<span class="hljs-string">&quot;vip2&quot;</span>)<br>      .antMatchers(<span class="hljs-string">&quot;/level3/**&quot;</span>).hasRole(<span class="hljs-string">&quot;vip3&quot;</span>);<br><br><br>       <span class="hljs-comment">//开启自动配置的登录功能：如果没有权限，就会跳转到登录页面！</span><br>           <span class="hljs-comment">// /login 请求来到登录页</span><br>           <span class="hljs-comment">// /login?error 重定向到这里表示登录失败</span><br>       http.formLogin()<br>          .usernameParameter(<span class="hljs-string">&quot;username&quot;</span>)<br>          .passwordParameter(<span class="hljs-string">&quot;password&quot;</span>)<br>          .loginPage(<span class="hljs-string">&quot;/toLogin&quot;</span>)<br>          .loginProcessingUrl(<span class="hljs-string">&quot;/login&quot;</span>); <span class="hljs-comment">// 登陆表单提交请求</span><br><br>       <span class="hljs-comment">//开启自动配置的注销的功能</span><br>           <span class="hljs-comment">// /logout 注销请求</span><br>           <span class="hljs-comment">// .logoutSuccessUrl(&quot;/&quot;); 注销成功来到首页</span><br><br>       http.csrf().disable();<span class="hljs-comment">//关闭csrf功能:跨站请求伪造,默认只能通过post方式提交logout请求</span><br>       http.logout().logoutSuccessUrl(<span class="hljs-string">&quot;/&quot;</span>);<br><br>       <span class="hljs-comment">//记住我</span><br>       http.rememberMe().rememberMeParameter(<span class="hljs-string">&quot;remember&quot;</span>);<br>  &#125;<br><br>   <span class="hljs-comment">//定义认证规则</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>       <span class="hljs-comment">//在内存中定义，也可以在jdbc中去拿....</span><br>       <span class="hljs-comment">//Spring security 5.0中新增了多种加密方式，也改变了密码的格式。</span><br>       <span class="hljs-comment">//要想我们的项目还能够正常登陆，需要修改一下configure中的代码。我们要将前端传过来的密码进行某种方式加密</span><br>       <span class="hljs-comment">//spring security 官方推荐的是使用bcrypt加密方式。</span><br><br>       auth.inMemoryAuthentication().passwordEncoder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>())<br>              .withUser(<span class="hljs-string">&quot;kuangshen&quot;</span>).password(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>().encode(<span class="hljs-string">&quot;123456&quot;</span>)).roles(<span class="hljs-string">&quot;vip2&quot;</span>,<span class="hljs-string">&quot;vip3&quot;</span>)<br>              .and()<br>              .withUser(<span class="hljs-string">&quot;root&quot;</span>).password(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>().encode(<span class="hljs-string">&quot;123456&quot;</span>)).roles(<span class="hljs-string">&quot;vip1&quot;</span>,<span class="hljs-string">&quot;vip2&quot;</span>,<span class="hljs-string">&quot;vip3&quot;</span>)<br>              .and()<br>              .withUser(<span class="hljs-string">&quot;guest&quot;</span>).password(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>().encode(<span class="hljs-string">&quot;123456&quot;</span>)).roles(<span class="hljs-string">&quot;vip1&quot;</span>,<span class="hljs-string">&quot;vip2&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>springBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>基础</tag>
      
      <tag>笔记</tag>
      
      <tag>springBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基础数据结构</title>
    <link href="/2020/04/21/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2020/04/21/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h2 id="一、概要"><a href="#一、概要" class="headerlink" title="一、概要"></a>一、概要</h2><p>（一）线性结构</p><p>1、最常用，特点为数据元素间存在一对一的线性关系，一般有数组、队列、链表、栈。</p><p>2、分为两种存储结构：链式存储结构和顺序存储结构，前者存储地址不连续，后者连续。</p><p>（二）非线性结构</p><p>1、一般有二维数组、多维数组、广义表、树结构、图结构。</p><p>2、大多算法与树结构、图结构关联。</p><h2 id="二、稀疏数组（sparsearray）"><a href="#二、稀疏数组（sparsearray）" class="headerlink" title="二、稀疏数组（sparsearray）"></a>二、稀疏数组（sparsearray）</h2><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tap">当一个数组中大部分为<span class="hljs-number"> 0 </span>或 同一个值 时,即去掉无意义的记录<br></code></pre></td></tr></table></figure><h5 id="1、处理方法："><a href="#1、处理方法：" class="headerlink" title="1、处理方法："></a>1、处理方法：</h5><p><strong>记录数组有几行几列，和不同的值。</strong></p><p>例：</p><p>[ 0 ] {总行数，总列数，有效值个数}</p><p>[ 1 ] {所在行，所在列，有效值}</p><p>…</p><p>**（1）<a href="https://so.csdn.net/so/search?q=%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84&spm=1001.2101.3001.7020">二维数组</a>转稀疏数组：**遍历总列数、总行数、有效值个数。根据sum创建稀疏数组，将二维有效数据存入稀疏数组。</p><p>（**2）稀疏数组转原始数组：**读取稀疏数组的第一行，根据第一行数据创建原始的二维数组，再读取后几行的数据赋值即可。</p><h5 id="2、代码实现："><a href="#2、代码实现：" class="headerlink" title="2、代码实现："></a>2、代码实现：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">sparsearray</span> &#123;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//二维数组</span><br>        <span class="hljs-type">int</span>[][] TowArr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">11</span>][<span class="hljs-number">11</span>];<br>        TowArr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        TowArr[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">2</span>;<br>        TowArr[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">2</span>;<br>        TowArr[<span class="hljs-number">10</span>][<span class="hljs-number">10</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span>[] row : TowArr)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> data : row)&#123;<br>                System.out.printf(<span class="hljs-string">&quot;%d\t&quot;</span>,data);<br>            &#125;<br>            System.out.println();<br>        &#125;<br><br>        <span class="hljs-comment">//1、遍历找到非0个数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; TowArr.length;i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;j &lt; TowArr[i].length;j++)&#123;<br>                <span class="hljs-keyword">if</span>(TowArr[i][j] != <span class="hljs-number">0</span>)&#123;<br>                    sum++;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//创建对应的稀疏数组</span><br>        <span class="hljs-type">int</span>[][] sparseArr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[sum + <span class="hljs-number">1</span>][<span class="hljs-number">3</span>];<br>        sparseArr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = TowArr.length;<br>        sparseArr[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = TowArr[<span class="hljs-number">0</span>].length;<span class="hljs-comment">//稀疏数组的原数组行数列数各自相等</span><br>        sparseArr[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] = sum;<br><br><br>        <span class="hljs-comment">//遍历插入有效值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; TowArr.length;i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;j &lt; TowArr[i].length;j++)&#123;<br>                <span class="hljs-keyword">if</span>(TowArr[i][j] != <span class="hljs-number">0</span>)&#123;<br>                    count++;<br>                    sparseArr[count][<span class="hljs-number">0</span>] = i;<br>                    sparseArr[count][<span class="hljs-number">1</span>] = j;<br>                    sparseArr[count][<span class="hljs-number">2</span>] = TowArr[i][j];<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//输出稀疏数组</span><br>        System.out.println();<br>        System.out.println(<span class="hljs-string">&quot;==========稀疏数组=============&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span>[] row : sparseArr)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> data : row)&#123;<br>                System.out.printf(<span class="hljs-string">&quot;%d\t&quot;</span>,data);<br>            &#125;<br>            System.out.println();<br>        &#125;<br><br>        <span class="hljs-comment">//稀疏数组还原二维数组</span><br>        <span class="hljs-type">int</span>[][] TOWArr2 =<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[sparseArr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]][sparseArr[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]];<br>        System.out.println(<span class="hljs-string">&quot;==========二维数组恢复==========&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i&lt;sparseArr.length;i++)&#123;<br>            TOWArr2[sparseArr[i][<span class="hljs-number">0</span>]][sparseArr[i][<span class="hljs-number">1</span>]] = sparseArr[i][<span class="hljs-number">2</span>];<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span>[] row : TOWArr2)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> data : row)&#123;<br>                System.out.printf(<span class="hljs-string">&quot;%d\t&quot;</span>,data);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、队列（Queue）"><a href="#三、队列（Queue）" class="headerlink" title="三、队列（Queue）"></a>三、队列（Queue）</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">有序列表，先入先出，队首出，队后加<br></code></pre></td></tr></table></figure><h5 id="1、处理方法：-1"><a href="#1、处理方法：-1" class="headerlink" title="1、处理方法："></a>1、处理方法：</h5><p>建立环形数组（取模的方式实现）</p><p>定义front，rear分别代表队首第一个元素和队尾最后一个元素），初始值都为1</p><p>当队列满时（rear + 1）% maxSize &#x3D;&#x3D; front</p><p>当队列空时，rear &#x3D;&#x3D; front</p><p>队列中有效数据个数：(rear + maxSize - front) %maxSize</p><h5 id="2、代码实现：用-建立环形队列"><a href="#2、代码实现：用-建立环形队列" class="headerlink" title="2、代码实现：用%建立环形队列"></a>2、代码实现：用%建立环形队列</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//编写ArrayQueued的队列，编写一个ArrayQueue类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayQueue</span>&#123;<br>    <span class="hljs-comment">//声明属性</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> maxSize,front,rear;<span class="hljs-comment">//最大容量，队列首个元素，队列最后一个元素</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] QueArr;<span class="hljs-comment">//存放数据，模拟队列</span><br><br>    <span class="hljs-comment">//调用构造器赋初始值</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> arrMaxSize)</span>&#123;<br>        maxSize = arrMaxSize + <span class="hljs-number">1</span>;<br>        QueArr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[maxSize];<br>        front = <span class="hljs-number">0</span>;<span class="hljs-comment">//指向队列头部，即前一个位置</span><br>        rear = <span class="hljs-number">0</span>;<span class="hljs-comment">//指向队列尾部，即最后一个数据</span><br>    &#125;<br><br>    <span class="hljs-comment">//判断队列是否满</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> (rear + <span class="hljs-number">1</span>) % maxSize == front ;<br>    &#125;<br><br>    <span class="hljs-comment">//判断队列是否为空</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span>  rear == front;<br>    &#125;<br><br>    <span class="hljs-comment">//添加数据到队列</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>        <span class="hljs-keyword">if</span>(isFull())&#123;<br>            System.out.println(<span class="hljs-string">&quot;队列已满&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//直接加入数据</span><br>        QueArr[rear] = n;<br>        rear = (rear + <span class="hljs-number">1</span>) % maxSize;<br><br>    &#125;<br><br>    <span class="hljs-comment">//取出数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getQueue</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(isEmpty())&#123;<br>            <span class="hljs-comment">//通过抛出异常处理</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;队列空，不能取数据&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//这里需要分析出front是指向队列的第一个元素</span><br>        <span class="hljs-comment">//1、先把front对应的值保存到一个临时变量</span><br>        <span class="hljs-comment">//2、将front后移,考虑取模</span><br>        <span class="hljs-comment">//3、将临时保存的变量返回</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> QueArr[front];<br>        front = (front + <span class="hljs-number">1</span>) % maxSize;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br><br>    <span class="hljs-comment">//有效数据个数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> (rear + maxSize - front) % maxSize ;<br>    &#125;<br>    <span class="hljs-comment">//显示队列的数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showQueue</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//遍历</span><br>        <span class="hljs-keyword">if</span>(isEmpty())&#123;<br>            System.out.println(<span class="hljs-string">&quot;队列为空&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//从front开始遍历</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> front; i &lt; front + size();i++) &#123;<br>            System.out.printf(<span class="hljs-string">&quot;QueArr[%d]=%d\n&quot;</span>,i % maxSize,QueArr[i % maxSize]);<br>        &#125;<br>    &#125;<br>        <span class="hljs-comment">//显示队首</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">headQueue</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-comment">//判断</span><br>        <span class="hljs-keyword">if</span>(isEmpty())&#123;<br>            System.out.println(<span class="hljs-string">&quot;没有数据&quot;</span>);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;队列为空&quot;</span>);<br>        &#125;<br>            <span class="hljs-keyword">return</span> QueArr[front];<br>        &#125;<br></code></pre></td></tr></table></figure><h5 id="3、scanner、boolean的用法"><a href="#3、scanner、boolean的用法" class="headerlink" title="3、scanner、boolean的用法"></a>3、scanner、boolean的用法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>     <span class="hljs-type">char</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27; &#x27;</span>;<br>     <span class="hljs-type">boolean</span> <span class="hljs-variable">loop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>     <span class="hljs-keyword">while</span> (loop)&#123;<br>         key = scanner.next().charAt(<span class="hljs-number">0</span>);<span class="hljs-comment">//接收一个字符</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;a&#x27;</span>:<br>                 System.out.println(<span class="hljs-string">&quot;输入一个数：&quot;</span>);<br>                 <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>                 <span class="hljs-keyword">break</span>;<br>                 &#125;<br>             <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;e&#x27;</span>:<br>                 scanner.close();<br>                 loop = <span class="hljs-literal">false</span>;<br>                 System.out.println(<span class="hljs-string">&quot;程序退出&quot;</span>);<br>                 <span class="hljs-keyword">break</span>;<br>         &#125;<br></code></pre></td></tr></table></figure><h2 id="三、链表（Linked-List）"><a href="#三、链表（Linked-List）" class="headerlink" title="三、链表（Linked List）"></a>三、链表（Linked List）</h2><h4 id="（一）单链表（Single-Linked-List）"><a href="#（一）单链表（Single-Linked-List）" class="headerlink" title="（一）单链表（Single Linked List）"></a>（一）单链表（Single Linked List）</h4><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haskell">以结点的方式存储，每个节点包含<span class="hljs-class"><span class="hljs-keyword">data</span>域、next域（指向下一个节点）</span><br>链表的各个节点不一定是连续存放的<br>链表分类：带节结点和无头节点的链表<br></code></pre></td></tr></table></figure><h5 id="1、处理方法：-2"><a href="#1、处理方法：-2" class="headerlink" title="1、处理方法："></a>1、处理方法：</h5><p>设置头节点head</p><p>创建辅助节点temp</p><p>创造类属性中含他的对象next</p><p>使用temp遍历（temp&#x3D;temp.next）使链表的元素.next(temp.next&#x3D;添加元素名)指向下一个元素</p><h5 id="2、代码实现：-1"><a href="#2、代码实现：-1" class="headerlink" title="2、代码实现："></a>2、代码实现：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//注意理解</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">*Student temp = head</span><br><span class="hljs-comment">* 此时temp和head指向内存堆中同一个对象，即虽然head赋值给了temp，就是temp的变化也会影响head的变化</span><br><span class="hljs-comment">* </span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LInkedList</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;彭磊一号&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;彭磊二号&quot;</span>, <span class="hljs-string">&quot;女&quot;</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;彭磊三号&quot;</span>, <span class="hljs-string">&quot;人妖&quot;</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;彭磊四号&quot;</span>, <span class="hljs-string">&quot;不详&quot;</span>);<br><br>        <span class="hljs-comment">//创建一个链表</span><br>        <span class="hljs-type">SingleLinkedList</span> <span class="hljs-variable">singleLinkedList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingleLinkedList</span>();<br>        singleLinkedList.addByOrder(student1);<br>        singleLinkedList.addByOrder(student4);<br>        singleLinkedList.addByOrder(student3);<br>        singleLinkedList.addByOrder(student2);<br><br>        <span class="hljs-comment">//显示单链表</span><br>        singleLinkedList.ShowList();<br><br>        <span class="hljs-comment">//修改单链表</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">newstudent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;彭磊的二号修改&quot;</span>, <span class="hljs-string">&quot;不男不女&quot;</span>);<br>        singleLinkedList.update(newstudent);<br>        <span class="hljs-comment">//显示单链表</span><br>        System.out.println(<span class="hljs-string">&quot;==============&quot;</span>);<br>        singleLinkedList.ShowList();<br><br>        <span class="hljs-comment">//删除单链表</span><br>        System.out.println(<span class="hljs-string">&quot;==============&quot;</span>);<br>        singleLinkedList.del(<span class="hljs-number">3</span>);<br>        singleLinkedList.ShowList();<br><br>        System.out.println(<span class="hljs-string">&quot;链表长度为：&quot;</span> + singleLinkedList.getLength(singleLinkedList.getHead()));<br>        System.out.println(<span class="hljs-string">&quot;倒数第2个元素为&quot;</span> + singleLinkedList.FindLastIndexNode(singleLinkedList.getHead(), <span class="hljs-number">1</span>));<br><br>        <span class="hljs-comment">//反转链表</span><br>        singleLinkedList.reverseList(singleLinkedList.getHead());<br>        singleLinkedList.ShowList();<br>    &#125;<br>    <br>&#125;<br><br><span class="hljs-comment">//定义一个Students,每个Students 对象就是一个节点</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> No;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> String sex;<br>    <span class="hljs-comment">//指向下一个结点</span><br>    <span class="hljs-keyword">public</span> Student next;<span class="hljs-comment">//相当于储存下一个节点的内容</span><br><br>    <span class="hljs-comment">//构造器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(<span class="hljs-type">int</span> No,String name,String sex)</span>&#123;<br>        <span class="hljs-built_in">this</span>.No =No;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>    &#125;<br><br>    <span class="hljs-comment">//显示方法</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student [no=&quot;</span> + No + <span class="hljs-string">&quot;,name=&quot;</span> + name +<span class="hljs-string">&quot;,sex=&quot;</span>+sex+<span class="hljs-string">&quot;]&quot;</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SingleLinkedList</span>&#123;<br><br>    <span class="hljs-comment">//创建头结点，头节点不移动，不存放具体数据</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Student</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br><br>    <span class="hljs-keyword">public</span> Student <span class="hljs-title function_">getHead</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br><br>    <span class="hljs-comment">//添加方法：添加节点到单向链表--找到最后的结点，转移next域</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">add</span><span class="hljs-params">(Student student)</span>&#123;<br>        <span class="hljs-comment">//因为head不能动，创建temp变量辅助遍历</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-comment">//遍历链表，找到最后</span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-comment">//找到链表最后则退出循环</span><br>            <span class="hljs-keyword">if</span>(temp.next==<span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">//没有找到则temp后移</span><br>            temp = temp.next;<br>        &#125;<br>        <span class="hljs-comment">//当退出while循环时，temp就指向链表的最后</span><br>        <span class="hljs-comment">//将最后这个节点的next 指向新的结点</span><br>        temp.next = student;<br>    &#125;<br>    <span class="hljs-comment">//第二种添加方式:指定位置，将temp.next赋值到新节点.next,将新节点赋值给temp.next</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addByOrder</span><span class="hljs-params">(Student student)</span>&#123;<br>        <span class="hljs-comment">//temp找的是添加位置的前一个节点</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//标志：添加的编号是否存在，默认为false</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">if</span>(temp.next == <span class="hljs-literal">null</span>)&#123;<span class="hljs-comment">//说明temp已经在链表的最后</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(temp.next.No&gt;student.No)&#123;<span class="hljs-comment">//位置找到了，就在temp后边</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(temp.next.No == student.No)&#123;<span class="hljs-comment">//说明该编号已经存在</span><br>                flag = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            temp = temp.next;<span class="hljs-comment">//后移，相当于遍历</span><br>        &#125;<br>        <span class="hljs-comment">//判断flag的值</span><br>        <span class="hljs-keyword">if</span>(flag)&#123;<span class="hljs-comment">//不能添加</span><br>            System.out.println(<span class="hljs-string">&quot;准备插入的学生id已经存在&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//插入到链表中</span><br>            student.next = temp.next;<br>            temp.next = student;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">//顺序打印</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ShowList</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//判断链表是否为空</span><br>       <span class="hljs-keyword">if</span>(head.next == <span class="hljs-literal">null</span>)&#123;<br>           System.out.println(<span class="hljs-string">&quot;链表为空&quot;</span>);<br>           <span class="hljs-keyword">return</span>;<br>       &#125;<br>       <span class="hljs-comment">//因为头结点不能动，借助辅助变量遍历</span><br>       <span class="hljs-type">Student</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head.next;<br>       <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>           <span class="hljs-comment">//判断是否到链表最后</span><br>           <span class="hljs-keyword">if</span>(temp == <span class="hljs-literal">null</span>)&#123;<br>               <span class="hljs-keyword">break</span>;<br>           &#125;<br>           <span class="hljs-comment">//输出节点信息</span><br>           System.out.println(temp);<br>           <span class="hljs-comment">//没有到最后就一直后移，将next域后移</span><br>           temp = temp.next;<br>       &#125;<br>   &#125;<br><br><br><br>    <span class="hljs-comment">//修改:主键不变</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Student student)</span>&#123;<br>    <span class="hljs-keyword">if</span>(head.next == <span class="hljs-literal">null</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;链表为空~&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">//找到修改节点</span><br>    <span class="hljs-comment">//定义一个辅助变量</span><br>    <span class="hljs-type">Student</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head.next;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//标志：是否找到该节点</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-keyword">if</span>(temp == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">break</span>;<span class="hljs-comment">//已经遍历完</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (temp.No == student.No)&#123;<br>            flag = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        temp = temp.next;<br>    &#125;<br>    <span class="hljs-comment">//根据flag判断是否找到要修改的节点</span><br>    <span class="hljs-keyword">if</span>(flag)&#123;<br>        temp.name = student.name;<br>        temp.sex  = student.sex;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;没有找到该id&quot;</span>);<br>    &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//删除:找到需要删除节点的前一个节点temp，将temp.next.next赋值给temp.next,删除的节点无指向则会被垃圾回收机制处理</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">del</span><span class="hljs-params">(<span class="hljs-type">int</span> No)</span>&#123;<br><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//标志是否找到待删除节点</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">if</span>(temp.next == <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(temp.next.No == No)&#123;<br>             flag = <span class="hljs-literal">true</span>;<br>             <span class="hljs-keyword">break</span>;<br>            &#125;<br>            temp = temp.next;<br>        &#125;<br>        <span class="hljs-comment">//判断flag</span><br>        <span class="hljs-keyword">if</span>(flag)&#123;<span class="hljs-comment">//找到则删除</span><br>            temp.next = temp.next.next;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.printf(<span class="hljs-string">&quot;未找到该节点%d&quot;</span>,No);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//方法：返回有效节点个数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getLength</span><span class="hljs-params">(Student head)</span>&#123;<br>        <span class="hljs-keyword">if</span>(head.next == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head.next;<br>        <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">null</span>)&#123;<br>            length++;<br>            cur = cur.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> length;<br>    &#125;<br><br>    <span class="hljs-comment">//查询倒数第k个节点：设置k变量，遍历到length-k即可</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Student <span class="hljs-title function_">FindLastIndexNode</span><span class="hljs-params">(Student head,<span class="hljs-type">int</span> k)</span>&#123;<br>        <span class="hljs-keyword">if</span>(head.next==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> getLength(head);<br>        <span class="hljs-keyword">if</span> (k&lt;=<span class="hljs-number">0</span> || k&gt;=length)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-comment">//定义辅助变量</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head.next;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length-k; i++) &#123;<br>            cur = cur.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> cur;<br>    &#125;<br>    <span class="hljs-comment">//定义一个节点reverseHead = new Student();从头遍历原链表，每遍历一次便取出放在新的链表前端</span><br>    <span class="hljs-comment">//原来链表的head.next = reverseHead.next</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reverseList</span><span class="hljs-params">(Student head)</span>&#123;<br>        <span class="hljs-comment">//如果节点小于等于1，直接返回</span><br>        <span class="hljs-keyword">if</span>(head.next == <span class="hljs-literal">null</span> || head.next.next == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//定义一个辅助指针，帮助我们遍历原来的链表</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head.next;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">reverseHead</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-comment">//遍历原来的列表，每遍历一个节点，便取出放在reverseList中</span><br>        <span class="hljs-keyword">while</span> (cur!=<span class="hljs-literal">null</span>)&#123;                                                   <span class="hljs-comment">//cur = student1//cur用来遍历</span><br>            next = cur.next;<span class="hljs-comment">//先暂时保存当前节点的下一个节点，因为后面需要使用          next=student2//next用来存取下节点的下一个节点</span><br>            cur.next = reverseHead.next;<span class="hljs-comment">//将cur的下一个节点指向新的链表的最前端      cur.next = reverseHead.next //指针反转</span><br>            reverseHead.next = cur;<span class="hljs-comment">//将cur连接到新的链表上                        reverseHead.next = student1//更新第一个节点</span><br>            cur = next;<span class="hljs-comment">//让cur后移                                              cur = student2</span><br>        &#125;<br>        <span class="hljs-comment">//将head.next指向reverseHead.next,实现单链表的反转</span><br>        head.next = reverseHead.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（二）双链表（Double-Linked-List）"><a href="#（二）双链表（Double-Linked-List）" class="headerlink" title="（二）双链表（Double Linked List）"></a>（二）双链表（Double Linked List）</h4><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haskell">以结点的方式存储，每个节点包含<span class="hljs-class"><span class="hljs-keyword">data</span>属性、next属性、pre属性</span><br></code></pre></td></tr></table></figure><h5 id="1、处理方法：-3"><a href="#1、处理方法：-3" class="headerlink" title="1、处理方法："></a>1、处理方法：</h5><p>在单链表的基础上增加pre属性</p><p>修改方法与单链表相同</p><p>增加方法增加student.pre &#x3D; temp;</p><p>删除方法改为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">temp.pre.next = temp.next;<br>temp.next.pre = temp.pre;<br></code></pre></td></tr></table></figure><h5 id="2、代码实现"><a href="#2、代码实现" class="headerlink" title="2、代码实现"></a>2、代码实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DoubleLinkedListDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DStudent</span>&#123;<br>    <span class="hljs-type">int</span> no;<br>    String name;<br>    String sex;<br>    DStudent next;<br>    DStudent pre;<br><br>    <span class="hljs-comment">//构造器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DStudent</span><span class="hljs-params">(<span class="hljs-type">int</span> no,String name,String sex)</span>&#123;<br>        <span class="hljs-built_in">this</span>.no = no;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>    &#125;<br><br>    <span class="hljs-comment">//显示</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;[no:&quot;</span>+no+<span class="hljs-string">&quot;,name:&quot;</span>+name+<span class="hljs-string">&quot;,sex:&quot;</span>+sex+<span class="hljs-string">&quot;]&quot;</span> ;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DoubleLinkedList</span>&#123;<br>    <span class="hljs-comment">//建立一个头</span><br>    <span class="hljs-type">DStudent</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DStudent</span>(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br><br><br>    <span class="hljs-comment">//按顺序添加在最后</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(DStudent student)</span>&#123;<br>        <span class="hljs-type">DStudent</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<span class="hljs-comment">//建立temp：作用临时储存工具人/遍历的实质是不断更换temp的共用内存指向</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">if</span>(temp.next==<span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<span class="hljs-comment">//遍历判断每一个元素的next是否为空，从head开始</span><br>            temp = temp.next;<span class="hljs-comment">//因为head.next在第一次遍历后存在一个数据元素，</span><br>        &#125;<span class="hljs-comment">//遍历的结果为temp和最后一个元素共用一个内存，所以遍历结束后给最后一个元素的next赋值</span><br>        temp.next = student;<br>        student.pre = temp;<span class="hljs-comment">//形成双向链表</span><br>    &#125;<br><br><br>    <span class="hljs-comment">//修改与单链表相同</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updata</span><span class="hljs-params">(DStudent student)</span>&#123;<br>        <span class="hljs-type">DStudent</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span>(temp.next == <span class="hljs-literal">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;链表为空&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">if</span>(temp.next.no == student.no)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(temp.next == <span class="hljs-literal">null</span>)&#123;<br>                flag = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            temp = temp.next;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(flag)&#123;<br>            System.out.println(<span class="hljs-string">&quot;修改的数据不存在&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            temp.next.name = student.name;<br>            temp.next.sex = student.sex;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//删除</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">del</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span>&#123;<br>        <span class="hljs-type">DStudent</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head.next;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span>(temp.next == <span class="hljs-literal">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;链表为空&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">if</span>(temp.no == no)&#123;<br>                <span class="hljs-keyword">if</span>(temp.next==<span class="hljs-literal">null</span>)&#123;<br>                flag = <span class="hljs-literal">true</span>;<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            temp = temp.next;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (flag)&#123;<br>            temp.pre.next = <span class="hljs-literal">null</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            temp.pre.next = temp.next;<br>            temp.next.pre = temp.pre;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//查看所有数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showList</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">DStudent</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">if</span> (temp.next == <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                temp = temp.next;<br>                System.out.println(temp.toString());<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//查看链表长度</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getLength</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">DStudent</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">int</span> length=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">if</span> (temp.next == <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                length++;<br>                temp = temp.next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> length;<br>    &#125;<br>    <span class="hljs-comment">//查看指定元素</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showIdEqual</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span>&#123;<br>        <span class="hljs-type">DStudent</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span>(temp.next == <span class="hljs-literal">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;链表为空&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">if</span>(temp.next.no == no)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(temp.next == <span class="hljs-literal">null</span>)&#123;<br>                flag = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            temp = temp.next;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(flag)&#123;<br>            System.out.println(<span class="hljs-string">&quot;查看的数据的id不存在&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(temp.next);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//定义一个节点reverseHead = new Student();从头遍历原链表，每遍历一次便取出放在新的链表前端</span><br>    <span class="hljs-comment">//原来链表的head.next = reverseHead.next</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reverseList</span><span class="hljs-params">(DStudent head)</span>&#123;<br>        <span class="hljs-comment">//如果节点小于等于1，直接返回</span><br>        <span class="hljs-keyword">if</span>(head.next == <span class="hljs-literal">null</span> || head.next.next == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//定义一个辅助指针，帮助我们遍历原来的链表</span><br>        <span class="hljs-type">DStudent</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head.next;<br>        <span class="hljs-type">DStudent</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">DStudent</span> <span class="hljs-variable">reverseHead</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DStudent</span>(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-comment">//遍历原来的列表，每遍历一个节点，便取出放在reverseList中</span><br>        <span class="hljs-keyword">while</span> (cur!=<span class="hljs-literal">null</span>)&#123;                                                   <span class="hljs-comment">//cur = student1//cur用来遍历</span><br>            next = cur.next;<span class="hljs-comment">//先暂时保存当前节点的下一个节点，因为后面需要使用          next=student2//next用来存取下节点的下一个节点</span><br>            cur.next = reverseHead.next;<span class="hljs-comment">//将cur的下一个节点指向新的链表的最前端      cur.next = reverseHead.next //指针反转</span><br>            reverseHead.next = cur;<span class="hljs-comment">//将拿出的元素连接到新的链表上                   reverseHead.next = student1//更新第一个节点</span><br>            cur = next;<span class="hljs-comment">//让拿出元素的下一个元素进入遍历                              cur = student2</span><br>        &#125;<br>        <span class="hljs-comment">//将head.next指向reverseHead.next,实现单链表的反转</span><br>        head.next = reverseHead.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（三）环形链表（Ring-Linked-List）"><a href="#（三）环形链表（Ring-Linked-List）" class="headerlink" title="（三）环形链表（Ring Linked List）"></a>（三）环形链表（Ring Linked List）</h4><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haskell">以结点的方式存储，每个节点包含<span class="hljs-class"><span class="hljs-keyword">data</span>域、next域</span><br></code></pre></td></tr></table></figure><h5 id="1、处理方法：-4"><a href="#1、处理方法：-4" class="headerlink" title="1、处理方法："></a>1、处理方法：</h5><p>构建：</p><p>创建第一个节点，让first节点指向该节点，并形成环形</p><p>之后当我们每创建一个新的节点，就把该节点加入到已有的环形链表中</p><p>遍历：</p><p>让辅助变量指向first节点，通过while循环遍历该环形链表即可</p><p>即 curboy.next &#x3D;&#x3D; first时结束遍历</p><h5 id="2、代码实现：-2"><a href="#2、代码实现：-2" class="headerlink" title="2、代码实现："></a>2、代码实现：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RingLinkedListDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//构建和遍历</span><br>        <span class="hljs-type">RingLinkedList</span> <span class="hljs-variable">ringLinkedList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RingLinkedList</span>();<br>        ringLinkedList.addBoys(<span class="hljs-number">5</span>);<br>        ringLinkedList.showBoy();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 创建一个Boy类，表示一个节点</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Boy</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> no;<span class="hljs-comment">// 编号</span><br>    <span class="hljs-keyword">private</span> Boy next; <span class="hljs-comment">// 指向下一个节点,默认null</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Boy</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123;<br>        <span class="hljs-built_in">this</span>.no = no;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> no;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNo</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123;<br>        <span class="hljs-built_in">this</span>.no = no;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Boy <span class="hljs-title function_">getNext</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> next;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNext</span><span class="hljs-params">(Boy next)</span> &#123;<br>        <span class="hljs-built_in">this</span>.next = next;<br>    &#125;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RingLinkedList</span>&#123;<br>    <span class="hljs-comment">//创建first节点,不赋值</span><br>    <span class="hljs-type">Boy</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">//添加小孩节点，构建成环形列表</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addBoys</span><span class="hljs-params">(<span class="hljs-type">int</span> nums)</span> &#123;<br><br>        <span class="hljs-keyword">if</span> (nums &lt; <span class="hljs-number">1</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;nums  值不对！！&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//辅助指针，帮助构建环形链表</span><br>        <span class="hljs-type">Boy</span> <span class="hljs-variable">curBoy</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= nums; i++) &#123;<br>            <span class="hljs-type">Boy</span> <span class="hljs-variable">boy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Boy</span>(i);<br><br>            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>) &#123;<br>                first = boy;<br>                first.setNext(first);<br>                curBoy = first;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                boy.setNext(first);<br>                curBoy.setNext(boy);<br>                curBoy = boy;<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">//遍历</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showBoy</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(first == <span class="hljs-literal">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;链表为空&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">Boy</span> <span class="hljs-variable">curBoy</span> <span class="hljs-operator">=</span> first;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            System.out.printf(<span class="hljs-string">&quot;小孩的编号%d\n&quot;</span>,curBoy.getNo());<br>            <span class="hljs-keyword">if</span> (curBoy.getNext() == first)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            curBoy = curBoy.getNext();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、栈（stack）"><a href="#四、栈（stack）" class="headerlink" title="四、栈（stack）"></a>四、栈（stack）</h2><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nsis">先入后出，栈顶（<span class="hljs-literal">top</span>）出栈（<span class="hljs-keyword">pop</span>）、入栈（<span class="hljs-keyword">push</span>）<br>出栈、入栈：出栈栈底不变，栈顶下移/上移<br>作用：处理递归调用、表达式转换、二叉树遍历、图形深度优先、子程序调用<br></code></pre></td></tr></table></figure><h5 id="1、处理方法：数组模拟栈"><a href="#1、处理方法：数组模拟栈" class="headerlink" title="1、处理方法：数组模拟栈"></a>1、处理方法：数组模拟栈</h5><p>实现栈的思路分析</p><p>使用数组模拟栈，用定义top表示栈顶，初始化为-1</p><p>入栈：当有数据加入到栈时，top++；stack[top]&#x3D;data</p><p>出栈：int values &#x3D; stack[top];top–,return value</p><h5 id="2、代码实现：-3"><a href="#2、代码实现：-3" class="headerlink" title="2、代码实现："></a>2、代码实现：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StackDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ArrayStack</span> <span class="hljs-variable">arrayStack</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayStack</span>(<span class="hljs-number">4</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">loop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">while</span> (loop)&#123;<br>            System.out.println(<span class="hljs-string">&quot;show:显示栈&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;exit:退出栈&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;push:入栈&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;show:出栈&quot;</span>);<br>            key = scanner.next();<br>            <span class="hljs-keyword">switch</span> (key)&#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;show&quot;</span>:<br>                    arrayStack.list();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;push&quot;</span>:<br>                    System.out.println(<span class="hljs-string">&quot;请输入一个值&quot;</span>);<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>                    arrayStack.push(value);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;pop&quot;</span>:<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> arrayStack.pop();<br>                        System.out.println(<span class="hljs-string">&quot;出栈的数据为： &quot;</span> + res);<br>                    &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                        System.out.println(e.getMessage());<br>                    &#125;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;exit&quot;</span>:<br>                    scanner.close();<br>                    loop = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;程序退出了&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayStack</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> maxSize;<span class="hljs-comment">//栈的大小</span><br>    <span class="hljs-keyword">private</span>  <span class="hljs-type">int</span>[] stack;<span class="hljs-comment">//数据栈仓库</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">top</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<span class="hljs-comment">//栈顶初始化为-1</span><br><br>    <span class="hljs-comment">//构造器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayStack</span><span class="hljs-params">(<span class="hljs-type">int</span> maxSize)</span>&#123;<br>        <span class="hljs-built_in">this</span>.maxSize = maxSize;<br>        stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-built_in">this</span>.maxSize];<br>    &#125;<br>    <span class="hljs-comment">//栈满</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> top == maxSize - <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> top == -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//push入栈</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span>&#123;<br>        <span class="hljs-keyword">if</span>(isFull())&#123;<br>            System.out.println(<span class="hljs-string">&quot;栈满&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        top++;<br>        stack[top] = value;<br>    &#125;<br>    <span class="hljs-comment">//出栈pop</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pop</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//先判断栈是否空</span><br>        <span class="hljs-keyword">if</span>(isEmpty())&#123;<br>            <span class="hljs-comment">//抛出异常</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;栈空&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> stack[top];<br>        top--;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br>    <span class="hljs-comment">//显示栈的情况[遍历栈]</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">list</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(isEmpty())&#123;<br>            System.out.println(<span class="hljs-string">&quot;栈空&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> top; i &gt;=<span class="hljs-number">0</span>; i--) &#123;<br>            System.out.printf(<span class="hljs-string">&quot;stack[%d]=%d\n&quot;</span>,i,stack[i]);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="五、哈希表（HashTable）"><a href="#五、哈希表（HashTable）" class="headerlink" title="五、哈希表（HashTable）"></a>五、哈希表（HashTable）</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">数组装链表<br></code></pre></td></tr></table></figure><h5 id="1、处理方法：-5"><a href="#1、处理方法：-5" class="headerlink" title="1、处理方法："></a>1、处理方法：</h5><p>先用哈希函数求值，然后除数组的长度。得出余数放到相应的数组中，若有冲突，则用链表连接。（每个元素包含对应的键和值）</p><h5 id="2、代码实现：-4"><a href="#2、代码实现：-4" class="headerlink" title="2、代码实现："></a>2、代码实现：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> suanfa;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HashT</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">HashTable</span> <span class="hljs-variable">hashTable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashTable</span>(<span class="hljs-number">7</span>);<br>        hashTable.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Stu</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;pl&quot;</span>));<br>        hashTable.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Stu</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;zky&quot;</span>));<br>        hashTable.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Stu</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;zl&quot;</span>));<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;add:添加学生信息&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;list:显示学生信息&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;find:查找学生信息&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;delete:删除学生信息&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;exit:退出学生系统&quot;</span>);<br><br>            key=scanner.next();<br>            <span class="hljs-keyword">switch</span> (key)&#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;add&quot;</span>:<br>                    System.out.println(<span class="hljs-string">&quot;输入id&quot;</span>);<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>                    System.out.println(<span class="hljs-string">&quot;输入名字&quot;</span>);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> scanner.next();<br>                    <span class="hljs-type">Stu</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stu</span>(id,name);<br>                    hashTable.add(stu);<br>                    <span class="hljs-keyword">break</span>;<br><br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;list&quot;</span>:<br>                    hashTable.list();<br>                    <span class="hljs-keyword">break</span>;<br><br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;exit&quot;</span>:<br>                    scanner.close();<br>                    System.exit(<span class="hljs-number">0</span>);<br>                    <span class="hljs-keyword">break</span>;<br><br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;delete&quot;</span>:<br>                    System.out.println(<span class="hljs-string">&quot;输入要删除学生的id&quot;</span>);<br>                    id = scanner.nextInt();<br>                    hashTable.Delete(id);<br>                    <span class="hljs-keyword">break</span>;<br><br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;find&quot;</span>:<br>                    System.out.println(<span class="hljs-string">&quot;输入要查找学生的id&quot;</span>);<br>                    id = scanner.nextInt();<br>                    hashTable.Find(id);<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//创建哈希表</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HashTable</span>&#123;<br>    <span class="hljs-keyword">private</span> StuLinkedList[] stuLinkedListArray;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HashTable</span><span class="hljs-params">(<span class="hljs-type">int</span> size)</span>&#123;<br>        <span class="hljs-built_in">this</span>.size = size;<br>        <span class="hljs-comment">//初始化</span><br>        stuLinkedListArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StuLinkedList</span>[size];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>            stuLinkedListArray[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StuLinkedList</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//添加学生信息</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Stu stu)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">stuLinkedListNo</span> <span class="hljs-operator">=</span> hashFun(stu.id);<br>        <span class="hljs-comment">//将stu添加到对应链表中</span><br>        stuLinkedListArray[stuLinkedListNo].add(stu);<br>    &#125;<br><br>    <span class="hljs-comment">//遍历hash表</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">list</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>            stuLinkedListArray[i].list(i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Delete</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>&#123;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">stuLinkedListNo</span> <span class="hljs-operator">=</span> hashFun(id);<br>        <span class="hljs-type">Stu</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> stuLinkedListArray[stuLinkedListNo].Del(id);<br><br>        <span class="hljs-keyword">if</span>(stu != <span class="hljs-literal">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;在第&quot;</span> + (stuLinkedListNo+<span class="hljs-number">1</span>) +<span class="hljs-string">&quot;链表删除该学生信息&quot;</span> + id + stu.name);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;没有找到该学生信息&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Find</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">stuLinkedListNo</span> <span class="hljs-operator">=</span> hashFun(id);<br>        <span class="hljs-type">Stu</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> stuLinkedListArray[stuLinkedListNo].FindStu(id);<br>        <span class="hljs-keyword">if</span>(stu != <span class="hljs-literal">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;在第&quot;</span> + (stuLinkedListNo+<span class="hljs-number">1</span>) +<span class="hljs-string">&quot;链表找到该学生信息&quot;</span> + id + stu.name);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;没有找到该学生信息&quot;</span>);<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">//编写hash函数,取模法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashFun</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>&#123;<br>        <span class="hljs-keyword">return</span> id % size;<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-comment">//创建元素组</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Stu</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> Stu next;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Stu</span><span class="hljs-params">(<span class="hljs-type">int</span> id, String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//创建链表</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StuLinkedList</span>&#123;<br>    <span class="hljs-comment">//头指针，执行第一个Stu，head直接指向第一个学生信息</span><br>    <span class="hljs-keyword">private</span> Stu head;<br><br>    <span class="hljs-comment">//添加学生</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Stu stu)</span>&#123;<br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">null</span>)&#123;<br>            head = stu;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">Stu</span> <span class="hljs-variable">curStu</span> <span class="hljs-operator">=</span> head;<span class="hljs-comment">//辅助指针</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">if</span>(curStu.next == <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            curStu = curStu.next;<br>        &#125;<br>        curStu.next = stu;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">list</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>&#123;<br><br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">null</span>)&#123;<br>            System.out.println(i + <span class="hljs-string">&quot;号链表为空&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">Stu</span> <span class="hljs-variable">curStu</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            System.out.printf(i + <span class="hljs-string">&quot;号链表=&gt; id = %d  name = %s\t&quot;</span>,curStu.id,curStu.name);<br>            System.out.println();<br>            <span class="hljs-keyword">if</span>(curStu.next == <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            curStu = curStu.next;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//查找</span><br>    <span class="hljs-keyword">public</span> Stu <span class="hljs-title function_">FindStu</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>&#123;<br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;链表为空&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">Stu</span> <span class="hljs-variable">curStu</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">if</span>(curStu.id == id)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(curStu.next == <span class="hljs-literal">null</span>)&#123;<br>                curStu = <span class="hljs-literal">null</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            curStu = curStu.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> curStu;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Stu <span class="hljs-title function_">Del</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>&#123;<br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;链表为空&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">Stu</span> <span class="hljs-variable">curStu</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">Stu</span> <span class="hljs-variable">delStu</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">if</span>(head.id == id)&#123;<br>                delStu = head;<br>                head = <span class="hljs-literal">null</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(curStu.next.id == id)&#123;<br>                delStu = curStu.next;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (curStu.next == <span class="hljs-literal">null</span>)&#123;<br>                curStu = <span class="hljs-literal">null</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            curStu = curStu.next;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> delStu;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(curStu.next.next!=<span class="hljs-literal">null</span>) &#123;<br>            curStu.next = curStu.next.next;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            curStu.next = <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> delStu;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="六、搜索二叉树"><a href="#六、搜索二叉树" class="headerlink" title="六、搜索二叉树"></a>六、搜索二叉树</h2><h5 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a><strong>1、基本概念</strong></h5><p>节点的度：一个节点含有的子树的个数称为该节点的度； 如上图：A的为2</p><p>叶节点：度为0的节点称为叶节点； 如上图：G、H、I节点为叶节点</p><p>非终端节点或分支节点：度不为0的节点； 如上图：B、D、C、E、F节点为分支节点</p><p>双亲节点或父节点：若一个节点含有子节点，则这个节点称为其子节点的父节点； 如上图：A是B的父节点</p><p>孩子节点或子节点：一个节点含有的子树的根节点称为该节点的子节点； 如上图：B是A的孩子节点</p><p>兄弟节点：具有相同父节点的节点互称为兄弟节点； 如上图：B、C是兄弟节点</p><p>树的度：一棵树中，最大的节点的度称为树的度； 如上图：树的度为2</p><p>节点的层次：从根开始定义起，根为第1层，根的子节点为第2层，以此类推；</p><p>树的高度或深度：树中节点的最大层次； 如上图：树的高度为4<br>堂兄弟节点：双亲在同一层的节点互为堂兄弟；如上图：H、I互为兄弟节点</p><p>节点的祖先：从根到该节点所经分支上的所有节点；如上图：A是所有节点的祖先</p><p>子孙：以某节点为根的子树中任一节点都称为该节点的子孙。如上图：所有节点都是A的子孙</p><p>森林：由m棵互不相交的树的集合称为森林；</p><h5 id="2、实现过程"><a href="#2、实现过程" class="headerlink" title="2、实现过程"></a><strong>2、实现过程</strong></h5><p>创造一个二叉树类</p><ul><li>类中有属性一个节点（为节点类的对象）：根节点</li><li>创造一个节点的内部类</li><li><ul><li>类中有属性两个节点：左右和数据value</li></ul></li><li>判断方法：是否为空<ul><li>添加某个值：借助辅助节点变量，小走左大走右，找到左或右子节点为空值时插入</li></ul></li><li>查找最大值：<ul><li>查找最小值：</li></ul></li><li>删除某个值：<ul><li>查找某个值：</li></ul></li><li>前序遍历：先结点（结点开始），然后从左（最小值开始）到右<ul><li>中序遍历：先左（最小值开始）、再结点、再右</li></ul></li><li>后序遍历：先左再右、后结点</li></ul><h5 id="3、代码实现"><a href="#3、代码实现" class="headerlink" title="3、代码实现"></a><strong>3、代码实现</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> 数据结构;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BinaryT</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">BinarySortTree</span> <span class="hljs-variable">binarySortTree</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BinarySortTree</span>();<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;a&quot;</span>);<br>        binarySortTree.add(root);<br>        binarySortTree.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;b&quot;</span>));<br>        binarySortTree.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;c&quot;</span>));<br>        binarySortTree.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">6</span>,<span class="hljs-string">&quot;d&quot;</span>));<br><br>        binarySortTree.preOrder(root);<span class="hljs-comment">//前序遍历先返回节点&gt;左&gt;右</span><br>        System.out.println(<span class="hljs-string">&quot;\n=========&quot;</span>);<br>        binarySortTree.inOrder(root);<span class="hljs-comment">//中序遍历先返回左&gt;节点&gt;右:从小到大</span><br>        System.out.println(<span class="hljs-string">&quot;\n=========&quot;</span>);<br>        binarySortTree.nextOrder(root);<span class="hljs-comment">//后序遍历先返回右&gt;左&gt;节点</span><br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br><br>    <span class="hljs-type">int</span> no;<br>    String name;<br>    Node left;<br>    Node right;<br>    Node parent;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">int</span> no, String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.no = no;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;node&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;no=&quot;</span> + no +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BinarySortTree</span> &#123;<br><br>    Node root;<br><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">getRoot</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br><br>    <span class="hljs-comment">//添加</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Node x)</span> &#123;<br><br>        <span class="hljs-comment">//如果根节点为空</span><br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            root = x;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//如果不为空：遵循大右小左</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> root;<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br><br>            <span class="hljs-keyword">if</span> (temp.no &lt; x.no) &#123;<br>                <span class="hljs-keyword">if</span> (temp.right == <span class="hljs-literal">null</span>) &#123;<br>                    temp.right = x;<br>                    x.parent = temp;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    temp = temp.right;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (temp.no &gt; x.no) &#123;<br>                <span class="hljs-keyword">if</span> (temp.left == <span class="hljs-literal">null</span>) &#123;<br>                    temp.left = x;<br>                    x.parent = temp;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    temp = temp.left;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                temp.name = x.name;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br><br>    &#125;<br>    <span class="hljs-comment">//查找最小值</span><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">findMin</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//如果根节点为空</span><br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> root;<br>        &#125;<br><br>        <span class="hljs-comment">//如果不为空：遵循大右小左</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> root;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">if</span>(temp.left == <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">return</span> temp;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                temp = temp.left;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">findMax</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//如果根节点为空</span><br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> root;<br>        &#125;<br><br>        <span class="hljs-comment">//如果不为空：遵循大右小左</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> root;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">if</span>(temp.right == <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">return</span> temp;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                temp = temp.right;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//删除(找到》判断》处理)</span><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">del</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span>&#123;<br><br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span> || root.no ==no)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> root;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br><br>            <span class="hljs-keyword">if</span> (temp.no &lt; no) &#123;<br>                <span class="hljs-keyword">if</span> (temp.right == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    temp = temp.right;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (temp.no &gt; no) &#123;<br>                <span class="hljs-keyword">if</span> (temp.left == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    temp = temp.left;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//为叶子节点</span><br>                <span class="hljs-keyword">if</span>(temp.right == <span class="hljs-literal">null</span> &amp;&amp; temp.left == <span class="hljs-literal">null</span>)&#123;<br>                    temp.parent.left = <span class="hljs-literal">null</span>;<br>                    temp.parent.right = <span class="hljs-literal">null</span>;<br>                    <span class="hljs-keyword">return</span> temp;<br>                &#125;<br>                <span class="hljs-comment">//只有一个叶子节点</span><br>                <span class="hljs-keyword">if</span>(temp.right == <span class="hljs-literal">null</span> || temp.left == <span class="hljs-literal">null</span>)&#123;<br>                    <span class="hljs-keyword">if</span>(temp.right == <span class="hljs-literal">null</span>)&#123;<br>                        temp.parent.left = temp.left;<br>                        <span class="hljs-keyword">return</span> temp;<br>                    &#125;<span class="hljs-keyword">else</span> &#123;<br>                        temp.parent.right = temp.right;<br>                        <span class="hljs-keyword">return</span> temp;<br>                    &#125;<br>                    <span class="hljs-comment">//两个叶子节点</span><br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">//找到右子树最小值，取出其no和值</span><br>                    <span class="hljs-type">Node</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> temp.right;<br>                    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                        <span class="hljs-keyword">if</span>(cur.left == <span class="hljs-literal">null</span>)&#123;<br>                            <span class="hljs-keyword">break</span>;<br>                        &#125;<span class="hljs-keyword">else</span> &#123;<br>                            cur = cur.left;<br>                        &#125;<br>                    &#125;<br>                    temp.no = cur.no;<br>                    temp.name = cur.name;<br>                    cur.parent.left =<span class="hljs-literal">null</span>;<br>                    <span class="hljs-keyword">return</span> cur;<br>                    &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preOrder</span><span class="hljs-params">(Node root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root != <span class="hljs-literal">null</span>) &#123;<br>            System.out.print(root.toString()+<span class="hljs-string">&quot; | &quot;</span>);<br>            preOrder(root.left);<br>            preOrder(root.right);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inOrder</span><span class="hljs-params">(Node root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root != <span class="hljs-literal">null</span>) &#123;<br>            inOrder(root.left);<br>            System.out.print(root.toString()+<span class="hljs-string">&quot; | &quot;</span>);<br>            inOrder(root.right);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">nextOrder</span><span class="hljs-params">(Node root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root != <span class="hljs-literal">null</span>) &#123;<br>            nextOrder(root.left);<br>            nextOrder(root.right);<br>            System.out.print(root.toString()+<span class="hljs-string">&quot; | &quot;</span>);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="七、堆"><a href="#七、堆" class="headerlink" title="七、堆"></a>七、堆</h2><h5 id="1、堆特性："><a href="#1、堆特性：" class="headerlink" title="1、堆特性："></a>1、堆特性：</h5><p>1、堆中某个节点的值总是不大于（小顶堆）或不小于（大顶堆）其父节点的值</p><p>2、堆总是一棵完全二叉树</p><p>2、堆一般用数组实现</p><h5 id="2、实现过程-1"><a href="#2、实现过程-1" class="headerlink" title="2、实现过程"></a><strong>2、实现过程</strong></h5><ul><li><strong>构造方法</strong></li><li><strong>成员变量</strong></li><li><strong>成员方法</strong></li><li><ul><li>判断两个索引值的大小：[i]是否小于[j]</li><li>交换两个索引的值</li><li>删除最大元素：堆取出数据只能取出最大值，这样保证堆的特性</li><li>插入一个元素（先添加&gt;再比较找到&gt;再交换）</li><li>上浮算法找到正确位置</li><li>下浮算法为添加的数据找到正确位置</li></ul></li></ul><h4 id="3、代码实现-1"><a href="#3、代码实现-1" class="headerlink" title="3、代码实现"></a>3、代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> 数据结构;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">heapStruction</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建堆对象</span><br>        <span class="hljs-type">Heap</span> <span class="hljs-variable">heap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Heap</span>(<span class="hljs-number">10</span>);<br>        <span class="hljs-comment">//往堆中存入字符串数据</span><br>        heap.insert(<span class="hljs-number">1</span>);<br>        heap.insert(<span class="hljs-number">2</span>);<br>        heap.insert(<span class="hljs-number">3</span>);<br>        heap.insert(<span class="hljs-number">4</span>);<br>        heap.insert(<span class="hljs-number">5</span>);<br>        heap.insert(<span class="hljs-number">6</span>);<br>        heap.insert(<span class="hljs-number">7</span>);<br>        <span class="hljs-comment">//通过循环从堆中删除数据</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> ((result = heap.delMax()) != <span class="hljs-number">0</span>)&#123;<br>            System.out.print(result + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Heap</span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] items;<span class="hljs-comment">//存储堆中的元素</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> N;<span class="hljs-comment">//记录堆中元素个数</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Heap</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span>&#123;<br>        <span class="hljs-built_in">this</span>.items =<span class="hljs-keyword">new</span>  <span class="hljs-title class_">int</span>[capacity + <span class="hljs-number">1</span>];<br>        <span class="hljs-built_in">this</span>.N = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//判断[i]是否小于[j]</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">less</span><span class="hljs-params">(<span class="hljs-type">int</span> i ,<span class="hljs-type">int</span> j)</span>&#123;<br>        <span class="hljs-keyword">return</span> items[i] &lt; items[j];<br>    &#125;<br><br>    <span class="hljs-comment">//交换[i]和[j]</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exch</span><span class="hljs-params">(<span class="hljs-type">int</span> i , <span class="hljs-type">int</span> j)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> items[i];<br>        items[i] = items[j];<br>        items[j] = temp;<br>    &#125;<br><br>    <span class="hljs-comment">//插入元素</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> t)</span>&#123;<br>        items[++N] = t;<span class="hljs-comment">//废弃0索引，</span><br>        swim(N);<br>    &#125;<br><br>    <span class="hljs-comment">//上浮算法，使添加到k处的元素找到正确的位置</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swim</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span>&#123;<br>        <span class="hljs-comment">//循环不断比较当前结点的值和其父结点的值，如果发现父节点的值比当前节点小，则交换位置</span><br>        <span class="hljs-keyword">while</span> (k&gt;<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-comment">//比较当前节点和其父节点</span><br>            <span class="hljs-keyword">if</span>(less(k/<span class="hljs-number">2</span>,k))&#123;<br>                exch(k/<span class="hljs-number">2</span>,k);<br>            &#125;<br>            k/=<span class="hljs-number">2</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//删除并返回最大值(根节点)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">delMax</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//最底层最右的树与根节点交换，然后删除根节点(元素个数减1)</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> items[<span class="hljs-number">1</span>];<br>        exch(<span class="hljs-number">1</span>,N);<br>        items[N] = <span class="hljs-number">0</span>;<br>        N--;<br>        <span class="hljs-comment">//下沉调整堆为有序</span><br>        sink(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> max;<br><br>    &#125;<br><br>    <span class="hljs-comment">//使用下沉算法，使索引处的元素能在堆中处于一个正确的位置</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sink</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span>&#123;<br>        <span class="hljs-comment">//循环直到2k&lt;=N向下比较与子节点的较大值交换:k与2k和2k+1比较的较大值比较</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-number">2</span>*k&lt;N)&#123;<br>            <span class="hljs-comment">//获取子节点较大节点</span><br>            <span class="hljs-type">int</span> max;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-number">2</span>*k + <span class="hljs-number">1</span> &lt;= N)&#123;<br>                max = less(<span class="hljs-number">2</span>*k,<span class="hljs-number">2</span>*k+<span class="hljs-number">1</span>) ? <span class="hljs-number">2</span>*k + <span class="hljs-number">1</span> : <span class="hljs-number">2</span>*k;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                max = <span class="hljs-number">2</span>*k;<br>            &#125;<br>            <span class="hljs-comment">//比较节点与较大节点</span><br>            <span class="hljs-keyword">if</span>(!less(k,max))&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            exch(k,max);<br>            <span class="hljs-comment">//变换k的值</span><br>            k = max;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="八、图"><a href="#八、图" class="headerlink" title="八、图"></a>八、图</h2><h4 id="1、基本概念-1"><a href="#1、基本概念-1" class="headerlink" title="1、基本概念"></a>1、基本概念</h4><p>图由一组顶点和一组能够将两个顶点相连的边组成</p><p>自环：自己连接自己</p><p>平行边：连接同一对顶点的两条边</p><p>无向图：边无方向意义</p><p>有向图：不仅连接两个顶点，且具有方向</p><h4 id="2、相关术语"><a href="#2、相关术语" class="headerlink" title="2、相关术语"></a>2、相关术语</h4><p>相邻顶点：通过一条边相连时，我们称这两个顶点是相邻的，并且称这两条边依附与这两个顶点</p><p>度：连接该顶点的边数</p><p>子图：一幅图所有边的子集</p><p>路径：由边顺序连接的一系列路径</p><p>环：一条路径的起点与终点相同称为环</p><p>连通图：任意一个顶点都存在一条路径到另外一个顶点</p><p>非连通图：存在顶点间无路径到达</p><h4 id="3、实现过程"><a href="#3、实现过程" class="headerlink" title="3、实现过程"></a>3、实现过程</h4><p>基本原理：模拟所有顶点与连接顶点的边（邻接矩阵【二维数组】、邻接表【】）</p><p>邻接矩阵【二维数组】：索引表示顶点，索引的值表示两点是否连接（内存占用较大）</p><p>邻接表【一维数组插入队列】：一维数组表示顶点，队列表示邻接点</p><ul><li>构造方法</li><li>成员变量</li><li><ul><li>记录顶点数量</li><li>记录边的数量</li></ul></li><li>成员方法</li><li><ul><li>获取顶点的数量</li><li>获取边的数量</li><li>向图中添加一条边</li><li>获取和顶点相邻的所有顶点</li></ul></li></ul><h4 id="4、代码实现"><a href="#4、代码实现" class="headerlink" title="4、代码实现"></a>4、代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> 数据结构;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GraphS</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Graph</span> <span class="hljs-variable">graph</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Graph</span>(<span class="hljs-number">5</span>);<br>        String VertexValue[] = &#123;<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-string">&quot;D&quot;</span>,<span class="hljs-string">&quot;E&quot;</span>&#125;;<br>        <span class="hljs-keyword">for</span> (String value : VertexValue) &#123;<br>            graph.insertVertex(value);<br>        &#125;<br>        graph.insertEdge(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>        graph.insertEdge(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>);<br>        graph.insertEdge(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>);<br>        graph.insertEdge(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>);<br><br>        graph.show();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Graph</span>&#123;<br><br>    <span class="hljs-keyword">private</span> ArrayList&lt;String&gt; vertexList;<span class="hljs-comment">//存储顶点集合</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[][] edges;<span class="hljs-comment">//存储图对应的邻接矩阵</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> numOfEdges;<span class="hljs-comment">//表示边的数目</span><br><br><br>    <span class="hljs-comment">//构造器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Graph</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>        <span class="hljs-comment">//初始化矩阵和vertexList</span><br>        edges = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n][n];<br>        vertexList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;(n);<br>        numOfEdges = <span class="hljs-number">0</span>;<br>    &#125;<br><br><br>    <span class="hljs-comment">//显示图对应的矩阵</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>[] link :edges) &#123;<span class="hljs-comment">//(数组中的数据类型加名字：数组)</span><br>            System.out.println(Arrays.toString(link));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//常用方法</span><br>    <span class="hljs-comment">//返回结点个数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNumOfVertex</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> vertexList.size();<br>    &#125;<br>    <span class="hljs-comment">//返回边的数目</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNumOfEdges</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> numOfEdges;<br>    &#125;<br>    <span class="hljs-comment">//返回结点i（下标）对应的值</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getValueByIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>&#123;<br>        <span class="hljs-keyword">return</span> vertexList.get(i);<br>    &#125;<br>    <span class="hljs-comment">//返回v1和v2的权值</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getWeight</span><span class="hljs-params">(<span class="hljs-type">int</span> v1,<span class="hljs-type">int</span> v2)</span>&#123;<br>        <span class="hljs-keyword">return</span> edges[v1][v2];<br>    &#125;<br><br>    <span class="hljs-comment">//插入结点</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertVertex</span><span class="hljs-params">(String vertex)</span>&#123;<br>        vertexList.add(vertex);<br>    &#125;<br><br>    <span class="hljs-comment">//添加边</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertEdge</span><span class="hljs-params">(<span class="hljs-type">int</span> v1,<span class="hljs-type">int</span> v2,<span class="hljs-type">int</span> weight)</span>&#123;<br>        edges[v1][v2] = weight;<span class="hljs-comment">//v1表示点的下标（第几个顶点）</span><br>        edges[v2][v1] = weight;<br>        numOfEdges++;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（一）图的深度优先遍历（递归）"><a href="#（一）图的深度优先遍历（递归）" class="headerlink" title="（一）图的深度优先遍历（递归）"></a>（一）图的深度优先遍历（递归）</h4><p><strong>从初始访问结点出发，初始访问结点可能有多个领接结点，深度优先遍历的策略是：</strong></p><p>首先访问第一个邻接结点，然后再以这个被访问的领接结点作为初始结点，访问它的第一个领接结点，即每次访问完当前结点后首先访问当前结点的第一个领接结点。</p><h6 id="实现算法步骤："><a href="#实现算法步骤：" class="headerlink" title="实现算法步骤："></a>实现算法步骤：</h6><p>1、访问初始结点v，并标记结点v为已访问</p><p>2、查找结点v的第一个领接点w</p><p>3、若w存在则执行【4】，不存在回到【1】，从v的下一个结点继续</p><p>4、若w未被访问，重复【123】</p><p>5、若w被访问，查找结点v的领接结点w的下一个邻接结点，转到【3】</p><h6 id="代码增加"><a href="#代码增加" class="headerlink" title="代码增加"></a>代码增加</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> ArrayList&lt;String&gt; vertexList;<span class="hljs-comment">//存储顶点集合</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[][] edges;<span class="hljs-comment">//存储图对应的邻接矩阵</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> numOfEdges;<span class="hljs-comment">//表示边的数目</span><br><span class="hljs-comment">//&lt;增加&gt;</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span>[] isVisited;<br><br><span class="hljs-comment">//构造器</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Graph</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>    <br>    <span class="hljs-comment">//初始化矩阵和vertexList</span><br>    edges = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n][n];<br>    vertexList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;(n);<br>    numOfEdges = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//定义boolean数组，记录某个结点是否被访问</span><br>    isVisited = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[n];<br>&#125;<br><br><span class="hljs-comment">//得到第一个邻接结点的下标w</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getFirstNeighbor</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; vertexList.size(); j++) &#123;<br>        <span class="hljs-keyword">if</span>(edges[index][j]&gt;<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> j;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">//根据前一个邻接结点的下标，来获取下一个邻接结点的下标</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNextNeighbor</span><span class="hljs-params">(<span class="hljs-type">int</span> v1,<span class="hljs-type">int</span> v2)</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> v2+<span class="hljs-number">1</span>; i &lt; vertexList.size(); i++) &#123;<br>        <span class="hljs-keyword">if</span>(edges[v1][i]&gt;<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">//深度优先遍历算法</span><br><span class="hljs-comment">//i第一次为0</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">boolean</span>[] isVisited,<span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-comment">//首先访问该结点，输出</span><br>    System.out.print(getValueByIndex(i) + <span class="hljs-string">&quot;&gt;&quot;</span>);<br>    <span class="hljs-comment">//将该结点设置为已经访问过</span><br>    isVisited[i] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-comment">//查找结点i的第一个邻接结点</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> getFirstNeighbor(i);<br>    <span class="hljs-keyword">while</span> (w != -<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//返回-1该方法停止获得一条路径</span><br>        <span class="hljs-keyword">if</span>(!isVisited[w])&#123;<br>            dfs(isVisited,w);<br>        &#125;<span class="hljs-comment">//如果w已经被访问，则查找邻接结点的下一个结点</span><br>        w = getNextNeighbor(i,w);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//对dfs进行重载，遍历所有的结点并进行dfs</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//遍历所有的结点进行dfs</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; getNumOfVertex(); i++) &#123;<br>        <span class="hljs-keyword">if</span>(!isVisited[i])&#123;<br>            dfs(isVisited,i);<br>        &#125;<br>    &#125;<br>&#125;<span class="hljs-comment">//&lt;/增加&gt;</span><br></code></pre></td></tr></table></figure><h4 id="（二）图的广度优先遍历"><a href="#（二）图的广度优先遍历" class="headerlink" title="（二）图的广度优先遍历"></a>（二）图的广度优先遍历</h4><p>类似于一个分层搜索的过程，广度优先遍历需要使用一个队列以保持访问过的结点的顺序，以便按这个顺序来访问这些结点的邻接结点。</p><h6 id="实现算法步骤：-1"><a href="#实现算法步骤：-1" class="headerlink" title="实现算法步骤："></a>实现算法步骤：</h6><p>1、访问初始结点v，并标记结点v为已访问</p><p>2、结点v进入队列</p><p>3、队列非空，继续进行，否则结束</p><p>4、出队列，取得头结点u</p><p>5、查找结点u的第一个邻接结点w</p><p>6、若结点u的邻接结点w不存在，则转到步骤3；否则循环执行以下三个步骤：</p><p>6.1若结点w尚未被访问，则访问结点w并标记为已访问。</p><p>6.2结点w入队列</p><p>6.3查找结点u的继w邻接结点后的下一个邻接结点w，转到步骤6</p><h6 id="代码增加-1"><a href="#代码增加-1" class="headerlink" title="代码增加"></a>代码增加</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//对一个结点进行广度优先遍历的方法</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bfs</span><span class="hljs-params">(<span class="hljs-type">boolean</span>[] isVisited,<span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-type">int</span> u ;<span class="hljs-comment">//表示队列头结点对应下标</span><br>    <span class="hljs-type">int</span> w ;<span class="hljs-comment">//领接结点w</span><br>    <span class="hljs-comment">//队列:结点访问顺序记录</span><br>    <span class="hljs-type">LinkedList</span> <span class="hljs-variable">queue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>();<br>    <span class="hljs-comment">//访问结点、输出结点信息</span><br>    System.out.print(getValueByIndex(i) + <span class="hljs-string">&quot;&gt;&quot;</span>);<br>    <span class="hljs-comment">//标记已访问</span><br>    isVisited[i] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-comment">//将结点加入队列</span><br>    queue.addLast(i);<br><br>    <span class="hljs-keyword">while</span> (!queue.isEmpty())&#123;<br>        <span class="hljs-comment">//取出队列的头结点下标</span><br>        u = (Integer) queue.removeFirst();<br>        <span class="hljs-comment">//得到第一个邻结点的下标w</span><br>        w = getFirstNeighbor(u);<br>        <span class="hljs-keyword">while</span> (w != -<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//找到</span><br>            <span class="hljs-keyword">if</span>(!isVisited[w])&#123;<br>                System.out.print(getValueByIndex(w) + <span class="hljs-string">&quot;&gt;&quot;</span>);<br>                <span class="hljs-comment">//标记已经访问</span><br>                isVisited[w] = <span class="hljs-literal">true</span>;<br>                <span class="hljs-comment">//入队</span><br>                queue.addLast(w);<br>            &#125;<br>            <span class="hljs-comment">//以u为前一个结点，找w后面的下一个邻结点</span><br>            w = getNextNeighbor(u,w); <span class="hljs-comment">//体现出我们的广度优先</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//遍历所有结点，都进行广度优先搜索</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bfs</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; getNumOfVertex(); i++) &#123;<br>        <span class="hljs-keyword">if</span>(!isVisited[i])&#123;<br>            bfs(isVisited,i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>基础</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多线程并发基础</title>
    <link href="/2020/04/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80/"/>
    <url>/2020/04/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="1、多线程概述"><a href="#1、多线程概述" class="headerlink" title="1、多线程概述"></a>1、多线程概述</h1><h2 id="一、多线程"><a href="#一、多线程" class="headerlink" title="一、多线程"></a>一、多线程</h2><h3 id="1、什么是进程-什么是线程"><a href="#1、什么是进程-什么是线程" class="headerlink" title="1、什么是进程?什么是线程?"></a>1、什么是进程?什么是线程?</h3><p><strong>进程</strong>是一个<strong>应用程序</strong>(1个进程是一个软件)。</p><p><strong>线程</strong>是一个<strong>进程中的执行场景&#x2F;执行单元</strong>。</p><p><strong>一个进程可以启动多个线程。</strong></p><blockquote><p>对于java程序来说，当在DOS命令窗口中输入:<br>java HelloWorld 回车之后。会先启动<a href="https://so.csdn.net/so/search?q=JVM&spm=1001.2101.3001.7020">JVM</a>，而JVM就是一个进程。<br>JVM再启动一个主线程调用main方法.同时再启动一个<a href="https://so.csdn.net/so/search?q=%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6&spm=1001.2101.3001.7020">垃圾回收</a>线程负责看护，回收垃圾。<br>最起码，现在的java程序中至少有两个线程<a href="https://so.csdn.net/so/search?q=%E5%B9%B6%E5%8F%91&spm=1001.2101.3001.7020">并发</a>，<br>一个是垃圾回收线程，一个是执行main方法的主线程.</p></blockquote><h3 id="2、进程和线程是什么关系-举例"><a href="#2、进程和线程是什么关系-举例" class="headerlink" title="2、进程和线程是什么关系?举例"></a>2、进程和线程是什么关系?举例</h3><blockquote><p>阿里巴巴：进程<br>马云：阿里巴巴的一个线程<br>童文红：阿里巴巴的一个线程</p></blockquote><blockquote><p>京东：进程<br>强东：京东的一个线程<br>妹妹：京东的一个线程</p></blockquote><p>进程可以看做是现实生活中的公司。</p><p>线程可以看做是公司当中的某个员工。</p><p>注意：进程A和进程B的内存独立不共享。（阿里和京东的资源不会共享）<br>魔兽游戏是一个进程<br>酷狗音乐是一个进程<br>这两个进程是独立的，不共享资源。</p><p><strong>线程A和线程B呢?</strong></p><ul><li>在java语言中:<br>线程A和线程B，<strong>堆内存和方法区内存共享</strong>。<br>但是<strong>栈内存独立</strong>，<strong>一个线程一个栈</strong>。</li></ul><p>假设启动10个线程，会有10个栈空间，每个栈和每个栈之间，互不干扰，各自执行各自的，这就是多线程并发。</p><blockquote><p>火车站，可以看做是一个进程。<br>火车站中的每一个售票窗口可以看做是一个线程。<br>我在窗口1购票，你可以在窗口2购票，你不需要等我，我也不需要等你,所以多线程并发可以提高效率。</p></blockquote><p>java中之所以有多线程机制，目的就是为了<strong>提高程序的处理效率</strong>。</p><h3 id="3、使用了多线程机制之后，main方法结束，有可能程序也不会结束。"><a href="#3、使用了多线程机制之后，main方法结束，有可能程序也不会结束。" class="headerlink" title="3、使用了多线程机制之后，main方法结束，有可能程序也不会结束。"></a>3、使用了多线程机制之后，main方法结束，有可能程序也不会结束。</h3><p>因为main方法结束只是主线程结束了，主栈空了，其它的栈(线程)可能还在压栈弹栈。</p><p><img src="/2020/04/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80/e2316e571bfd0faafc85cefc01584e01-1741873098898-61.png" alt="在这里插入图片描述"></p><h2 id="二、多线程并发的理解"><a href="#二、多线程并发的理解" class="headerlink" title="二、多线程并发的理解"></a>二、多线程并发的理解</h2><p><strong>分析一个问题:对于单核的CPU来说，真的可以做到真正的多线程并发吗?</strong></p><p>对于多核的CPU电脑来说，真正的多线程并发是没问题的。<br>4核CPU表示同一一个时间点上，可以真正的有4个进程并发执行。</p><p><strong>什么是真正的多线程并发?</strong><br>t1线程执行t1的。<br>t2线程执行t2的。<br><strong>t1不会影响t2，t2也不会影响t1</strong>.这叫做真正的<strong>多线程并发</strong>。</p><p><strong>单核的CPU表示只有一个大脑</strong>:<br>不能够做到真正的多线程并发，但是可以做到给人一种**”多线程并发”的感觉**。对于单核的CPU来说，在某一个时间点上实际上只能处理一件事情，但是由于CPU的处理速度极快，<strong>多个线程之间频繁切换执行</strong>，跟人来的感觉是:多个事情同时在做!!!<br>线程A:播放音乐<br>线程B:运行魔兽游戏<br>线程A和线程B频繁切换执行，人类会感觉音乐一直在播放，游戏一直在运行,<br>给我们的感觉是同时并发的。</p><blockquote><p>电影院采用胶卷播放电影，一个胶卷一个胶卷播放速度达到一定程度之后，人类的眼睛产生了错觉，感觉是动画的。这说明人类的反应速度很慢，就像一根钢针扎到手上，到最终感觉到疼，这个过程是需要”很长的”时间的，在这个期间计算机可以进行亿万次的循环。所以计算机的执行速度很快。</p></blockquote><h2 id="三、线程的生命周期"><a href="#三、线程的生命周期" class="headerlink" title="三、线程的生命周期"></a>三、线程的生命周期</h2><ul><li>1.新建状态</li><li>2.就绪状态</li><li>3.运行状态</li><li>4.阻塞状态</li><li>5.死亡状态<br><img src="/2020/04/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80/3b9edcf617a6abbb7e985cd1f794e04e-1741872510070-21-1741873099129-80.png" alt="在这里插入图片描述"></li></ul><h1 id="2、实现线程的方式"><a href="#2、实现线程的方式" class="headerlink" title="2、实现线程的方式"></a>2、实现线程的方式</h1><h2 id="1、继承java-lang-Thread-重写run方法"><a href="#1、继承java-lang-Thread-重写run方法" class="headerlink" title="1、继承java.lang.Thread,重写run方法"></a>1、继承java.lang.Thread,重写run方法</h2><p>实现线程的第一种方式：<br><strong>编写一个类直接继承<code>java.lang.Thread</code>,重写run方法。</strong></p><p>怎么<strong>创建线程对象</strong>？<strong>new就行了</strong></p><p>怎么<strong>启动线程</strong>呢？<strong>调用线程对象的<code>start()</code>方法就行</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//这里是一个main方法，这里的代码属于主线程，在主栈中运行。</span><br>        <span class="hljs-comment">//新建一个分支线程对象</span><br>        <span class="hljs-type">MyThead</span> <span class="hljs-variable">myThead</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThead</span>();<br>        <span class="hljs-comment">//启动线程</span><br><br>        <span class="hljs-comment">//myThead.run();//不会启动线程，不会分配新的分支栈。（这种方式就是单线程）</span><br><br>        <span class="hljs-comment">//start()方法的作用是：启动一个分支线程，在JVM中开辟一个新的栈空间，这段代码的任务完成之后，瞬间就结束了。</span><br>        <span class="hljs-comment">//这段代码的任务只是为了开辟一个新的栈空间，只要新的栈空间开辟出来，start()方法就结束了。线程就启动成功了。</span><br>        <span class="hljs-comment">//启动成功的线程会自动调用run方法，并且run方法在分支栈的栈底部（压栈）</span><br>        <span class="hljs-comment">//run方法在分支栈的栈底部，main方法在主栈的底部。run和main是平级的。</span><br>        myThead.start();<span class="hljs-comment">//这行代码是瞬间结束的</span><br>        <span class="hljs-comment">//这里的代码还是运行在主线程中</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;主线程--&gt;&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThead</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;   <span class="hljs-comment">//必须写</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;分支线程--&gt;&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>运行结果：</strong><br><img src="/2020/04/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80/53ec52025df5a5a845399917a5d3ab88-1741873098898-62.png" alt="在这里插入图片描述"></p><p><strong>未注释run()方法的运行结果，此时不是并发：</strong><br><img src="/2020/04/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80/59fa62b7a2f795902bc93bdfa4bbc9c4-1741873098898-63.png" alt="在这里插入图片描述"><br>由上述运行结果发现，有以下特点：<strong>有先有后、又多有少</strong>。</p><h2 id="2、实现java-lang-Runnable接口，实现run方法"><a href="#2、实现java-lang-Runnable接口，实现run方法" class="headerlink" title="2、实现java.lang.Runnable接口，实现run方法"></a>2、实现java.lang.Runnable接口，实现run方法</h2><p>实现线程的第二种方式：<br><strong>编写一个类，实现<code>java.lang.Runnable</code>,重写run方法。</strong></p><p>这种方式实现接口比较常用，因为一个类实现了接口，它还可以去继承其他的类，更灵活。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建一个可运行的对象</span><br>        <span class="hljs-type">MyRunnable</span> <span class="hljs-variable">myRunnable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>();<br>        <span class="hljs-comment">//将可运行的对象封装成一个线程对象</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myRunnable);<br>        <span class="hljs-comment">//启动线程</span><br>        t.start();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;主线程--&gt;&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//这并不是一个线程类，是一个可运行的类。它还不是一个线程。</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;分支线程--&gt;&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3、采用匿名内部类的方式"><a href="#3、采用匿名内部类的方式" class="headerlink" title="3、采用匿名内部类的方式"></a>3、采用匿名内部类的方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//创建线程对象，采用匿名内部类的方式。</span><br>        <span class="hljs-comment">//这是通过一个没有名字的类，new出来的对象。</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;t线程--&gt;&quot;</span> + i);<br>                &#125;<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">//启动线程</span><br>        t.start();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;主线程--&gt;&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4、实现Callable接口（JDK8新特性）"><a href="#4、实现Callable接口（JDK8新特性）" class="headerlink" title="4、实现Callable接口（JDK8新特性）"></a>4、实现Callable接口（JDK8新特性）</h2><p>该方法<strong>效率较低</strong>，因为在获取线程的执行结果的时候，当前线程受阻塞。但是可以拿到<strong>线程的返回结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.Callable;<br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutionException;<br><span class="hljs-keyword">import</span> java.util.concurrent.FutureTask;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest12</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>        <span class="hljs-comment">//第一步：创建一个“未来任务类”接口</span><br>        <span class="hljs-type">FutureTask</span> <span class="hljs-variable">task</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Callable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<span class="hljs-comment">//call方法就相当于run方法。只不过这个有返回值</span><br>                <span class="hljs-comment">//线程执行一个任务，执行之后可能会有一个执行结果</span><br>                <span class="hljs-comment">//模拟执行</span><br>                System.out.println(<span class="hljs-string">&quot;call method begin!&quot;</span>);<br>                Thread.sleep(<span class="hljs-number">1000</span> * <span class="hljs-number">10</span>);<br>                System.out.println(<span class="hljs-string">&quot;call method end!&quot;</span>);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br><br>                <span class="hljs-keyword">return</span> a + b;<span class="hljs-comment">//自动装箱（300结果变成Integer）</span><br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">//创建线程对象</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(task);<br><br>        <span class="hljs-comment">//启动线程</span><br>        t.start();<br><br>        <span class="hljs-comment">//这里是main方法，这是在主线程中</span><br>        <span class="hljs-comment">//在主线程中，怎么获取t线程的返回结果？</span><br>        <span class="hljs-comment">//get发方法的执行会导致“当前线程阻塞”</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> task.get();<br>        System.out.println(<span class="hljs-string">&quot;线程执行结果：&quot;</span> + o);<br><br>        <span class="hljs-comment">//main方法这里的程序想执行必须等待get()方法的结束</span><br>        <span class="hljs-comment">//而get()方法是为了拿另一个线程的执行结果</span><br>        <span class="hljs-comment">//另一个线程执行是需要时间的</span><br>        System.out.println(<span class="hljs-string">&quot;hello world!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：<br><img src="/2020/04/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80/8a098a5a299d952e3c50c3eca3ad9301-1741873098898-64.png" alt="在这里插入图片描述"></p><h1 id="3、获取、修改线程对象的名字"><a href="#3、获取、修改线程对象的名字" class="headerlink" title="3、获取、修改线程对象的名字"></a>3、获取、修改线程对象的名字</h1><p><strong>获取当前线程对象</strong>：<code>static Thread currentThread()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> Thread.currentThread();<span class="hljs-comment">//返回值t就是当前线程</span><br><span class="hljs-number">1</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建线程对象</span><br>        <span class="hljs-type">MyThead2</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThead2</span>();<br>        <span class="hljs-comment">//设置线程的名字</span><br>        t.setName(<span class="hljs-string">&quot;t1&quot;</span>);<br>        <span class="hljs-comment">//获取线程的名字</span><br>        t.getName();<br>        <span class="hljs-comment">//启动线程</span><br>        t.start();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">tName</span> <span class="hljs-operator">=</span> t.getName();<br>        System.out.println(tName);<br><br><br>        <span class="hljs-type">MyThead2</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThead2</span>();<br>        t2.setName(<span class="hljs-string">&quot;t2&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">t2Name</span> <span class="hljs-operator">=</span> t2.getName();<br>        System.out.println(t2Name);<br><br>        t2.start();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span>  <span class="hljs-title class_">MyThead2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>        <span class="hljs-comment">//currentThread就是当前线程对象。</span><br>        <span class="hljs-comment">//当t1线程执行run方法，那么这当前线程就是t1；</span><br>        <span class="hljs-comment">//当t2线程执行run方法，那么这当前线程就是t2；</span><br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">currentThread</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>            System.out.println( currentThread.getName() + <span class="hljs-string">&quot;--&gt;&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行截图：<br><img src="/2020/04/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80/913399e7c26ebde95016a530268388a9-1741873098898-65.png" alt="在这里插入图片描述"></p><p><strong>获取线程对象的名字</strong>：<code>String name = 线程对象.getName();</code></p><p><strong>修改线程对象的名字</strong>：<code>线程对象.setName(&quot;线程名字&quot;);</code></p><p>当线程没有设置名字的时候，<strong>默认的名字有什么规律</strong>？<br>Thread-0；<br>Thread-1；<br>Thread-2…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建线程对象</span><br>        <span class="hljs-type">MyThead2</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThead2</span>();<br>        <span class="hljs-comment">//设置线程的名字</span><br>        t.setName(<span class="hljs-string">&quot;tttt&quot;</span>);<br>        <span class="hljs-comment">//获取线程的名字</span><br>        t.getName();<br>        <span class="hljs-comment">//启动线程</span><br>        t.start();<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">tName</span> <span class="hljs-operator">=</span> t.getName();<br>        System.out.println(tName);<span class="hljs-comment">//如果不设置线程的名字就是：Thread-0</span><br><br>        <span class="hljs-type">MyThead2</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThead2</span>();<br>        System.out.println(t2.getName());<span class="hljs-comment">//Thread-1</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span>  <span class="hljs-title class_">MyThead2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;分支线程--&gt;&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：<br><img src="/2020/04/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80/b1ef7e9b4125edf7c7a45eebc2d38ca1-1741873098898-66.png" alt="在这里插入图片描述"></p><h1 id="4、线程中的sleep方法详解"><a href="#4、线程中的sleep方法详解" class="headerlink" title="4、线程中的sleep方法详解"></a>4、线程中的sleep方法详解</h1><h2 id="1、关于线程的sleep方法"><a href="#1、关于线程的sleep方法" class="headerlink" title="1、关于线程的sleep方法"></a>1、关于线程的sleep方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">(<span class="hljs-type">long</span> mills)</span><br></code></pre></td></tr></table></figure><ul><li>1、<strong>静态方法</strong>：Thread.sleep(1000);</li><li>2、参数是<strong>毫秒</strong></li><li>3、作用：<strong>让当前线程进入休眠，进入“阻塞”状态，放弃占有CPU时间片，让给其他线程使用</strong>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest06</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//让当前线程进入休眠，睡眠5秒</span><br>        <span class="hljs-comment">//当前线程是主线程！！!</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>*<span class="hljs-number">5</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br><span class="hljs-comment">//5秒之后执行这里的代码</span><br>        System.out.println(<span class="hljs-string">&quot;hello world!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2、分析哪个线程休眠的"><a href="#2、分析哪个线程休眠的" class="headerlink" title="2、分析哪个线程休眠的"></a>2、分析哪个线程休眠的</h2><p>以下代码是让<strong>main方法休眠</strong>的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest06</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>        t.setName(<span class="hljs-string">&quot;t&quot;</span>);<br>        t.start();<br>        <span class="hljs-comment">//调用sleep方法</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//</span><br>            t.sleep(<span class="hljs-number">1000</span>*<span class="hljs-number">5</span>);<span class="hljs-comment">//在执行过程中还是会被转换为：Thread.sleep(1000*5);</span><br>            <span class="hljs-comment">//这行代码的作用是：让当前的线程进入休眠，也就是说说main线程进入休眠。</span><br>            <span class="hljs-comment">//这样代码出现在main方法中，main线程休眠。</span><br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;hello world!&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;--&gt;&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3、终止线程的休眠"><a href="#3、终止线程的休眠" class="headerlink" title="3、终止线程的休眠"></a>3、终止线程的休眠</h2><p>sleep睡眠太久了，如果希望半道上醒来，可以使用<code>interrupt()</code>方法<br>注意：这个<strong>不是终断线程的执行，是终止线程的睡眠</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest07</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunable2</span>());<br>        t.setName(<span class="hljs-string">&quot;t&quot;</span>);<br>        t.start();<br><br>        <span class="hljs-comment">//希望5秒以后，t线程醒来（5秒以后主线程的活干完了）</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>*<span class="hljs-number">5</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-comment">//终断t线程的睡眠（这种终断睡眠的方式依靠了java的异常处理机制。）</span><br>        t.interrupt();<span class="hljs-comment">//干扰，一盆冷水过去！！</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunable2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-comment">//重点：run()当中的异常不能throws，只能try..catch</span><br>    <span class="hljs-comment">//因为run()方法在父类中没有抛出异常，子类不能比父类抛出更多异常。</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;--&gt; begin&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//睡眠1年</span><br>            Thread.sleep(<span class="hljs-number">1000</span>*<span class="hljs-number">60</span>*<span class="hljs-number">60</span>*<span class="hljs-number">24</span>*<span class="hljs-number">365</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            <span class="hljs-comment">//打印异常信息</span><br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-comment">//一年之后才会执行这里</span><br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;--&gt; end&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2020/04/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80/3cbc207d6f32e4ad577faf61e754b084-1741873098898-67.png" alt="在这里插入图片描述"></p><h2 id="4、终止线程"><a href="#4、终止线程" class="headerlink" title="4、终止线程"></a>4、终止线程</h2><p><strong>强行终止线程</strong></p><p><code>stop()</code>方法，有一个很大的缺点：<strong>容易丢失数据</strong>。因为这种方式是直接将线程杀死了。<br><strong>线程没有保存的数据将会丢失。不建议使用。</strong></p><p><strong>合理的终止线程</strong></p><p><strong>打一个boolean标记</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest08</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>();<br>        <span class="hljs-type">MyRunnable4</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable4</span>();<br>        t.setName(<span class="hljs-string">&quot;t&quot;</span>);<br>        t.start();<br><br>        <span class="hljs-comment">//模拟5秒</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span> * <span class="hljs-number">5</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-comment">//终止线程</span><br>        <span class="hljs-comment">//你想要什么时候终止t的执行，那么你把标记修改为false，就结束了。</span><br>        r.run = <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable4</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><br>    <span class="hljs-comment">//打一个boolean标记</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">run</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (run)&#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;--&gt;&quot;</span> + i);<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">1000</span> );<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br><br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//return就结束了，在结束之前还有什么没有保存的。</span><br>                <span class="hljs-comment">//可以在这里保存</span><br>                <span class="hljs-comment">//save....</span><br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="5、线程调度、线程优先级、线程让位、线程合并"><a href="#5、线程调度、线程优先级、线程让位、线程合并" class="headerlink" title="5、线程调度、线程优先级、线程让位、线程合并"></a>5、线程调度、线程优先级、线程让位、线程合并</h1><h2 id="1、关于线程的调度"><a href="#1、关于线程的调度" class="headerlink" title="1、关于线程的调度"></a>1、关于线程的调度</h2><h3 id="1-1常见的线程调度模型有哪些"><a href="#1-1常见的线程调度模型有哪些" class="headerlink" title="1.1常见的线程调度模型有哪些? ."></a>1.1常见的线程调度模型有哪些? .</h3><ul><li><strong>抢占式调度模型</strong>:<br>哪个线程的<strong>优先级比较高</strong>，抢到的<strong>CPU时间片的概率就高</strong>一些&#x2F;多一些。<br><strong>java采用的就是抢占式调度模型</strong>。</li><li><strong>均分式调度模型:</strong><br>平均分配CPU时间片。<strong>每个线程占有的CPU时间片时间长度一样</strong>。<br>平均分配，一切平等。<br>有一些编程语言，线程调度模型采用的是这种方式。</li></ul><h3 id="1-2-java中提供了哪些方法是和线程调度有关系的呢"><a href="#1-2-java中提供了哪些方法是和线程调度有关系的呢" class="headerlink" title="1.2 java中提供了哪些方法是和线程调度有关系的呢?"></a>1.2 java中提供了哪些方法是和线程调度有关系的呢?</h3><ul><li><strong>1、实例方法:</strong><br><code>void setpriority (int newPriority)</code>：<strong>设置线程的优先级</strong><br><code>int getPriority()</code>：<strong>获取线程优先级</strong><br>最低优先级1<br>默认优先级是5<br>最高优先级10</li><li><strong>2、静态方法:</strong><br><code>static void yield()</code>：<strong>让位方法</strong>：<strong>暂停当前正在执行的线程对象，并执行其他线程</strong></li></ul><p><code>yield()</code>方法不是阻塞方法。让当前线程让位，让给其它线程使用。<br><code>yield()</code>方法的执行会让当前线程从**“运行状态”<strong>回到</strong>“就绪状态”**。<br>注意：在回到就绪之后，有可能还会再次抢到CPU</p><ul><li><strong>3、实例方法：</strong><br><code>void join()</code> ：<strong>合并线程</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSome</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">Mythread2</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread2</span>();<br>t,join();<span class="hljs-comment">//当前线程进入阻塞，t线程执行，知道t线程结束。当前线程才可以继续</span><br>&#125; <br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2、线程优先级"><a href="#2、线程优先级" class="headerlink" title="2、线程优先级"></a>2、线程优先级</h2><p><code>int getPriority()</code>：<strong>获取线程优先级</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest09</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;最高优先级&quot;</span> + Thread.MAX_PRIORITY);<br>        System.out.println(<span class="hljs-string">&quot;最低优先级&quot;</span> + Thread.MIN_PRIORITY);<br>        System.out.println(<span class="hljs-string">&quot;默认优先级&quot;</span> + Thread.NORM_PRIORITY);<br><br>        <span class="hljs-comment">//获取当前线程对象，获取当前线程的优先级</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">currentThread</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>        System.out.println(currentThread.getName() + <span class="hljs-string">&quot;线程的默认优先级为：&quot;</span> + currentThread.getPriority());<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable5</span>());<br>        t.setName(<span class="hljs-string">&quot;t&quot;</span>);<br>        t.start();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable5</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//获取线程优先级</span><br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;线程的默认优先级为&quot;</span> + Thread.currentThread().getPriority());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2020/04/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80/7eb6d91354343f124f3cf2d938672b74-1741873098899-68.png" alt="在这里插入图片描述"><br><code>void setpriority (int newPriority)</code>：<strong>设置线程的优先级</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest09</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//设置主线程优先级为1</span><br>        Thread.currentThread().setPriority(<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//获取当前线程对象，获取当前线程的优先级</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">currentThread</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable5</span>());<br>        t.setName(<span class="hljs-string">&quot;t&quot;</span>);<br>        t.setPriority(<span class="hljs-number">10</span>);<br>        t.start();<br><br>        <span class="hljs-comment">//优先级较高的，只是抢到的CPU的时间片比较多一些。</span><br>        <span class="hljs-comment">//大概率方向更偏向于优先级比较高的。</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;--&gt;&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable5</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;--&gt;&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2020/04/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80/0d8ab223fbabc6dd48cacfb04f566443-1741873098899-69.png" alt="在这里插入图片描述"></p><h2 id="3、线程让位"><a href="#3、线程让位" class="headerlink" title="3、线程让位"></a>3、线程让位</h2><p><strong>让位：值当前的线程暂停，回到就绪状态，让给其他线程。</strong><br>静态方法：<code>Thread.yield();</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest09</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable5</span>());<br>        t.setName(<span class="hljs-string">&quot;t&quot;</span>);<br>        t.start();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;--&gt;&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable5</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10000</span>; i++) &#123;<br>            <span class="hljs-comment">//每100个让位一次</span><br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>)&#123;<br>                Thread.<span class="hljs-keyword">yield</span>();<br>            &#125;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;--&gt;&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4、线程合并"><a href="#4、线程合并" class="headerlink" title="4、线程合并"></a>4、线程合并</h2><p>线程的合并的含义就是<strong>将几个并行线程的线程合并为1个单线程执行</strong>。应用场景应该是<strong>一个线程必须等待另一个线程执行完毕才能使用join方法。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest09</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        System.out.println(<span class="hljs-string">&quot;main begin&quot;</span>);<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable5</span>());<br>        t.setName(<span class="hljs-string">&quot;t&quot;</span>);<br>        t.start();<br><br>        <span class="hljs-comment">//合并线程</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            t.join();<span class="hljs-comment">//t合并到当前的线程中，当前线程受阻塞，t线程执行直到结束再继续执行main线程。</span><br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;main over&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable5</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;--&gt;&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2020/04/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80/0ff1f1210a34ebf3baea4eeee9efd6b6-1741873098899-70.png" alt="在这里插入图片描述"></p><h1 id="6、synchronized、死锁详解"><a href="#6、synchronized、死锁详解" class="headerlink" title="6、synchronized、死锁详解"></a>6、synchronized、死锁详解</h1><h2 id="1、synchronized的三种应用方式"><a href="#1、synchronized的三种应用方式" class="headerlink" title="1、synchronized的三种应用方式"></a>1、synchronized的三种应用方式</h2><p>synchronized关键字最主要有以下3种应用方式</p><ul><li>修饰<strong>实例方法</strong>，作用于当前<strong>实例加锁</strong>，进入同步代码前要获得<strong>当前实例的锁</strong></li><li>修饰<strong>静态方法</strong>，作用于当前<strong>类对象加锁</strong>，进入同步代码前要获得<strong>当前类对象的锁</strong></li><li>修饰<strong>代码块</strong>，<strong>指定加锁对象</strong>，对给定对象加锁，进入同步代码库前要获得<strong>给定对象的锁</strong>。</li></ul><h2 id="2、同步代码块-灵活"><a href="#2、同步代码块-灵活" class="headerlink" title="2、同步代码块(灵活)"></a>2、同步代码块(灵活)</h2><p><strong>线程同步</strong>机制的语法是：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">synchronized</span><span class="hljs-params">(同步锁)</span></span><br>&#123;<br>     <span class="hljs-comment">//线程同步代码块</span><br><br>&#125; <br></code></pre></td></tr></table></figure><p><code>synchronized</code>后面的小括号中传的这个 <strong>“数据”是相当关键</strong> 的<br>这个数据必须是<strong>多线程共享</strong>的数据。才能达到线程排队。</p><p><strong><code>（）</code>中具体写什么？</strong><br>那要看想<strong>让哪些线程同步</strong>。<br>假设t1、t2、t3、t4、t5，有5个线程。现在只希望t1、t2、t3排队，t4、t5不需要排队。<br>这时就要在<code>()</code>中写一个t1、t2、t3共享的对象，而这个对象对于t4、t5来说不是共享的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//this,当前实例对象锁</span><br><span class="hljs-keyword">synchronized</span>(<span class="hljs-built_in">this</span>)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">1000000</span>;j++)&#123;<br>        i++;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//class对象锁</span><br><span class="hljs-keyword">synchronized</span>(AccountingSync.class)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">1000000</span>;j++)&#123;<br>        i++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>在java语言中,任何一个对象都有“一把锁”,其实这把锁就是标记。( 只是把它叫做锁。)<br>100个对象, 10把锁。1个对象1把锁。</strong></p><p>线程同步的代码的执行原理?</p><p>1、假设t1和t2线程并发,开始执行以下代码的时候，肯定有一个先一个后。</p><p>2、假设t1先执行了,遇到了<code>synchronized</code> ,这个时候自动找“后面共享对象”的对象锁,找到之后，并占有这把锁，然后执行同步代码块中的程序，在程序执行过程中一直都是占有这把锁的。直到同步代码块代码结束,这把锁才会释放。</p><p>3、假设t1已经占有这把锁,此时2也遇到<code>synchronized</code>关键字,也会去占有后面共享对象的这把锁,结果这把锁被t1占有, t2只能在同步代码块外面等待t1的结束,直到t1把同步代码块执行结束了, t1会归还这把锁，此时t2终于等到这把锁,然后t2占有这把锁之后，进入同步代码块执行程序。</p><p>这样就达到了线程排队。</p><h2 id="3、synchronized作用于实例方法"><a href="#3、synchronized作用于实例方法" class="headerlink" title="3、synchronized作用于实例方法"></a>3、synchronized作用于实例方法</h2><p>被修饰的方法称为<strong>同步方法</strong>，其作用的<strong>范围是整个方法</strong>，作用的<strong>对象是调用这个方法的对象</strong>；</p><p>如果<strong>多个线程访问同一个对象的实例变量</strong>，可能出现<strong>非线程安全</strong>问题。</p><p>使用<code>synchronized</code>修饰的方法,就叫做<strong>同步方法</strong>,保证<strong>A线程执行</strong>该方法的时候 <strong>,其他线程只能在方法外等着</strong>.且<strong>共享对象一定是this</strong>，并且<strong>同步代码块是整个方法体</strong>。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">public</span>  <span class="hljs-type">void</span>  <span class="hljs-title">doWork</span><span class="hljs-params">()</span></span>&#123;<br><br><span class="hljs-comment">//  需要同步操作的代码</span><br>&#125;<br><span class="hljs-number">1234</span><br></code></pre></td></tr></table></figure><p><strong>创建了一个AccountingSync对象:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountingSync</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-comment">//共享资源(临界资源)</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * synchronized 修饰实例方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">increase</span><span class="hljs-params">()</span>&#123;<br>        i++;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">1000000</span>;j++)&#123;<br>            increase();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        AccountingSync instance=<span class="hljs-keyword">new</span> <span class="hljs-title class_">AccountingSync</span>();<br>        Thread t1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(instance);<br>        Thread t2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(instance);<br>        t1.start();<br>        t2.start();<br>        t1.join();<br>        t2.join();<br>        System.out.println(i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2020/04/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80/f941b2dfd474496928897dbf21521f57-1741873098899-71.png" alt="在这里插入图片描述"></p><h2 id="4、synchronized作用于静态方法"><a href="#4、synchronized作用于静态方法" class="headerlink" title="4、synchronized作用于静态方法"></a>4、synchronized作用于静态方法</h2><p>表示找<strong>类锁</strong>。类锁永远只有一把。就算创建了100个对象，那类锁也只有一把。</p><ul><li>对象锁：1个对象1把锁，100个对象100把锁。</li><li>类锁：100个对象，也可能只是1把类锁。</li></ul><p>当synchronized作用于静态方法时，其锁就是当前类的class对象锁。由于静态成员不专属于任何一个实例对象，是类成员，因此通过class对象锁可以控制静态 成员的并发操作。需要注意的是如果一个线程A调用一个实例对象的非static synchronized方法，而线程B需要调用这个实例对象所属类的静态 synchronized方法，是允许的，不会发生互斥现象，因为访问静态 synchronized 方法占用的锁是当前类的class对象，而访问非静态 synchronized 方法占用的锁是当前实例对象锁，看如下代码</p><p><strong>创建了两个AccountingSyncClass对象：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountingSyncClass</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 作用于静态方法,锁是当前class对象,也就是</span><br><span class="hljs-comment">     * AccountingSyncClass类对应的class对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">increase</span><span class="hljs-params">()</span>&#123;<br>        i++;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">1000000</span>;j++)&#123;<br>            increase();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-comment">//new新实例</span><br>        Thread t1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AccountingSyncClass</span>());<br>        <span class="hljs-comment">//new心事了</span><br>        Thread t2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AccountingSyncClass</span>());<br>        <span class="hljs-comment">//启动线程</span><br>        t1.start();t2.start();<br><br>        t1.join();t2.join();<br>        System.out.println(i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2020/04/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80/94a5c395bb8f9df7cd308455f496b970-1741873098899-72.png" alt="在这里插入图片描述"><br>由于synchronized关键字修饰的是静态increase方法，与修饰实例方法不同的是，其锁对象是当前类的class对象。注意代码中的increase4Obj方法是实例方法，其对象锁是当前实例对象，如果别的线程调用该方法，将不会产生互斥现象，毕竟锁对象不同，但我们应该意识到这种情况下可能会发现<a href="https://so.csdn.net/so/search?q=%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8&spm=1001.2101.3001.7020">线程安全</a>问题(操作了共享静态变量i)。</p><h2 id="5、Java三大变量的线程安全"><a href="#5、Java三大变量的线程安全" class="headerlink" title="5、Java三大变量的线程安全"></a>5、Java三大变量的线程安全</h2><ul><li><strong>实例变量:在堆中</strong>。</li><li><strong>静态变量:在方法区</strong>。</li><li><strong>局部变量:在栈中</strong>。</li></ul><p>以上三大变量中:</p><p><strong>局部变量</strong>永远都<strong>不会存在线程安全</strong>问题。因为<strong>局部变量不共享</strong>。(一个线程一个栈。)<br>局部变量在栈中。所以局部变量永远都不会共享。</p><p><strong>实例变量</strong>在堆中，<strong>堆只有1个</strong>。</p><p><strong>静态变量</strong>在方法区中，<strong>方法区只有1个</strong>。<br><strong>堆和方法区都是多线程共享</strong>的，所以可能存在线程安全问题。</p><p><strong>局部变量+常量：不会有线程安全问题。<br>成员变量：可能会有线程安全问题。</strong></p><h2 id="6、死锁概述"><a href="#6、死锁概述" class="headerlink" title="6、死锁概述"></a>6、<a href="https://so.csdn.net/so/search?q=%E6%AD%BB%E9%94%81&spm=1001.2101.3001.7020">死锁</a>概述</h2><p><img src="/2020/04/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80/0d186630f8de6d3e994995cde70ff527-1741873098899-73.png" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest10</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread1</span>(o1,o2);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread2</span>(o1,o2);<br>        t1.start();<br>        t2.start();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span>  <span class="hljs-title class_">MyThread1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    Object o1;<br>    Object o2;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread1</span><span class="hljs-params">(Object o1,Object o2)</span>&#123;<br>        <span class="hljs-built_in">this</span>.o1 = o1;<br>        <span class="hljs-built_in">this</span>.o2 = o2;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">synchronized</span> (o1)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">synchronized</span>(o2)&#123;<br><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    Object o1;<br>    Object o2;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread2</span><span class="hljs-params">(Object o1,Object o2)</span>&#123;<br>        <span class="hljs-built_in">this</span>.o1 = o1;<br>        <span class="hljs-built_in">this</span>.o2 = o2;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">synchronized</span>(o2)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">synchronized</span> (o1)&#123;<br><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2020/04/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80/49d424b12963f44e68882b2719f2b26b-1741873098899-74.png" alt="在这里插入图片描述"><br>一直是这样，synchronized在开发中最好不要嵌套使用。一不小心就会导致死锁现象的发生。</p><h1 id="7、守护线程和定时器"><a href="#7、守护线程和定时器" class="headerlink" title="7、守护线程和定时器"></a>7、守护线程和定时器</h1><h2 id="一、守护线程"><a href="#一、守护线程" class="headerlink" title="一、守护线程"></a>一、守护线程</h2><h3 id="1、守护线程概述"><a href="#1、守护线程概述" class="headerlink" title="1、守护线程概述"></a>1、守护线程概述</h3><p>Java语言中线程分为两大类：</p><ul><li>一类是：<strong>用户线程</strong></li><li>一类是：<strong>守护线程（后台线程）</strong></li></ul><p>其中具有代表性的就是：<strong>垃圾回收线程（守护线程）</strong>、<strong>主线程main（用户线程）</strong></p><p><strong>守护线程的特点：</strong><br>一般守护线程是一个死循环，所有的用户只要结束，守护线程自动结束。</p><p><strong>守护线程用在什么地方呢？</strong><br>每天00:00的时候系统数据自动备份。这个需要使用到定时器，并且我们可以将定时器设置为守护线程。一直在那里看着，每到00:00的时候就备份一次。所有的用户线程如果结束了，守护线程自动退出，没有必要进行数据备份了。</p><h3 id="2、实现守护线程"><a href="#2、实现守护线程" class="headerlink" title="2、实现守护线程"></a>2、实现守护线程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java">在这里插入代码片<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest11</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BakDataThread</span>();<br>        t.setName(<span class="hljs-string">&quot;备份数据的线程&quot;</span>);<br><br>        <span class="hljs-comment">//启动线程之前，将线程设置为守护线程</span><br>        t.setDaemon(<span class="hljs-literal">true</span>);<br>        t.start();<br><br>        <span class="hljs-comment">//主线程：主线程是用户线程</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;--&gt;&quot;</span> + i) ;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BakDataThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;--&gt;&quot;</span> + (++i));<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>运行结果：主线程结束，守护线程就结束，即使是个死循环。</strong></p><p><img src="/2020/04/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80/2e7db1ceae2877ed85629fe05d37d165-1741873098899-75.png" alt="在这里插入图片描述"></p><h2 id="二、定时器"><a href="#二、定时器" class="headerlink" title="二、定时器"></a>二、定时器</h2><h3 id="1、定时器概述"><a href="#1、定时器概述" class="headerlink" title="1、定时器概述"></a>1、定时器概述</h3><p>定时器的作用:<br><strong>间隔特定的时间，执行特定的程序。</strong></p><blockquote><p>例如每周要进行银行账户的总账操作。<br>每天要进行数据的备份操作。</p></blockquote><p>在实际的开发中，每隔多久执行一-段特定的程序，这种需求是很常见的,<br>那么在java中其实可以采用多种方式实现:</p><ul><li>可以使用sleep方法，睡眠，设置睡眠时间，没到这个时间点醒来，执行任务。这种方式是最原始的定时器。(比较low)</li><li>在java的类库中已经写好了一个定时器: <code>java. util.Timer</code>,可以直接拿来用。不过，这种方式在目前的开发中也很少用，因为现在有很多高级框架都是支持定时任务的。</li><li>在实际的开发中，目前使用较多的是<strong>Spring框架中提供的springTask</strong>框架,<br>这个框架只要进行简单的配置，就可以完成定时器的任务。</li></ul><h3 id="2、实现定时器"><a href="#2、实现定时器" class="headerlink" title="2、实现定时器"></a>2、实现定时器</h3><p><code>timer.schedule(定时任务，第一次执行时间，间隔多久执行一次);</code><br><strong>也可以使用匿名内部类设定定时任务</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.Timer;<br><span class="hljs-keyword">import</span> java.util.TimerTask;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TimerTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//创建定时器对象</span><br>        <span class="hljs-type">Timer</span> <span class="hljs-variable">timer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Timer</span>();<br>        <span class="hljs-comment">//Timer timer = new Timer(true);//守护线程的方式</span><br><br>        <span class="hljs-comment">//指定定时任务</span><br>        <span class="hljs-comment">//timer.schedule(定时任务，第一次执行时间，间隔多久执行一次);</span><br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">firstTime</span> <span class="hljs-operator">=</span> sdf.parse(<span class="hljs-string">&quot;2021-3-17 11:24:30&quot;</span>);<br>        timer.schedule(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LogTimerTask</span>(),firstTime,<span class="hljs-number">1000</span>*<span class="hljs-number">10</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//编写一个类</span><br><span class="hljs-comment">//假设这是一个记录日志的定时任务</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LogTimerTask</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TimerTask</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//编写需要执行的任务就行了。</span><br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">strTime</span> <span class="hljs-operator">=</span> sdf.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        System.out.println(strTime +<span class="hljs-string">&quot;:成功完成第一次数据备份！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：<br><img src="/2020/04/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80/2c418d3382258dbb3533d75f4bc4b183-1741873098899-76.png" alt="在这里插入图片描述"></p><h1 id="8、wait和notify、生产者和消费者模式"><a href="#8、wait和notify、生产者和消费者模式" class="headerlink" title="8、wait和notify、生产者和消费者模式"></a>8、wait和notify、生产者和消费者模式</h1><h2 id="1、关于Object类中的wait和notify方法"><a href="#1、关于Object类中的wait和notify方法" class="headerlink" title="1、关于Object类中的wait和notify方法"></a>1、关于<a href="https://so.csdn.net/so/search?q=Object%E7%B1%BB&spm=1001.2101.3001.7020">Object类</a>中的wait和notify方法</h2><p>即<strong>生产者和消费者模式。</strong></p><ul><li>第一：wait和notify方法<strong>不是线程对象</strong>的方法，是java中<strong>任何一个java对象</strong>都有的方法，因为这两个方式是<strong>Object类中自带</strong>的。<br>wait方法和notify方法不是通过线程对象调用的，<code>t.wait</code>、<code>t.notify</code>都是不对的</li><li>第二：wait方法的作用？</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span>  <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>;<br>o.wait();<br></code></pre></td></tr></table></figure><p>表示：<strong>让正在o对象上活动的线程进入等待状态</strong>，无限期等待，直到<strong>被唤醒</strong>为止。<code>o.wait();</code>方法的调用，会让“当前线程（正在o对象上活动的线程）”进入等待状态。</p><ul><li>第三：notify()方法的作用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>;<br>o.notify();<br></code></pre></td></tr></table></figure><p>表示：唤醒正在o对象上等待的线程。</p><p>还有一个<code>notifyAll()</code>方法：唤醒o对象上处于等待的所有下线程<br><img src="/2020/04/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80/51e831bf947e2098a66e2dc5a68886a2-1741873098899-77.png" alt="在这里插入图片描述"></p><h2 id="2、生产者和消费者模式"><a href="#2、生产者和消费者模式" class="headerlink" title="2、生产者和消费者模式"></a>2、生产者和消费者模式</h2><p><img src="/2020/04/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80/732db84baaa0286329d91de3ad19e194-1741873098899-78.png" alt="在这里插入图片描述"><br>使用wait方法和<a href="https://so.csdn.net/so/search?q=notify&spm=1001.2101.3001.7020">notify</a>方法实现“生产者和消费者模式”</p><p>什么是生产者和消费者模式？</p><blockquote><p><strong>生产线程负责生产，消费线程负责消费</strong>。<br>生产线程和消费线程要达到<strong>均衡</strong>。<br>这是一种特殊的业务需求,在这种特殊的情况下需要使用wait方法和notify方法。</p></blockquote><ul><li>wait和notify方法<strong>不是线程对象</strong>的方法,是<strong>普通java对象都有</strong>的方法。</li><li>wait方法和notify方法建立在线程同步的基础之上。因为多线程要同时操作一个仓库。有<strong>线程安全问题</strong>。</li><li>wait方法作用:<code>o. wait()</code>让正在o对象上活动的线程t进入<strong>等待状态</strong>，并且<strong>释放掉t线程之前占有的o对象的锁</strong>。</li><li>notify方法作用:<code>o.notify()</code>让正在o对象上等待的线程唤醒,<strong>只是通知</strong>,不会<strong>释放o对象上之前占有的锁</strong>。</li></ul><p>模拟这样一个需求:<br>仓库我们采用list集合。<br>List集合中假设只能存储一个元素。<br>1个元素就表示仓库满了。<br>如果List集合中元素个数是0 ,就表示仓库空了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest13</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建一个仓库对象，共享的</span><br>        <span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        <span class="hljs-comment">//创建两个线程对象</span><br>        <span class="hljs-comment">//生产者线程</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Produce</span>(list));<br>        <span class="hljs-comment">//消费者线程</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>(list));<br><br>        t1.setName(<span class="hljs-string">&quot;生产者线程&quot;</span>);<br>        t2.setName(<span class="hljs-string">&quot;消费者线程&quot;</span>);<br><br>        t1.start();<br>        t2.start();<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">//生产线程</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Produce</span> <span class="hljs-keyword">implements</span>  <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-comment">//仓库</span><br>    <span class="hljs-keyword">private</span> List list;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Produce</span><span class="hljs-params">(List list)</span>&#123;<br>        <span class="hljs-built_in">this</span>.list= list;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//一直生产(使用死循环来模拟一直生产)</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (list) &#123;<br>                <span class="hljs-keyword">if</span> (list.size() &gt; <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//大于0，说明仓库中已经有1个元素了</span><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-comment">//当前线程进入等待状态，并且释放Producer之前占有的list集合的锁</span><br>                        list.wait();<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br>                <span class="hljs-comment">//程序进行到这里，说明仓库是空的，可以生产</span><br>                <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>                list.add(obj);<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;--&gt;&quot;</span> + obj);<br><br>                <span class="hljs-comment">//唤醒消费者进行消费</span><br>                list.notify();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//消费线程</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Consumer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-comment">//仓库</span><br>    <span class="hljs-keyword">private</span> List list;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Consumer</span><span class="hljs-params">(List list)</span>&#123;<br>        <span class="hljs-built_in">this</span>.list= list;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//一直消费</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (list)&#123;<br>                <span class="hljs-keyword">if</span> (list.size() == <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-comment">//仓库已经空了</span><br>                    <span class="hljs-comment">//释放掉Consumer之前占有的锁</span><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        list.wait();<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br>                <span class="hljs-comment">//程序能够进行到此处说明仓库中有数据，进行消费。</span><br>                <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> list.remove(<span class="hljs-number">0</span>);<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;--&gt;&quot;</span> + obj);<br><br>                <span class="hljs-comment">//唤醒生产者生产</span><br>                list.notify();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>生产一个消费一个的运行结果：<br><img src="/2020/04/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80/e1772d28bc66a79d993fb52390c5d755-1741873098899-79.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>并发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>并发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JAVA基础知识笔记</title>
    <link href="/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<p>一个很好的在线运行java的环境</p><p><a href="https://www.bejson.com/runcode/java/">https://www.bejson.com/runcode/java/</a></p><h1 id="一、java基础知识"><a href="#一、java基础知识" class="headerlink" title="一、java基础知识"></a>一、java基础知识</h1><h2 id="1、DOS和Java特性"><a href="#1、DOS和Java特性" class="headerlink" title="1、DOS和Java特性"></a>1、DOS和Java特性</h2><h3 id="1、window中常见的Dos命令"><a href="#1、window中常见的Dos命令" class="headerlink" title="1、window中常见的Dos命令"></a>1、window中常见的Dos命令</h3><p>输入cmd</p><ul><li>mkdir 创建目录</li><li>cls 清除屏幕</li><li>exit 退出当前Dos命令窗口</li><li>dir 列出当前目录下所有的子文件&#x2F;子目录</li><li>cd 命令<br>*cd命令表示：change directory【改变目录】<br>*使用方法：cd 目录的路径</li><li>cd… 回到上级目录</li><li>cd&#x2F; 回到跟目录</li><li>怎么切换盘符？<br>c:回车<br>d:回车</li><li>del 删除一个或多个文件</li><li>ipconfig 查看本机IP地址</li><li>ping IP地址 或 ping 域名：查看计算机是否可以正常通信</li></ul><h3 id="2、文件扩展名必须要以-java结尾的扩展名"><a href="#2、文件扩展名必须要以-java结尾的扩展名" class="headerlink" title="2、文件扩展名必须要以 .java结尾的扩展名"></a>2、文件扩展名必须要以 .java结尾的扩展名</h3><h3 id="3、Java语言发展史"><a href="#3、Java语言发展史" class="headerlink" title="3、Java语言发展史"></a>3、Java语言发展史</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java语言诞生于1995年。</span><br><span class="hljs-keyword"></span>-什么是<span class="hljs-keyword">JDK？</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">Java开发工具包</span><br><span class="hljs-keyword"></span>做<span class="hljs-keyword">Java开发必须安装的一个工具包，可从官网下载。</span><br><span class="hljs-keyword"></span>*<span class="hljs-keyword">Java目前包括三大块：</span><br><span class="hljs-keyword"></span>-<span class="hljs-keyword">JavaSE（Java标准版）</span><br><span class="hljs-keyword"></span>-<span class="hljs-keyword">JavaEE（Java企业版）</span><br><span class="hljs-keyword"></span>-<span class="hljs-keyword">JavaME（Java微型版）</span><br><span class="hljs-keyword"></span>其中<span class="hljs-keyword">JavaEE是基础，主攻方向是JavaEE方向。</span><br></code></pre></td></tr></table></figure><h3 id="4、Java语言特性【开源、免费、纯面向对象、跨平台】"><a href="#4、Java语言特性【开源、免费、纯面向对象、跨平台】" class="headerlink" title="4、Java语言特性【开源、免费、纯面向对象、跨平台】"></a>4、Java语言特性【开源、免费、纯面向对象、跨平台】</h3><p><strong>简单性:</strong> 相对而言，例如Java中不在支持多继承，C++设计支持多继承的，多继承比较复杂。<br>C++中有指针，Java中屏蔽了指针的概念。所以Java是简单的。<br>Java语言的底层是C++实现的，不是c语言。</p><p><strong>面向对象性:</strong> Java是纯面向对象的，更符合人的思维模式，更容易理解。</p><p><em><strong>什么是面向对象？</strong></em></p><p><strong>封装</strong>：封装把一个对象的属性私有化、同时提供一些可以被外界访问的属性的方法。<br><strong>继承</strong>：<br>java是多单继承的，<br>子类拥有父类非private的属性和方法<br>子类可以拥有自己的属性和方法，即子类可以对父类进行扩展<br>子类可以用自己的方式实现父类的方法<br><strong>多态</strong>：父类的引用指向子类</p><p><strong>可移植性:</strong><br>什么是可移植性？（跨平台性）</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">Java程序可以做到一次编译，到处运行。也就是说Java程序可以在windows操作系统上运行，不做任何修改，同样的Java可以直接放到Linux操作系统上运行，这个被称为java程序的可移植性，或者叫做跨平台性。windows操作系统内核和Linux操作系统的内核肯定不同，他们这两个操作系统执行指令的方式也是不一样的。</span><br><span class="hljs-keyword"></span>结论： 显然<span class="hljs-keyword">Java程序不能直接和操作系统打交道。因为Java程序只有一份，操作系统执行原理都不同。</span><br><span class="hljs-keyword"></span><br>SUN团队让<span class="hljs-keyword">Java程序运行在一台虚拟的计算机当中，这个虚拟计算机叫做Java虚拟机，简称JVM。Java虚拟机再和底层的操作系统打交道。</span><br></code></pre></td></tr></table></figure><p><strong>多线程性</strong><br><strong>健壮性:</strong> 和自动垃圾回收机制有关，自动垃圾回收机制简称GC机制。<br>Java语言运行过程中产生的垃圾是自动回收的，不需要程序员关心。<br><strong>安全性</strong></p><h2 id="2、Java——集成开发环境"><a href="#2、Java——集成开发环境" class="headerlink" title="2、Java——集成开发环境"></a>2、Java——集成开发环境</h2><h3 id="1-、什么是集成开发环境【简称：IDE】"><a href="#1-、什么是集成开发环境【简称：IDE】" class="headerlink" title="1 、什么是集成开发环境【简称：IDE】"></a>1 、什么是集成开发环境【简称：IDE】</h3><ul><li>集成开发环境讲究一站式开发，使用这个工具即可。有提示功能，有自动纠错功能。</li><li>集成开发环境可以让软件开发变得更简单。更高效</li><li>没有IDE工具：<br>需要安装JDK、需要配置环境变量、需要手动的将java源文件编译生成class字节码文件。<br>java源程序出错之后没有提示。<br>没有自动提示功能等。</li><li>有IDE工具：<br>不需要独立安装JDK【IDE中已经集成】。<br>不需要手动配置环境变量。<br>不需要使用javac命令对java源文件进行编译。<br>并且java源程序编写语法错误马上提示。<br>使用IDE工具有很多代码不需要写，自动生成了。</li></ul><h3 id="2、-java有哪些比较主流的IDE呢？"><a href="#2、-java有哪些比较主流的IDE呢？" class="headerlink" title="2、 java有哪些比较主流的IDE呢？"></a>2、 java有哪些比较主流的IDE呢？</h3><ul><li>eclipse（myeclipse）【最多】</li><li>Intellij IDEA【上升趋势最大】</li><li>Netbeans</li><li>JBuilder<br>…</li></ul><h3 id="3-、IDE常见的知识"><a href="#3-、IDE常见的知识" class="headerlink" title="3 、IDE常见的知识"></a>3 、IDE常见的知识</h3><p><strong>workspace：</strong> 工作区<br>在workspace工作区中有一个文件夹：<strong>.metadata</strong>：储存IDE工作状态。<br>企业级开发：JavaEE开发的专用布局 - Java Enterprise。<br>普通java开发：JavaSE的专用布局 - Java<br>工作区workspace中基本的单元是：<strong>Project</strong>（工程&#x2F;项目）<br><strong>重点窗口介绍：</strong></p><ul><li>Package Explore &#x2F; Navigator &#x2F; Project Explore：可以看到java源文件</li><li>Console：控制台窗口</li></ul><h2 id="3、java程序的编译和运行、JDK、JRE、JVM的关系、环境变量、HelloWorld程序"><a href="#3、java程序的编译和运行、JDK、JRE、JVM的关系、环境变量、HelloWorld程序" class="headerlink" title="3、java程序的编译和运行、JDK、JRE、JVM的关系、环境变量、HelloWorld程序"></a>3、java程序的编译和运行、JDK、JRE、JVM的关系、环境变量、HelloWorld程序</h2><h3 id="1、Java的加载与执行"><a href="#1、Java的加载与执行" class="headerlink" title="1、Java的加载与执行"></a><strong>1、Java的加载与执行</strong></h3><p>*Java程序的运行包括两个非常重要的阶段<br>-编译阶段<br>-运行阶段</p><p>*<strong>编译阶段</strong></p><p>编译阶段主要的任务是检查Java源程序是否符合Java语法</p><p>符合Java语法则能够生成正常的<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E8%8A%82%E7%A0%81&spm=1001.2101.3001.7020">字节码</a>文件（.class）<br>不符合Java语法规则则无法生成字节码文件</p><p>字节码文件不是单纯的<a href="https://so.csdn.net/so/search?q=%E4%BA%8C%E8%BF%9B%E5%88%B6&spm=1001.2101.3001.7020">二进制</a>，这种文件无法在操作系统中直接执行。<br><strong>javac.exe（Java编译程序，在JDK中自带）</strong><br>怎么使用？在哪用？<br>在DOS命令窗口中使用。<br>**javac的使用规则：**<em><strong>javac java源文件的路径</strong></em></p><p>class文件是最终要执行的文件，所以class文件生成之后，java源文件删除也不影响java程序执行。<br>*编译结束后，可以将class文件拷贝到其他操作系统当中运行。【跨平台性】</p><p>*<strong>运行阶段</strong><br>JDK安装之后，除了自带的javac.exe之外，还有另外一个工具，叫做java.exe，其主要负责运行阶段。</p><p>java.exe在哪里用？怎么用？<br>-在DOS窗口使用<br><strong>-使用方法</strong> 输入 <strong>java 类名</strong></p><p>java.exe命令会启动Java虚拟机（<a href="https://so.csdn.net/so/search?q=JVM&spm=1001.2101.3001.7020">JVM</a>），JVM会启动类加载器ClassLoader<br>ClassLoader会去硬盘上搜索A.class文件，找到该文件则将该字节码文件装载到JVM中。<br>JVM将A.class字节码文件解释成二进制。<br>然后操作系统执行二进制和底层硬件平台进行交互。</p><h3 id="2、JDK、JRE、JVM的关系"><a href="#2、JDK、JRE、JVM的关系" class="headerlink" title="2、JDK、JRE、JVM的关系"></a>2、JDK、JRE、JVM的关系</h3><p><em><strong>JDK</strong></em>：开发者提供的开发工具箱，是给程序开发者用的，它包括完整的jre、Java运行环境，还包括了其他供开发者使用的工具包。</p><p><em><strong>JRE:</strong></em> 运行时所必须的包依赖的环境都在jre中</p><p><em><strong>JVM：</strong></em> 当我们运行一个程序时，JVM负责将字节码转换为特定机器代码，JVM提供了内存管理、垃圾回收和安全机制等，他独立于硬件和操作系统，正是java程序可以一次编写多处执行的原因</p><p>JDK目录的介绍：<br>JDK&#x2F;bin： 该目录下存放很多命令，例如javac.exe和java.exe<br>javac.exe负责编译<br>java.exe负责运行</p><p><strong>开发HelloWorld程序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//public表示一个公开的</span><br><span class="hljs-comment">//class表示一个类</span><br><span class="hljs-comment">//HelloWorld表示一个类名</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span>&#123;<span class="hljs-comment">//表示定义一个公开的类，起名HelloWorld</span><br><span class="hljs-comment">//类体中不允许直接编写Java语句（除声明变量之外）</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">public表示公开的</span><br><span class="hljs-comment">static表示静态的</span><br><span class="hljs-comment">void表示空</span><br><span class="hljs-comment">main表示方法名是main</span><br><span class="hljs-comment">(String[] args)是一个main方法的形式参数列表</span><br><span class="hljs-comment">需要记住的是：以下的方法是一个程序的主方法。是程序的执行入口，是一个固定编写方式。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main （String[] args）&#123;<span class="hljs-comment">//表示定义一个公开的静态的主方法</span><br><span class="hljs-comment">//方法体</span><br><span class="hljs-comment">//方法体</span><br><br><span class="hljs-comment">//Java语句以&quot;;&quot;终止，分号必须是半角分号</span><br>System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>);<span class="hljs-comment">//向控制台输出语句</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>将HelloWorld.java源程序通过javac工具编译：<br>首先需要解决的问题是：javac命令是否可用<br>打开DOS命令窗口，直接输入javac</p><p>*<strong>重要</strong><br>PATH<a href="https://so.csdn.net/so/search?q=%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&spm=1001.2101.3001.7020">环境变量</a>的配置<br>*注意：path环境变量和java语言没有关系，path环境变量是属于windows操作系统的一个知识点。path环境变量是专门给windows操作系统指路的。·</p><h2 id="4、公开类、标识符、关键字"><a href="#4、公开类、标识符、关键字" class="headerlink" title="4、公开类、标识符、关键字"></a>4、公开类、标识符、关键字</h2><blockquote><p><strong>1、public class与class的区别</strong><br>*一个java源文件中可以定义多个class</p><p>*一个java源文件当中public的class不是必须的</p><p>*一个class会定义生成一个xxx.class<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E8%8A%82%E7%A0%81&spm=1001.2101.3001.7020">字节码</a>文件</p><p>*一个java源文件当中定义公开的类的话，public class只能有一个，且该类名称必须和java源文件名称一致。</p><p>*每一个class当中都可以编写main方法，都可以设定程序的入口，想执行B.class中的main方法：<strong>java B</strong>， 想执行X.class当中的main方法 <strong>：java X</strong><br>注意：当在命令窗口中执行java Hello，那么要求Hello.class当中必须有主方法。没有主方法会出现运行阶段的错误。</p><p><strong>2、标识符</strong><br>1 什么是<a href="https://so.csdn.net/so/search?q=%E6%A0%87%E8%AF%86%E7%AC%A6&spm=1001.2101.3001.7020">标识符</a>？</p><blockquote><p>-在java源程序中凡是程序员有权利自己命名的单词都是标识符。<br>-标识符在EditPlus编辑器中以黑色高亮显示</p></blockquote><p>2 标识符的命名规则？</p><blockquote><p>*一个合法的标识符只能由“数字、字母、下划线_、美元符号$”组成，不能含有其他的符号。<br>*不能以数字开头<br>*严格区分大小写<br>*关键字不能做标识符<br>*理论上无长度限制，但是最好不要太长</p></blockquote><p>3 标识符的命名规范？（只是一种规范，不属于语法，编译器不报错）</p><blockquote><p>*<strong>最好见名知意</strong></p></blockquote><blockquote><p>*<strong>遵守驼峰命名规则</strong><br><strong>SystemService</strong><br><strong>UserService</strong><br><strong>CustomerService</strong></p></blockquote><blockquote><p>*<strong>类名、接口名：首字母大写，后面每个单词首字母大写。</strong><br>*<strong>变量名、方法名：首字母小写，后面每个单词首字母大写。</strong><br>*<strong>常量名：全部大写。</strong></p></blockquote><p>4 合法和不合法的标识符</p><table><thead><tr><th>合法</th><th>不合法</th></tr></thead><tbody><tr><td>_123Test</td><td>123Test</td></tr><tr><td>HelloWorld</td><td>Hello-World</td></tr><tr><td>A_B_C</td><td>Hello World</td></tr><tr><td>$ABC</td><td>HelloWorld#</td></tr><tr><td>public1</td><td>public</td></tr></tbody></table><p><strong>3、关键字及含义</strong></p><p>在Java中关键字都是小写</p><blockquote><p>abstract 表明类或者成员方法具有抽象属性</p></blockquote><blockquote><p>assert 断言，用来进行程序调试</p></blockquote><blockquote><p>boolean 基本数据类型之一，声明布尔类型的关键字</p></blockquote><blockquote><p>break 提前跳出一个块</p></blockquote><blockquote><p>byte 基本数据类型之一，字节类型</p></blockquote><blockquote><p>case 用在switch语句之中，表示其中的一个分支 catch 用在异常处理中，用来捕捉异常</p></blockquote><blockquote><p>char 基本数据类型之一，字符类型</p></blockquote><blockquote><p>class 声明一个类</p></blockquote><blockquote><p>const 保留关键字，没有具体含义</p></blockquote><blockquote><p>continue 回到一个块的开始处</p></blockquote><blockquote><p>default 默认，例如，用在switch语句中，表明一个默认的分支。Java8 中也作用于声明接口函数的默认实现</p></blockquote><blockquote><p>do 用在do-while循环结构中</p></blockquote><blockquote><p>double 基本数据类型之一，双精度浮点数类型</p></blockquote><blockquote><p>else 用在条件语句中，表明当条件不成立时的分支</p></blockquote><blockquote><p>enum 枚举</p></blockquote><blockquote><p>extends 表明一个类型是另一个类型的子类型。对于类，可以是另一个类或者抽象类；对于接口，可以是另一个接口</p></blockquote><blockquote><p>final 用来说明最终属性，表明一个类不能派生出子类，或者成员方法不能被覆盖，或者成员域的值不能被改变，用来定义常量</p></blockquote><blockquote><p>finally 用于处理异常情况，用来声明一个基本肯定会被执行到的语句块</p></blockquote><blockquote><p>float 基本数据类型之一，单精度浮点数类型</p></blockquote><blockquote><p>for 一种循环结构的引导词</p></blockquote><blockquote><p>goto 保留关键字，没有具体含义</p></blockquote><blockquote><p>if 条件语句的引导词</p></blockquote><blockquote><p>implements 表明一个类实现了给定的接口</p></blockquote><blockquote><p>import 表明要访问指定的类或包</p></blockquote><blockquote><p>instanceof 用来测试一个对象是否是指定类型的实例对象</p></blockquote><blockquote><p>int 基本数据类型之一，整数类型</p></blockquote><blockquote><p>interface 接口</p></blockquote><blockquote><p>long 基本数据类型之一，长整数类型</p></blockquote><blockquote><p>native 用来声明一个方法是由与计算机相关的语言（如C&#x2F;C++&#x2F;FORTRAN语言）实现的</p></blockquote><blockquote><p>new 用来创建新实例对象</p></blockquote><blockquote><p>package 包</p></blockquote><blockquote><p>private 一种访问控制方式：私用模式</p></blockquote><blockquote><p>protected 一种访问控制方式：保护模式</p></blockquote><blockquote><p>public 一种访问控制方式：共用模式</p></blockquote><blockquote><p>return 从成员方法中返回数据</p></blockquote><blockquote><p>short 基本数据类型之一,短整数类型</p></blockquote><blockquote><p>static 表明具有静态属性</p></blockquote><blockquote><p>strictfp 用来声明FP_strict（单精度或双精度浮点数）表达式遵循IEEE 754算术规范</p></blockquote><blockquote><p>super 表明当前对象的父类型的引用或者父类型的构造方法</p></blockquote><blockquote><p>switch 分支语句结构的引导词</p></blockquote><blockquote><p>synchronized 表明一段代码需要同步执行</p></blockquote><blockquote><p>this 指向当前实例对象的引用</p></blockquote><blockquote><p>throw 抛出一个异常</p></blockquote><blockquote><p>throws 声明在当前定义的成员方法中所有需要抛出的异常</p></blockquote><blockquote><p>transient 声明不用序列化的成员域</p></blockquote><blockquote><p>try 尝试一个可能抛出异常的程序块</p></blockquote><blockquote><p>void 声明当前成员方法没有返回值</p></blockquote><blockquote><p>volatile 表明两个或者多个变量必须同步地发生变化</p></blockquote><blockquote><p>while 用在循环结构中</p></blockquote></blockquote><h1 id="二、数据类型【编程基础】"><a href="#二、数据类型【编程基础】" class="headerlink" title="二、数据类型【编程基础】"></a>二、数据类型【编程基础】</h1><h2 id="1、字面值、变量、数据类型基础、编码方式"><a href="#1、字面值、变量、数据类型基础、编码方式" class="headerlink" title="1、字面值、变量、数据类型基础、编码方式"></a>1、字面值、变量、数据类型基础、编码方式</h2><p><strong>1、字面值</strong><br>关于字面值</p><blockquote><p>— 10&#x2F;100<br>— 3.14<br>—“abc”<br>—‘a’<br>—true、false</p></blockquote><p>字面值 就是数据。<br>字面值 是Java源程序的<a href="https://so.csdn.net/so/search?q=%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86&spm=1001.2101.3001.7020">组成部分</a>之一。包括标识符和它的关键字，他们都是Java源程序的组成部分。</p><p>数据在现实世界中是分类别的，所以数据在<a href="https://so.csdn.net/so/search?q=%E8%AE%A1%E7%AE%97%E6%9C%BA&spm=1001.2101.3001.7020">计算机</a>编程语言中也是有类型的：【数据类型】</p><blockquote><p>10、100 属于整数型<br>3.14 属于浮点型<br>true、false 属于布尔型<br>“abc”、“张广荣” 属于字符串型<br>‘A’、‘人’ 属于字符型</p></blockquote><p>注意：<br>Java语言中所有字符串型字面值必须用双引号括起来，双引号是半角。<br>Java语言中所有字符型字面值必须用单引号括起来，单引号是半角。</p><p><strong>2、变量</strong></p><p>1 什么是变量？</p><blockquote><p>变量本质上说是内存中的一块空间，这块空间“有数据类型”、“有名字”、“有字面值”。<br>变量包含三部分：数据类型、名称、字面值【数据】<br>变量是内存中存储数据的最基本的单元。</p></blockquote><p>2 数据类型的作用？</p><blockquote><p>不同的数据类型底层会分配不同大小的空间。<br>数据类型是指导程序在运行阶段应该分配多大的内存空间。</p></blockquote><p>3 变量要求：变量中存储的具体的“数据”必须和变量的“数据类型”一致，当不一致的时候编译报错</p><p>4 声明&#x2F;定义变量的语法格式：</p><blockquote><p><strong>数据类型 变量名</strong><br>数据类型：概念在第三部分。<br>eg：int 整数型<br>变量名：只要是合法的标识符就行。规范中要求：首字母小写，后面每个单词首字母大写。</p></blockquote><p>5 变量声明之后怎么赋值？</p><blockquote><p>语法格式： <strong>变量名&#x3D;字面值</strong><br>要求：字面值的数据类型必须和变量的数据类型一致。<br>&#x3D;等号是一个运算符，叫做赋值运算符，赋值运算符优先运算等号右边的表达式，表达式执行结束之后的结果赋值给等式左边的变量。</p></blockquote><p>6 声明和赋值可以放到一起完成。</p><blockquote><p>int i&#x3D;10</p></blockquote><p>7 变量赋值之后，可以重新赋值，变量的值可以变化：</p><blockquote><p>int i&#x3D;10；<br>System.out.println(i);<br>i&#x3D;20;<br>System.out.println(i);<br>i&#x3D;100;<br>System.out.println(i);</p></blockquote><p>8 有了变量的概念之后，内存空间得到了重复的使用：</p><blockquote><p>int i&#x3D;10;<br>System.out.println(i);<br>System.out.println(i);<br>System.out.println(i);<br>…</p></blockquote><p>9 通常访问一个变量包括两种访问形式：</p><blockquote><p>第一种：读取变量中保存的具体数据 get&#x2F;获取<br>第二种：修改变量中保存的具体数据 set&#x2F;设置<br>i&#x3D;10; &#x2F;&#x2F;set<br>System.out.println(i); &#x2F;&#x2F;get</p></blockquote><p>10 变量在一行可以声明多个</p><p>11 Java中的变量必须先声明，再赋值，才能访问。</p><blockquote><p>int i; &#x2F;&#x2F;程序执行到这里，内存空间并没有开辟出来，变量i并没有初始化。所以没有赋值之前是无法访问的。</p></blockquote><p>12 关于Java变量的作用域</p><blockquote><p>什么是作用域？<br>变量的作用域，其实描述的就是变量的有效范围。在什么范围之内是可以被访问的，只要出了这个范围该变量就无法访问了。</p></blockquote><blockquote><p>变量的作用域只要记住一句话：出了大括号就不认识了。</p></blockquote><p>13 关于变量的分类：</p><blockquote><p>关于变量声明的位置来分类：<br><strong>局部变量：</strong> 在方法体中声明的变量。<br><strong>成员变量：</strong> 在方法体【类体之内】声明的变量叫做成员变量。<br>在不同的作用域当中，变量名可以相同。<br>在同一个作用域当中，变量名不能重名。</p></blockquote><p><strong>3、数据类型</strong></p><p>1 数据类型的作用是什么？</p><blockquote><p>程序当中有很多数据，每一个数据都是有相关类型的，不同数据类型的数据占用空间大小不同。<br>数据类型的作用是指导JVM在运行程序的时候給该数据分配多少空间。</p></blockquote><p>2 Java中的数据类型包括两种</p><blockquote><p>基本数据类型<br>引用数据类型</p></blockquote><p>3 关于基本数据类型</p><blockquote><p>基本数据类型包括四大类八小种：<br>第一类：整数型 （byte，short，int，long）<br>第二类：浮点型 （float，double）<br>第三类：布尔型 （boolean）<br>第四类：字符型 （char）</p></blockquote><p>4 字符串“abc”不属于基本数据类型，属于 <strong>“引用数据类型”</strong> ，字符属于基本数据类型：</p><blockquote><p>字符串使用双引号 “ ”<br>字符使用单引号 ‘ ’</p></blockquote><p>5 八钟基本数据类型各自占用空间大小是多少？</p><table><thead><tr><th>基本数据类型</th><th>占用空间大小 【单位：字节】</th><th>取值范围</th></tr></thead><tbody><tr><td>byte</td><td>1</td><td>-128~127</td></tr><tr><td>short</td><td>2</td><td>·32768~32767</td></tr><tr><td>int</td><td>4</td><td>-2147483648~2147483647</td></tr><tr><td>long</td><td>8</td><td>·263~263-1</td></tr><tr><td>float</td><td>4</td><td>有效位6~7位</td></tr><tr><td>double</td><td>8</td><td>有效位15位</td></tr><tr><td>boolean</td><td>1</td><td>true，false</td></tr><tr><td>char</td><td>2</td><td>0~65535</td></tr><tr><td>6 计算机在任何情况下都只能识别二进制。例如：只认识010101010100101…</td><td></td><td></td></tr></tbody></table><p><strong>文字与二进制通过字符编码的方式进行对照转换，最先出现的是ASCII码【采用一个字节编码】</strong></p><blockquote><p>支持简体中文的编码方式是GB2312&lt; GBK&lt; GB18030<br>支持繁体中文：&lt; big5 &gt;<br>后来出现了一种方式统一了全球所有文字，容量较大，这种编码方式叫做：Unicode编码<br>unicode编码方式有多种具体的实现：</p><ul><li>UTF-8</li><li>UTF-16</li><li>UTF-32</li></ul></blockquote><p>Java语言采用的编码方式是unicode编码方式，所以“标识符”可以用中文。</p><h2 id="2、char、转义、整数型、精度损失"><a href="#2、char、转义、整数型、精度损失" class="headerlink" title="2、char、转义、整数型、精度损失"></a>2、char、转义、整数型、精度损失</h2><p>关于八种基本数据类型的默认值</p><table><thead><tr><th>数据类型</th><th>默认值</th></tr></thead><tbody><tr><td>byte，short，int，long</td><td>0</td></tr><tr><td>float，double</td><td>0.0</td></tr><tr><td>boolean</td><td>false【在C语言中true是1，false是0】</td></tr><tr><td>char</td><td>\u0000</td></tr></tbody></table><blockquote><p>成员变量没有手动赋值系统会默认赋值【局部变量则不会】<br>八钟基本数据类型的默认值都是一切向0看齐。</p></blockquote><h3 id="1、char型"><a href="#1、char型" class="headerlink" title="1、char型"></a>1、char型</h3><blockquote><p>一个中文占用2个字节，char类型正好是2个字节<br>所以Java中的char类型变量可以存储一个中文字符<br>“ab”是字符串不能用单引号括起来</p></blockquote><h3 id="2、转义字符-（-）"><a href="#2、转义字符-（-）" class="headerlink" title="2、转义字符 （\）"></a>2、<a href="https://so.csdn.net/so/search?q=%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6&spm=1001.2101.3001.7020">转义字符</a> （\）</h3><p>\ ：反斜杠在Java语言中具有转义功能</p><blockquote><p><strong>\n ：</strong> 换行符<br>System.out.println与 print 的区别：println输出之后换行，print表示输出，但是不换行。<br><strong>\t ：</strong> 制表符 ，即Tab键<br><strong>\ ’ ：</strong> 普通的单引号<br><strong>\ \ ：</strong> 普通的反斜杠<br><strong>\ “ ：</strong> 普通的双引号</p></blockquote><p><strong>怎样在控制台输出“反斜杠字符”？</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">char</span> k=<span class="hljs-string">&#x27;\\&#x27;</span>;<br>System.out.println();<br></code></pre></td></tr></table></figure><p>第一个反斜杠具有转义功能，将后面的反斜杠转义为p普通的反斜杠字符<br><strong>结论：因此在Java中两个反斜杠代表一个普通的反斜杠字符</strong></p><p><strong>怎样在控制台输出一个普通的单引号？</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">char</span> a=<span class="hljs-string">&#x27;\&#x27;&#x27;</span>; / / 反斜杠具有转义功能，将第二个单引号转换成普通的单引号字符，第一个单引号和最后一个单引号配对。<br>System.out.println(a);<br></code></pre></td></tr></table></figure><h3 id="3、整数型"><a href="#3、整数型" class="headerlink" title="3、整数型"></a>3、整数型</h3><p>1 Java语言当中的“整数型字面值”被默认当做int处理。要让这个“这个整数型字面值”被当做long类型处理的话，需要在“整数型字面值”后面添加1&#x2F;L，建议使用大写的L。</p><p><strong>2 Java语言当中的整数型字面值有三种表现方式：</strong></p><blockquote><p>第一种方式：十进制【是一种缺省默认的方式】 <em>int i&#x3D;10</em><br>第二种方式：八进制【在编写八进制整数型字面值的时候需要以0开始】 <em>int i&#x3D;010</em><br>第三种方式：十六进制【在编写十六进制整数型字面值的时候需要以0x开始】 <em>int i&#x3D;0x10</em></p></blockquote><p><strong>long y&#x3D;2147483648L</strong></p><blockquote><p>long y&#x3D;2147483648<br>2147483648是一个过大整数，被当做int类型4个字节处理，但是这个字面值超过int类型范围<br>解决方法：<br>在字面值后面添加L，将其当做long类型处理，y是类型变量，以上程序不存在类型转换。</p></blockquote><h3 id="4、精度损失"><a href="#4、精度损失" class="headerlink" title="4、精度损失"></a>4、精度损失</h3><p>计算机二进制有三种表示形式：</p><blockquote><p>原码<br>反码<br>补码</p></blockquote><p>计算机在任何情况下底层表示和存储数据的时候采用了补码形式。</p><blockquote><p>正数的补码：和原码相同。<br>负数的补码：负数的绝对值对应的二进制所有二进制位取反，再加1</p></blockquote><p>当一个整数字面值没有超过byte，short，char的取值范围，这个字面值可以直接赋值给byte，short，char类型的变量。这种机制被SUN允许了，目的是为了方便程序员编程。</p><blockquote><p>char cc&#x3D;65535 &#x2F;&#x2F;通过<br>char cc&#x3D;65536 &#x2F;&#x2F;编译报错</p></blockquote><h2 id="3、浮点型、布尔型、类型转换、算数运算符、关系运算符、逻辑运算符"><a href="#3、浮点型、布尔型、类型转换、算数运算符、关系运算符、逻辑运算符" class="headerlink" title="3、浮点型、布尔型、类型转换、算数运算符、关系运算符、逻辑运算符"></a>3、浮点型、布尔型、类型转换、算数运算符、关系运算符、逻辑运算符</h2><h3 id="1、浮点型"><a href="#1、浮点型" class="headerlink" title="1、浮点型"></a><strong>1、浮点型</strong></h3><blockquote><p>float 单<a href="https://so.csdn.net/so/search?q=%E7%B2%BE%E5%BA%A6&spm=1001.2101.3001.7020">精度</a>【4个字节】<br>double 双精度【8个字节，精度较高】</p></blockquote><p>在Java语言当中，所有的<a href="https://so.csdn.net/so/search?q=%E6%B5%AE%E7%82%B9&spm=1001.2101.3001.7020">浮点</a>字面值【3.0】，默认被当做double类型来处理。<br>要想该字面值当做float类型来处理，需要在字面值后面添加F&#x2F;f</p><p>注意：<br>double和float在计算机内部<a href="https://so.csdn.net/so/search?q=%E4%BA%8C%E8%BF%9B%E5%88%B6&spm=1001.2101.3001.7020">二进制</a>存储的时候存储的都是近似值。<br>在现实世界当中有一些数字是无限循环的，列如：3.3333333…<br>计算机资源是有限的，用有限的资源存储无限的数据只能存储近似值。</p><h3 id="2、布尔型"><a href="#2、布尔型" class="headerlink" title="2、布尔型"></a><strong>2、布尔型</strong></h3><p>关于布尔型数据类型：<strong>boolean</strong></p><blockquote><p>在Java语言当中<a href="https://so.csdn.net/so/search?q=boolean&spm=1001.2101.3001.7020">boolean</a>类型只有两个值：true、false，没有其他值。<br>不像C语言当中，0和1可以表示假和真。</p></blockquote><blockquote><p>在底层存储的时候boolean类型占用1个字节，因为实际存储的时候false底层是0，true底层是1.</p></blockquote><p><a href="https://so.csdn.net/so/search?q=%E5%B8%83%E5%B0%94%E7%B1%BB%E5%9E%8B&spm=1001.2101.3001.7020">布尔类型</a>在实际开发当中非常需要，经常使用<strong>逻辑运算</strong>和<strong>条件控制语句</strong>当中。</p><h3 id="3、类型转换"><a href="#3、类型转换" class="headerlink" title="3、类型转换"></a><strong>3、类型转换</strong></h3><p>关于基本数据类型之间的互相转换：</p><p><strong>转换规则：</strong></p><blockquote><p>1 八种基本数据类型当中除布尔类型之外剩下的7种类型之间都可以互相转换。</p></blockquote><blockquote><p>2 小容量向大容量转换，称为自动<a href="https://so.csdn.net/so/search?q=%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2&spm=1001.2101.3001.7020">类型转换</a>，容量从小到大排序：<br><strong>byte &lt; short ，char &lt; int &lt; long &lt; float &lt; double</strong><br>注： 任何浮点类型不管占用多少个字节，都比整数型容量大。<br>char 和 short可表示的种类数量相同，但是char可以取更大的正整数 。</p></blockquote><blockquote><p>3 大容量转换成小容量，叫做强制类型转换，需要加强制类型转换符，程序才能编译通过，但是在运行阶段可能会损失精度，所以谨慎使用。</p></blockquote><blockquote><p>4 当整数字面值没有超出byte，short，char的取值范围，可以直接赋值给byte，short，char类型的变量。</p></blockquote><blockquote><p>5 byte，short，char混合运算的时候，各自先转换成int类型再做运算。</p></blockquote><blockquote><p>6 多种数据类型混合运算，先转换成容量最大的那种类型再做运算。</p></blockquote><h3 id="4、算数运算符"><a href="#4、算数运算符" class="headerlink" title="4、算数运算符"></a><strong>4、算数运算符</strong></h3><p>关于Java编程中的运算符之：算数运算符</p><table><thead><tr><th>+</th><th>求和</th></tr></thead><tbody><tr><td>-</td><td>相减</td></tr><tr><td>*</td><td>乘积</td></tr><tr><td>&#x2F;</td><td>商</td></tr><tr><td>%</td><td>取余数【取模】</td></tr><tr><td>++</td><td>自加1</td></tr><tr><td>- -</td><td>自减1</td></tr></tbody></table><p>小结：++运算符可以出现在变量前，也可以出现在变量后，，无论是变量前还是变量后只要++运算结束，该变量中的值一定会自加1</p><blockquote><p>++a：先自增1，在进行运算。<br>a++：先运算，再自增1。</p></blockquote><h3 id="5、关系运算符"><a href="#5、关系运算符" class="headerlink" title="5、关系运算符"></a><strong>5、关系运算符</strong></h3><table><thead><tr><th>&gt;</th><th>大于</th></tr></thead><tbody><tr><td>&gt;&#x3D;</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td></tr><tr><td>&#x3D;&#x3D;</td><td>等于</td></tr><tr><td>!&#x3D;</td><td>不等于</td></tr></tbody></table><blockquote><p>&#x3D; 是赋值运算符；<br>&#x3D;&#x3D; 是<a href="https://so.csdn.net/so/search?q=%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%AC%A6&spm=1001.2101.3001.7020">关系运算符</a>；<br>关系运算符的结果一定是布尔类型。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperatorTest</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">int</span> a=<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b=<span class="hljs-number">10</span>;<br><br>System.out.println(a&gt;b); <span class="hljs-comment">//false</span><br>System.out.println(a&gt;=b); <span class="hljs-comment">//ture</span><br>System.out.println(a&lt;b); <span class="hljs-comment">//false</span><br>System.out.println(a&lt;=b); <span class="hljs-comment">//true</span><br>System.out.println(a==b); <span class="hljs-comment">//true</span><br>System.out.println(a!=b); <span class="hljs-comment">//false</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6、逻辑运算符"><a href="#6、逻辑运算符" class="headerlink" title="6、逻辑运算符"></a><strong>6、逻辑运算符</strong></h3><table><thead><tr><th>逻辑运算符</th><th>解释</th></tr></thead><tbody><tr><td>&amp;</td><td>逻辑与 （两边的算子都是true，结果才是true）</td></tr><tr><td>！</td><td>逻辑非（取反，！false就是true，！true就是假，这是一个单目运算符）</td></tr><tr><td>^</td><td>逻辑异或（两边的算子只要不一样，结果就是true）</td></tr><tr><td>&amp;&amp;</td><td>短路与（第一个表达式执行结果是false，会发生短路与）</td></tr></tbody></table><blockquote><p><strong>| 逻辑或（两边的算子只要有一个是true，结果就是true）</strong><br><strong>|| 短路或（第一个表达式执行结果是true，会发生短路或）</strong></p></blockquote><p>1 <a href="https://so.csdn.net/so/search?q=%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6&spm=1001.2101.3001.7020">逻辑运算符</a>要求两边的算子都是布尔类型，并且逻辑运算符最终的运算结果也是一个布尔类型。</p><p>2 短路与和逻辑与最终的运算结果是相同的，只不过短路与存在短路现象。<br>3 短路或和逻辑或最终的运算结果是相同的，只不过短路或存在短路现象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">** 逻辑与和短路与的区别** <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">int</span> x=<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> y=<span class="hljs-number">8</span>;<br>System.out.println(x &lt; y&amp; ++x &lt; y); <span class="hljs-comment">//进行了++x的操作</span><br>System.out.println(x); <span class="hljs-comment">//x=11</span><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test02</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">int</span> x=<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> y=<span class="hljs-number">8</span><br>System.out.println(x &lt; y&amp; ++x &lt; y); <span class="hljs-comment">//因为x&lt;y是false，直接短路，后面的操作就不在执行</span><br>System.out.println(x); <span class="hljs-comment">//x=10</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>从某个角度来看，短路与更智能。由于后面的表达式可能不执行，所以执行效率较高。这种方式在实际开发中使用较多。短路与比逻辑与使用的多。短路与更常用。</p><p>但是，在某些特殊的逻辑业务中，要求运算符两边的算子必须全部执行，此时必须使用逻辑与，不能使用短路与，使用短路与可能导致右边的表达式不执行。</p><h2 id="4、赋值运算符、字符串连接运算符、三目运算符-三元运算符-条件运算符"><a href="#4、赋值运算符、字符串连接运算符、三目运算符-三元运算符-条件运算符" class="headerlink" title="4、赋值运算符、字符串连接运算符、三目运算符&#x2F;三元运算符&#x2F;条件运算符"></a>4、赋值运算符、字符串连接运算符、三目运算符&#x2F;三元运算符&#x2F;条件运算符</h2><h3 id="1、赋值运算符"><a href="#1、赋值运算符" class="headerlink" title="1、赋值运算符"></a>1、赋值运算符</h3><p>java中赋值类运算符包括两种：</p><blockquote><p>基本的赋值运算符：&#x3D;<br>扩展的赋值运算符：+&#x3D;、-+、*&#x3D;、&#x2F;+、%&#x3D;</p></blockquote><p>赋值类的运算符优先级：先执行等号右边的表达式，将执行结果赋值给左边的变量。</p><p>注意以下代码：</p><blockquote><p>byte x&#x3D;10；<br>x +&#x3D; 5；&#x2F;&#x2F;<strong>并不等同于：x &#x3D;x+5，而等同于：x&#x3D; (byte)(x+5)</strong></p></blockquote><blockquote><p>int y&#x3D;10;<br>y +&#x3D; 5; &#x2F;&#x2F;<strong>等同于：y&#x3D; (int)(y+5)</strong></p></blockquote><blockquote><p>long a&#x3D;10L;<br>int b&#x3D;20;<br>b +&#x3D; a; &#x2F;&#x2F; <strong>等同于：b &#x3D; (int)(b+a)</strong></p></blockquote><p><strong>重要结论：扩展类的赋值运算符不改变运算结果类型，假设最初这个变量的类型是byte类型，无论怎么追加或追减，最终该变量的数据类型还是byte类型。</strong></p><h3 id="2、字符串连接运算符"><a href="#2、字符串连接运算符" class="headerlink" title="2、字符串连接运算符"></a>2、字符串连接运算符</h3><p>关于java中的 “+” 运算符：</p><p>1 +运算符在java语言中当中有两个作用：</p><blockquote><p>加法运算<br>字符串的连接运算</p></blockquote><p>2 数字+数字 →数字【求和】<br>数字+“字符串” →“字符串”【字符串连接】</p><p>3 在一个<a href="https://so.csdn.net/so/search?q=%E8%A1%A8%E8%BE%BE%E5%BC%8F&spm=1001.2101.3001.7020">表达式</a>当中可以出现多个“+”，在没有添加小括号的前提下，遵循自左向右的顺序依次运算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">int</span> a=<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b=<span class="hljs-number">20</span>;<br>System.out.println(<span class="hljs-string">&quot;10+20=30&quot;</span>);  <span class="hljs-comment">//在控制台输出“10+20=30”</span><br>System.out.println(<span class="hljs-string">&quot;10+20=&quot;</span>+a+b);  <span class="hljs-comment">//以动态方式输出“10+20=1020”</span><br>System.out.println(<span class="hljs-string">&quot;10+20=&quot;</span>+(a+b)); <span class="hljs-comment">//输出10+20=30</span><br>&#125;<br>&#125;<br><span class="hljs-number">123456789</span><br></code></pre></td></tr></table></figure><p>String是引用数据类型，s是变量名，“abc”是String类型的字面值</p><blockquote><p><strong>String s&#x3D;“abc”</strong></p></blockquote><h3 id="3、三元运算符"><a href="#3、三元运算符" class="headerlink" title="3、三元运算符"></a>3、三元运算符</h3><p><strong>三元运算符&#x2F;三目运算符&#x2F;条件运算符</strong><br><strong>1、语法规则：</strong></p><blockquote><p><strong>布尔表达式？表达式1：表达式2</strong></p></blockquote><p><strong>2、三元运算符的执行原理</strong></p><blockquote><p>当布尔表达式的结果是true的时候，选择表达式1作为整个表达式的执行结果<br>当布尔表达式的结果是false的时候，选择表达式2作为整个表达式的执行结果</p></blockquote><h1 id="三、流程控制语句"><a href="#三、流程控制语句" class="headerlink" title="三、流程控制语句"></a>三、流程控制语句</h1><h2 id="1、控制语句、java输入语句、if语句"><a href="#1、控制语句、java输入语句、if语句" class="headerlink" title="1、控制语句、java输入语句、if语句"></a>1、控制语句、java输入语句、if语句</h2><p>Java控制语句可以分为7种：</p><blockquote><p><strong>控制选择结构语句</strong></p><ul><li><strong>if、if else</strong></li><li><strong>switch</strong></li></ul></blockquote><blockquote><p><strong>控制循环结构语句</strong></p><ul><li><strong>for</strong></li><li><strong>while</strong></li><li><strong>do while</strong></li></ul></blockquote><blockquote><p><strong>改变控制语句顺序</strong></p><ul><li><strong>break</strong></li><li><strong>continue</strong></li></ul></blockquote><p><strong>1、if语句</strong></p><p><strong>if语句属于选择结构，if语句又被称为分支语句&#x2F;条件控制语句</strong></p><p><strong>1 if语句的语法结构：四种编写方式</strong></p><blockquote><p><strong>第一种</strong><br>if（布尔表达式）{<br>java语句；<br>java语句；<br>…<br>}</p></blockquote><blockquote><p><strong>第二种</strong><br><strong>if（布尔表达式）</strong>{<br>java语句；<br>java语句；<br>…<br>} <strong>else</strong> {<br>java语句；<br>java语句；<br>…<br>}</p></blockquote><blockquote><p><strong>第三种</strong><br><strong>if（布尔表达式）</strong>{<br>java语句<br>java语句<br>…<br>}<strong>else if（布尔表达式）</strong>{<br>java语句<br>java语句<br>…<br>}<br><strong>else if（布尔表达式）</strong>{<br>java语句<br>java语句<br>…<br>}<strong>else if（布尔表达式）</strong>{<br>java语句<br>java语句<br>…<br>}…</p></blockquote><blockquote><p><strong>第四种</strong><br><strong>if（布尔表达式）</strong>{<br>java语句<br>java语句<br>…<br>}<strong>else if（布尔表达式）</strong>{<br>java语句<br>java语句<br>…<br>}<br><strong>else if（布尔表达式）</strong>{<br>java语句<br>java语句<br>…<br>}<strong>else</strong> {<br>java语句<br>java语句<br>…<br>}…</p></blockquote><p><strong>2 重点 ：对于java语句中的if语句来说，只要有一个分支执行，整个if语句全部结束。</strong></p><p><strong>3 注意：以上的第二种编写方式和第四种编写方式都带有else分支，这两种方式可以保证100%会有分支执行。</strong></p><p><strong>4 所有的控制语句都是可以嵌套使用的，只要合理嵌套就行。</strong></p><blockquote><p>注意：嵌套使用的时候，代码格式要保证完美。【该缩进的时候必须缩进，大部分情况下使用大括号包围的需要缩进】</p></blockquote><p><strong>5 if语句的分支中只有一条java语句的时候，大括号可以不写。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println();  负责向控制台输出<br></code></pre></td></tr></table></figure><p><strong>6 接收用户键盘的输入语句：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KeyInputTest</span><br>&#123;<br>publid <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>java.util.<span class="hljs-type">Scanner</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.util.Scanner(System.in); <span class="hljs-comment">//第一步，创建键盘扫描器对象</span><br><br>输入字符：<br><span class="hljs-type">String</span> <span class="hljs-variable">UserInputContent</span> <span class="hljs-operator">=</span> s.next(); <br><span class="hljs-comment">//第二步：调用Scanner对象的next方法开始接收用户的键盘输入</span><br><span class="hljs-comment">//程序执行到这里会停下来，等待用户的输入</span><br><span class="hljs-comment">//当用户输入的时候，并且最终敲回车的时候，输入的信息会自动赋值给userInputContent</span><br><span class="hljs-comment">//程序执行到这里，用户输入的信息已经到内存中了，</span><br>System.out.println(<span class="hljs-string">&quot;您输入了:&quot;</span> + UserInputContent).; <span class="hljs-comment">//将内存的数据输入到控制台</span><br><br>输入数字<br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> s.nextInt(); <span class="hljs-comment">//接收数字 </span><br>System.out.println(<span class="hljs-string">&quot;您输入的数字是:&quot;</span> + num);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>正确语句：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfTest01</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">boolean</span> sex=<span class="hljs-literal">true</span>;<br><span class="hljs-keyword">if</span> (sex)&#123;<br>System.out.println(<span class="hljs-string">&quot;男&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;女&quot;</span>);<br>&#125;<br><br>sex=<span class="hljs-literal">false</span>;<br><br><span class="hljs-keyword">if</span>(sex) System.out.println(<span class="hljs-string">&quot;男&quot;</span>)； <span class="hljs-keyword">else</span> System.out.println(<span class="hljs-string">&quot;女&quot;</span>)；<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>错误语句：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfTest02</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">boolean</span> sex=<span class="hljs-literal">true</span>;<br><span class="hljs-keyword">if</span>(sex)<br>System.out.println(<span class="hljs-string">&quot;男&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;hehe&quot;</span>); <span class="hljs-comment">//不加大括号的话只包括第一条语句，第二条语句不是if语句的分支java语句</span><br><span class="hljs-keyword">else</span> <span class="hljs-comment">//else缺少if</span><br>System.out.println(<span class="hljs-string">&quot;女&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2、switch控制语句"><a href="#2、switch控制语句" class="headerlink" title="2、switch控制语句"></a>2、switch控制语句</h2><p><strong>关于switch语句：</strong></p><p><strong>1、witch语句也属于选择结构，也是分支语句</strong></p><p><strong>2、switch语句的语法结构：</strong><br>一个比较完整的switch语句应该这样编写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span> (<span class="hljs-type">int</span>或String类型的字面值或变量)&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-type">int</span>或String类型的字面值或变量:<br>java语句;<br>java语句;<br>...<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-type">int</span>或String类型的字面值或变量:<br>java语句;<br>java语句;<br>...<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-type">int</span>或String类型的字面值或变量:<br>java语句;<br>java语句;<br>...<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>java语句;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3、switch语句的执行原理：</strong></p><blockquote><p>switch语句后面小括号当中的“数据”进行一一匹配，匹配成功的分支执行按照自上而下的顺序依次匹配。</p></blockquote><p><strong>4、匹配成功的分支执行，分支当中最后有“break；”语句的话，整个switch语句终止。</strong></p><p><strong>5、匹配成功的分支执行，分支当中没有“break；”语句的话，直接进入下一个分支执行（不进行匹配），这种现象被称为 case穿透 现象。【提供break；语句可以避免穿透】</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">case</span>穿透：<br><span class="hljs-type">int</span> i=<span class="hljs-number">10</span>；<br><span class="hljs-keyword">switch</span>（i）&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>：<br>java语句;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>：<br>java语句;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>： <br>java语句;<br><span class="hljs-keyword">break</span>；<span class="hljs-comment">//输入1,输出的结果是前三条java语句</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>java语句;<br>System.out.println(<span class="hljs-string">&quot;Test Code!&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>6、所有分支都没有匹配成功，当有default的语句的话，会执行default分支当中的程序</strong></p><p><strong>7、switch后面和case后面只能是int或者String类型的数据，不能是探测其他类型。</strong></p><blockquote><ul><li>当然byte，short，char也可以直接写到switch和case后面，因为它们可以进行自动类型转换。byte，short，char可以自动转换成int类型。</li><li>JDK6的，switch和case后面只能探测int类型。</li><li>JDK7之后包括7版本在内，引入新特性，switch关键字和case关键字后面可以探测 int 和string类型的数据。</li></ul></blockquote><p><strong>8、case可以合并：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> i=<span class="hljs-number">10</span>；<br><span class="hljs-keyword">switch</span>（i）&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>：<span class="hljs-keyword">case</span> <span class="hljs-number">2</span>：<span class="hljs-keyword">case</span> <span class="hljs-number">3</span>： <span class="hljs-comment">//输入1、2、3输出的结果相同</span><br>java语句;<br><span class="hljs-keyword">break</span>；<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>java语句;<br>System.out.println(<span class="hljs-string">&quot;Test Code!&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>10、switch语句例子</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchTest01</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">long</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10L</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> a; <span class="hljs-comment">//编译错误</span><br><br><span class="hljs-type">long</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">10L</span>;<br><span class="hljs-keyword">switch</span>(x)&#123;&#125; <span class="hljs-comment">//编译报错，switch语句不能用long</span><br><br>解决编译错误:<br><span class="hljs-type">long</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">10L</span>;<br><span class="hljs-keyword">switch</span>((<span class="hljs-type">int</span>)x)&#123;&#125;<br><br><span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-keyword">switch</span>(b)&#123;&#125; <span class="hljs-comment">//编译通过</span><br><br><span class="hljs-type">short</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-keyword">switch</span>(s)&#123;&#125; <span class="hljs-comment">//编译通过</span><br><br><span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;A&#x27;</span>;<br><span class="hljs-keyword">switch</span>(c)&#123;&#125; <span class="hljs-comment">//编译通过</span><br><br><span class="hljs-type">char</span> <span class="hljs-variable">cc</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br><span class="hljs-keyword">switch</span>(cc)&#123;&#125; <span class="hljs-comment">//编译通过</span><br><br> <span class="hljs-comment">//编译报错</span><br><span class="hljs-comment">//switch(ture)&#123;&#125;</span><br><br><span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;zhangsan&quot;</span>;<br><span class="hljs-keyword">switch</span>(username)&#123;&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>11、switch确实可以探测String类型，这是Java7的新特性。</strong></p><p><em><strong>简单计算器系统实现：</strong></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchTest02</span>()<br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>java.util.<span class="hljs-type">Scanner</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.util.Scanner(System.in);<br>System.out.println(<span class="hljs-string">&quot;欢迎使用简单计算器系统：&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;请输入第一个数字：&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> s.nextInt();<br>System.out.print(<span class="hljs-string">&quot;请输入运算符&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">operator</span> <span class="hljs-operator">=</span> s.next();<br>System.out.print(<span class="hljs-string">&quot;请输入第二个数字：&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> s.nextInt();<br><br><span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">switch</span>(operator)&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;+&quot;</span> :<br>result = sum1 + sum2;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;-&quot;</span> :<br>result = sum1 - sum2;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;*&quot;</span> :<br>result = sum1 * sum2;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;/&quot;</span> :<br>result = sum1 / sum2;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;%&quot;</span> :<br>result = sum1 % sum2;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span> :<br>System.out.println(<span class="hljs-string">&quot;输入运算符号错误&quot;</span>);<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;运算结果为：&quot;</span>+ num1 + operator + num2 + <span class="hljs-string">&quot;=&quot;</span> + result );<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>假设系统给定考生成绩，判断该考生的成绩等级：</p><blockquote><ul><li>有效成绩范围：【0-100】</li><li>考试成绩可以有小数</li><li>考试成绩和等级之间的对照关系：<br>【90-100】 A<br>【80-90】 B<br>【70-80】 C<br>【60-70】 D<br>【0-60】 E</li><li>以上需求必须采用switch语句完成，不能采用if<br>窍门：（int）(成绩 &#x2F; 10)</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchTest03</span>()<br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">double</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> 数字：<br><span class="hljs-type">int</span> <span class="hljs-variable">grade</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)(score/<span class="hljs-number">10</span>);<br><span class="hljs-keyword">switch</span>(grade)&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br>System.out.println(<span class="hljs-string">&quot;A&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>System.out.println(<span class="hljs-string">&quot;B&quot;</span>);<br><span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>System.out.println(<span class="hljs-string">&quot;C&quot;</span>);<br><span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>System.out.println(<span class="hljs-string">&quot;D&quot;</span>);<br><span class="hljs-keyword">default</span>:<br>System.out.println(<span class="hljs-string">&quot;E&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3、循环结构、for控制语句"><a href="#3、循环结构、for控制语句" class="headerlink" title="3、循环结构、for控制语句"></a>3、循环结构、for控制语句</h2><h3 id="1、循环结构"><a href="#1、循环结构" class="headerlink" title="1、循环结构"></a>1、循环结构</h3><p>在程序当中总有一些需要反复的执行的代码，假设没有循环结构，那么这段需要重复执行的代码自然是需要重复编写的。代码无法得到重复使用。所以多数编程语言都是支持循环结构的。将来把需要反复执行的代码片段放到“循环体”中，再联合“计数器”，共同控制这段需要反复执行的代码。</p><p><strong>基本上的所有编程语言支持的循环包括三种：</strong></p><blockquote><ul><li>for 循环</li><li>while 循环</li><li>do…while 循环</li></ul></blockquote><h3 id="2、for循环"><a href="#2、for循环" class="headerlink" title="2、for循环"></a>2、for循环</h3><p><strong>1 语法结构</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">for</span> (初始化表达式 ; 布尔表达式 ；更新表达式) &#123;<br> <br>循环体:由java语言构成，是需要重复执行的代码片段<br><br> &#125;<br></code></pre></td></tr></table></figure><p><strong>2 for循环的执行过程 &#x2F; 执行原理？</strong></p><p><strong>2.1 初始化表达式、布尔表达式、更新表达式不是必须的！【但是两个分号是必须的】</strong></p><p><strong>2.2 初始化表达式最先执行，并且在整个for循环当中只执行一次。</strong></p><p><strong>2.3 布尔表达式必须是true&#x2F;false，不能是其他值。</strong></p><p><strong>2.4 for的执行过程：</strong></p><blockquote><p>1、先执行初始化<a href="https://so.csdn.net/so/search?q=%E8%A1%A8%E8%BE%BE%E5%BC%8F&spm=1001.2101.3001.7020">表达式</a>，并且该表达式只执行一次。</p></blockquote><blockquote><p>2、判断<a href="https://so.csdn.net/so/search?q=%E5%B8%83%E5%B0%94&spm=1001.2101.3001.7020">布尔</a>表达式的结果是true还是false：</p><ul><li>布尔表达式为true：<br>1、执行循环体<br>2、执行更新表达式<br>3、判断布尔表达式的结果是true还是false<br>布尔表达式true<br>1、执行循环体<br>2、执行更新表达式<br>3、判断布尔表达式的结果是true还是false<br>…</li><li>布尔表达式为false<br>循环结束</li></ul></blockquote><p><strong>循环语句和条件判断语句嵌套使用【for和if的嵌套】</strong></p><blockquote><p><strong>找出1~100所有的奇数</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForTest01</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>第一种方法<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">100</span>;i+=<span class="hljs-number">2</span>)&#123;<br>System.out.println(<span class="hljs-string">&quot;奇数--&gt;&quot;</span> + i);<br>&#125;<br><br>第二种方法<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">100</span>;i++)&#123;<br><span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span> != <span class="hljs-number">0</span>)&#123;<br>System.out.println(i)<br>&#125; <br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-number">12345678910111213141516</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>求1~100所有奇数的和</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForTest02</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">100</span>;i+=<span class="hljs-number">2</span>)&#123;<br>sum+=i;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;sum=&quot;</span> + sum);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3 for循环也可以嵌套for循环</strong></p><blockquote><p>内层循环中的变量名和外层循环中的变量名不能重名</p></blockquote><p><strong>使用for循环输出九九乘法表</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForTest03</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">9</span>；i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=i;j++)&#123;<br><span class="hljs-type">int</span>  a=i*j;<br>System.out.print(i +<span class="hljs-string">&quot;*&quot;</span>+j+<span class="hljs-string">&quot;=&quot;</span>+a );<br>&#125;<br>System.out.println(); <span class="hljs-comment">//换行</span><br><span class="hljs-comment">//System.out.print(&quot;\n&quot;);</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>编写for循环找出1~100中的所有素数</strong></p><blockquote><p><strong>素数：</strong> 又被称为质数，能够被1和自身整除，不能被其他数字整除的数字称为素数。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForTest04</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">100</span>;i++)&#123;<br>            <span class="hljs-type">boolean</span> flag=<span class="hljs-literal">true</span>; <span class="hljs-comment">//标记i是否能被其他数整除</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">2</span>;j&lt;i;j++)&#123; <span class="hljs-comment">//此刻i只能被1和本身整除，所以应从2~i-1</span><br>                <span class="hljs-keyword">if</span>(i%j==<span class="hljs-number">0</span>)&#123; <br>                    flag=<span class="hljs-literal">false</span>;  <span class="hljs-comment">//如果i能被其他数整除，就跳出循环</span><br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (flag)<br>            System.out.print(i+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4、while控制语句、do…while控制语句、break、continue控制循环语句"><a href="#4、while控制语句、do…while控制语句、break、continue控制循环语句" class="headerlink" title="4、while控制语句、do…while控制语句、break、continue控制循环语句"></a>4、while控制语句、do…while控制语句、break、continue控制循环语句</h2><p><strong>1、while循环的语法结构</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span>（布尔表达式）&#123;<br>循环体;<br>&#125;<br><span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><p><strong>2、while循环的执行原理：</strong></p><blockquote><p>判断<a href="https://so.csdn.net/so/search?q=%E5%B8%83%E5%B0%94&spm=1001.2101.3001.7020">布尔</a>表达式的结果，如果结果为true就继续执行循环体，直到布尔表达式的结果为false，循环结束。</p></blockquote><p><strong>3、while循环的循环次数：：0~N次</strong></p><blockquote><p>注意：while循环的循环体可能执行次数为0次。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WhileTest01</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">while</span>(i &gt;j)&#123;<br>    System.out.println(<span class="hljs-string">&quot;死循环&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//编译通过</span><br>    System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>    <br>    <span class="hljs-comment">//编译错误</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    while(10 &gt; 3)&#123;</span><br><span class="hljs-comment">    System.out.println(&quot;死循环&quot;);</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    */</span><br>    <br>    <span class="hljs-comment">//编译错误：无法访问语句</span><br>    <span class="hljs-comment">//System.out.println(&quot;Hello World!&quot;);</span><br>    &#125;<br>    &#125;<br>&#125;<br><span class="hljs-number">1234567891011121314151617181920212223</span><br></code></pre></td></tr></table></figure><h3 id="1、do…while循环控制语句"><a href="#1、do…while循环控制语句" class="headerlink" title="1、do…while循环控制语句"></a>1、do…while循环控制语句</h3><p><strong>1、do…while循环的语法结构</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">do</span>&#123;<br>循环体;<br>&#125;<span class="hljs-keyword">while</span>(布尔表达式);<br></code></pre></td></tr></table></figure><p><strong>2、do…while循环的执行原理</strong></p><blockquote><p>先执行循环体，然后判断布尔表示是是否为true，true则执行，false则循环结束。</p></blockquote><p><strong>3、do…while循环的执行次数</strong></p><blockquote><p>do…while循环的循环体代码片段执行次数是：1~N次【至少一次】</p></blockquote><p><strong>4、使用do…while循环的注意事项</strong></p><blockquote><p>do…while<a href="https://so.csdn.net/so/search?q=%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5&spm=1001.2101.3001.7020">循环语句</a>最终有一个 <strong>“分号”</strong> 别丢了。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DoWhileTest</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">int</span> i=<span class="hljs-number">10</span>;<br><span class="hljs-keyword">do</span>&#123;<br>System.out.println(i);<br>&#125;<span class="hljs-keyword">while</span>(i&gt;<span class="hljs-number">100</span>);  <span class="hljs-comment">//输出10，先执行在进行判断</span><br><br><span class="hljs-keyword">while</span>(i&gt;<span class="hljs-number">100</span>)&#123;<br>System.out.println(<span class="hljs-string">&quot;i--&gt;&quot;</span>+i);<br>&#125; <span class="hljs-comment">//无输出</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、break控制语句"><a href="#2、break控制语句" class="headerlink" title="2、break控制语句"></a>2、break控制语句</h3><blockquote><ul><li>break是java语言当中的关键字，被翻译为“中断&#x2F;折断”。</li><li>break + “;”可以成为一个单独的完整的java语句： <strong>break；</strong></li><li>break语句使用在switch语句当中，用来终止switch的语句执行。</li><li>break语句同样可以使用在循环语句当中，用来终止循环的执行。</li><li>break终止哪个循环呢？</li><li>break；语句使用在for、while、do…while循环语句当中用来跳出循环，终止循环的执行。因为当程序循环到某个条件时，后续的循环就没必要执行了，在执行也是耗费资源，所以可以终止循环，这样可以提高程序的执行效率。</li><li>在默认情况下：break语句终止的是离它最近的循环语句。</li><li>当然也可以指定终止某个循环，需要给循环起名，采用这种语法： <strong>break 循环名称;</strong></li></ul></blockquote><p>以下以for循环为例解释 <strong>break；</strong> 语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BreakTest</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br><span class="hljs-keyword">if</span>(i==<span class="hljs-number">5</span>)<br><span class="hljs-keyword">break</span>;<br>&#125;<br>System.out.println(i); <span class="hljs-comment">//0 1 2 3 4</span><br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">3</span>;j++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br><span class="hljs-keyword">if</span>(i==<span class="hljs-number">5</span>)<br><span class="hljs-keyword">break</span>;<span class="hljs-comment">//这里的break语句终止的是内层for循环，因为这个for离它最近。</span><br><span class="hljs-comment">//这里的break语句不会影响到外层的for循环</span><br>&#125;<br>System.out.println(i); <span class="hljs-comment">//0 1 2 3 4    0 1 2 3 4      0 1 2 3 4</span><br>&#125;<br><br><span class="hljs-comment">//给for循环起名</span><br>for1:<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">3</span>;j++)&#123;<br>for2:<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br><span class="hljs-keyword">if</span>(i==<span class="hljs-number">5</span>)&#123;<br><span class="hljs-keyword">break</span> for1;<span class="hljs-comment">//终止for1循环</span><br>&#125;<br>System.out.println(i); <span class="hljs-comment">//0 1 2 3 4  </span><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、continue控制语句"><a href="#3、continue控制语句" class="headerlink" title="3、continue控制语句"></a>3、continue控制语句</h3><p><strong>1、continue表示：继续&#x2F;go on&#x2F; 下一个</strong></p><p><strong>2、continue也是一个continue关键字加一个分号构成一个单独的完整的java语句，主要出现循环语句当中用来控制循环的执行。</strong></p><p><strong>3、break和continue的区别：</strong></p><blockquote><ul><li>break表示循环不执行了。</li><li>continue表示直接进入下一次循环继续执行。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ContinueTest</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br><span class="hljs-keyword">if</span>(i==<span class="hljs-number">5</span>)<br><span class="hljs-keyword">break</span>;<br>&#125;<br>System.out.println(i); <span class="hljs-comment">//0 1 2 3 4</span><br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br><span class="hljs-keyword">if</span>(i==<span class="hljs-number">5</span>)<br><span class="hljs-keyword">continue</span>; <span class="hljs-comment">//只要这个语句执行，当前本次循环停止，直接进入下一次循环“继续”执行</span><br>&#125;<br>System.out.println(i); <span class="hljs-comment">//0 1 2 3 4 6 7 8 9</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>4、continue也有这样的语法：</strong></p><blockquote><p><strong>continue 循环名称;</strong></p></blockquote><h1 id="四、构造方法"><a href="#四、构造方法" class="headerlink" title="四、构造方法"></a>四、构造方法</h1><h2 id="1、方法的基础知识、语法及含义、方法调用规则"><a href="#1、方法的基础知识、语法及含义、方法调用规则" class="headerlink" title="1、方法的基础知识、语法及含义、方法调用规则"></a>1、方法的基础知识、语法及含义、方法调用规则</h2><h3 id="1、方法"><a href="#1、方法" class="headerlink" title="1、方法"></a>1、方法</h3><blockquote><p>在Java语言当中应该有这样一个机制：</p><ul><li>某个功能代码只需要写一遍</li><li>要使用这个功能，只需要给这个功能传递具体的数据</li><li>这个功能完成之后返回一个最终的结果。</li></ul><p>这样代码就可以重复使用了，提高代码的复用性。【这就是 <strong>“方法”</strong> 】</p></blockquote><blockquote><p>使用这个<strong>方法</strong>我们称为 <strong>“调用&#x2F;invoke”</strong></p></blockquote><h3 id="2、方法的本质"><a href="#2、方法的本质" class="headerlink" title="2、方法的本质"></a>2、方法的本质</h3><blockquote><p>方法就是一段代码片段，并且这段代码片段可以完成某个特定的功能，并且可以被重复使用。<br>方法，对应的英语单词：Method，在C语言中叫做函数：Function、</p></blockquote><blockquote><p>方法定义在类体中，在一个类当中可以定义多个方法，方法编写的位置没有先后顺序，可以随意。</p></blockquote><blockquote><p><strong>方法体中不能再定义方法！！！！！！</strong></p></blockquote><h3 id="3、方法的基础语法"><a href="#3、方法的基础语法" class="headerlink" title="3、方法的基础语法"></a>3、方法的基础语法</h3><h4 id="1、语法结构"><a href="#1、语法结构" class="headerlink" title="1、语法结构"></a>1、语法结构</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符列表] 返回值类型 方法名(形式参数列表)&#123;<br>方法体;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、对以上语法结构进行解释说明："><a href="#2、对以上语法结构进行解释说明：" class="headerlink" title="2、对以上语法结构进行解释说明："></a>2、对以上语法结构进行解释说明：</h4><h5 id="2-1-关于修饰符列表"><a href="#2-1-关于修饰符列表" class="headerlink" title="2.1 关于修饰符列表"></a>2.1 关于修饰符列表</h5><blockquote><ul><li>可选项，不是必须的</li><li>目前统一写成public static</li><li>方法的修饰符列表当中”有static关键字”的话，怎么调用这个方法？<br><strong>类名.方法名(实际参数列表);</strong></li></ul></blockquote><h5 id="2-2-返回值类型"><a href="#2-2-返回值类型" class="headerlink" title="2.2 返回值类型"></a>2.2 返回值类型</h5><blockquote><p><strong>1、什么是返回值？</strong></p><ul><li>一个方法是可以完成某个特定功能的，这个功能结束之后大多数都是需要返回最终执行结果的，执行结果可能是一个具体存在的数据。而这个具体存在的数据就是返回值。</li></ul></blockquote><blockquote><p><strong>2、返回值类型？</strong></p><ul><li>返回值就是一个具体存在的数据，数据都是有类型的，此处需要指定的是返回值的具体类型。</li></ul></blockquote><blockquote><p><strong>3、返回值类型都可以指定哪些类型呢？</strong></p><ul><li>java任意一种类型都可以，包括基本数据类型和所有的引用数据类型。</li></ul></blockquote><blockquote><p><strong>4、也可能这个方法执行结束之后不返回任何数据，java中规定，当一个方法执行结束之后不返回任何数据的话，返回值类型位置必须编写：*void 关键字*。</strong></p></blockquote><blockquote><p><strong>5、返回值类型可以是：</strong></p><ul><li>byte，short，int，long，float，double，boolean，char，string，void…</li></ul></blockquote><blockquote><p>6、返回值类型若不是 void，表示这个方法执行结束之后必须返回一个具体的数值。当方法执行结束的时候，没有返回任何数据的话，编译器报错。怎么返回值呢？代码怎么写呢？“<strong>return 值;</strong>”并且要求“值”的数据类型必须和“方法的返回值类型”一致，不然编译器报错。</p></blockquote><blockquote><p>7、返回类型是void的时候，在方法体当中不能编写“<strong>return 值；</strong>”这样的语句。但是要注意可以编写“<strong>return；</strong>”这样的语句。</p></blockquote><blockquote><p>8、只要带有关键字的语句执行，return语句所在的方法结束。【不是JVM结束，是return所在的方法结束】</p></blockquote><h5 id="2-3-方法名"><a href="#2-3-方法名" class="headerlink" title="2.3 方法名"></a>2.3 方法名</h5><blockquote><ul><li>只要是合法的标识符就行</li><li>方法名最好见名知意</li><li>方法名最好是动词</li><li>方法名首字母要求是小写，后面每个单词首字母大写</li></ul></blockquote><h5 id="2-4-形式参数列表：简称形参"><a href="#2-4-形式参数列表：简称形参" class="headerlink" title="2.4 形式参数列表：简称形参"></a>2.4 形式参数列表：简称形参</h5><blockquote><ul><li>形参是局部变量：int a；double b；…</li><li>形参的个数可以是0~N个</li><li>多个形参之间用“逗号”隔开</li><li>形参中起决定性作用的是形参的数据类型，形参的名字就是局部变量的名字。</li><li>方法在调用的时候，实际给这个方法传递的真实数据被称为：实际参数，简称实参</li><li>实参列表和形参列表必须满足：<br>1 数量相同<br>2 类型对应相同</li><li></li></ul></blockquote><h5 id="2-5-方法体必须由大括号括起来，方法体中的代码有顺序"><a href="#2-5-方法体必须由大括号括起来，方法体中的代码有顺序" class="headerlink" title="2.5 方法体必须由大括号括起来，方法体中的代码有顺序"></a>2.5 方法体必须由大括号括起来，方法体中的代码有顺序</h5><p><strong>实例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//public表示公开的</span><br><span class="hljs-comment">//class表示定义类</span><br><span class="hljs-comment">//MethodTest是一个类名</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodTest</span>&#123; <span class="hljs-comment">//表示定义一个公开的类，起名MethodTest，由于是公开的类，所以源文件名必须为：MethodTest</span><br><span class="hljs-comment">//类体</span><br><span class="hljs-comment">//类体中不能出现直接编写java语句，除声明变量之外</span><br><span class="hljs-comment">//方法出现在类体当中</span><br><br><span class="hljs-comment">//方法</span><br><span class="hljs-comment">//public表示公开的</span><br><span class="hljs-comment">//static表示静态的</span><br><span class="hljs-comment">//void表示方法执行结束后不返回任何数据</span><br><span class="hljs-comment">//main是方法名：主方法</span><br><span class="hljs-comment">//(String[] args)：形式参数列表，其中String[]是一种引用数据类型，args是一个局部变量的变量名</span><br><span class="hljs-comment">//所以以下只有args这个局部变量的变量名是随意的</span><br><span class="hljs-comment">//主方法就需要这样固定编写，这是程序的入口。【SUN公司规定的，必须这样写】</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><br><span class="hljs-comment">//这里的程序是一定会执行的</span><br><span class="hljs-comment">//main方法是JVM负责调用的，是一个入口的位置</span><br><span class="hljs-comment">//从这里作为起点开始执行程序</span><br><span class="hljs-comment">//既然是这样，我们就可以在这里编写java语句来调用其他方法</span><br><span class="hljs-comment">//调用MethodTest的sum方法，传递两个实参</span><br>MethodTest.sum(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>);<span class="hljs-comment">//(10,20)实参列表</span><br><br><span class="hljs-comment">//注意：方法体当中的代码是有顺序的，遵循自上而下的顺序以此执行</span><br><span class="hljs-comment">//上一行代码的程序执行不结束，无法执行下一行代码。</span><br><br><span class="hljs-comment">//一个方法可以被重复使用，重复调用</span><br><span class="hljs-type">int</span> a=<span class="hljs-number">100</span>;<br>MethodTest.sum(a,<span class="hljs-number">500</span>);<span class="hljs-comment">// (a,500)实参列表</span><br><br><span class="hljs-comment">//再次调用方法</span><br><span class="hljs-type">int</span> k=<span class="hljs-number">90</span>;<br><span class="hljs-type">int</span> f=<span class="hljs-number">10</span>;<br>MethodTest.sum(k,f);<span class="hljs-comment">//(k,f)实参列表</span><br>&#125;<br><br><span class="hljs-comment">//自定义方法，不是程序的入口</span><br><span class="hljs-comment">//方法的作用：计算两个int类型数据的和，不要求返回结果，但是要求将结果直接输出到控制台</span><br><span class="hljs-comment">//修饰符列表：public static</span><br><span class="hljs-comment">//返回值类型：void</span><br><span class="hljs-comment">//方法名：sum</span><br><span class="hljs-comment">//形式参数列表：(int x，int y)</span><br><span class="hljs-comment">//方法体：主要任务是求和之后输出计算结果</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>&#123;<br>System.out.println(x+<span class="hljs-string">&#x27;+&#x27;</span>+ y +<span class="hljs-string">&#x27;=&#x27;</span>+ (x+y))<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、方法怎么调用？"><a href="#3、方法怎么调用？" class="headerlink" title="3、方法怎么调用？"></a>3、方法怎么调用？</h4><p>方法只定义不去调用是不会执行的，只有在调用的时候才会执行。<br><strong>语法规则：</strong>《方法的修饰符列表当中有static》</p><blockquote><ul><li><strong>类名.方法名(实参列表)；</strong>&lt;这是一条java语句，表示调用某个类的某个方法，传递这样的实参。&gt;</li></ul></blockquote><h2 id="2、java的方法调用、调用的实参与形参类型、方法返回值类型不是void、深入return语句"><a href="#2、java的方法调用、调用的实参与形参类型、方法返回值类型不是void、深入return语句" class="headerlink" title="2、java的方法调用、调用的实参与形参类型、方法返回值类型不是void、深入return语句"></a>2、java的方法调用、调用的实参与形参类型、方法返回值类型不是void、深入return语句</h2><h3 id="1、Java语言的方法"><a href="#1、Java语言的方法" class="headerlink" title="1、Java语言的方法"></a>1、Java语言的方法</h3><p><strong>实例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodTest01</span>()&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>&#123;<br>System.out.println(a+<span class="hljs-string">&quot;+&quot;</span>+b+<span class="hljs-string">&quot;=&quot;</span>+(a+b));<br><span class="hljs-comment">//调用doSome方法</span><br>MethodTest.doSome();<br>&#125;<br><span class="hljs-comment">//主方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-comment">//调用sum方法</span><br>MethodTest.sum(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSome</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;do some!&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>以上代码了看出：方法的调用不一定在main方法当中。只要是程序可以执行到的位置，都可以调用其他的方法。</strong></p><h4 id="1、方法调用的时候实参和形参要求个数对应相同，数据类型对应相同。"><a href="#1、方法调用的时候实参和形参要求个数对应相同，数据类型对应相同。" class="headerlink" title="1、方法调用的时候实参和形参要求个数对应相同，数据类型对应相同。"></a>1、方法调用的时候实参和形参要求个数对应相同，数据类型对应相同。</h4><p><strong>类型不同的时候要求能够进行相应的自动类型转换</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodTest02</span>()&#123;<br><span class="hljs-comment">//主方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>MethodTest02.sum();<span class="hljs-comment">//编译错误：参数数量不同</span><br>MethodTest02.sum(<span class="hljs-literal">true</span>,<span class="hljs-literal">false</span>);<span class="hljs-comment">//编译错误：实参和形参的类型不是对应相同的</span><br>MethodTest02.sum(<span class="hljs-number">10L</span>,<span class="hljs-number">20L</span>);<span class="hljs-comment">//编译通过</span><br>MethodTest02.sum(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>);<span class="hljs-comment">//编译通过：存在自动类型转换：int--&gt;long</span><br>MethodTest02.sum(<span class="hljs-number">3.0</span>,<span class="hljs-number">20</span>);<span class="hljs-comment">//编译错误：参数类型不是对应相同的</span><br>MethodTest02.sum((<span class="hljs-type">long</span>)<span class="hljs-number">3.0</span>,<span class="hljs-number">20</span>);<span class="hljs-comment">//编译通过</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">long</span> a,<span class="hljs-type">long</span> b)</span>&#123;<br>System.out.println(a+<span class="hljs-string">&quot;+&quot;</span>+b+<span class="hljs-string">&quot;=&quot;</span>+(a+b));<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、方法调用"><a href="#2、方法调用" class="headerlink" title="2、方法调用"></a>2、方法调用</h3><blockquote><p>1、方法的修饰符列表当中有<a href="https://so.csdn.net/so/search?q=static&spm=1001.2101.3001.7020">static</a>关键字，完整的调用方法是：<strong>类名 . 方法名（实参列表）</strong><br>2、但是，有时候 <strong>“ 类名.”</strong> 可以省略，什么情况下可以省略呢？</p><ul><li>对于方法的<strong>修饰符列表</strong>当中有<strong>static关键字</strong>的：<strong>“类名.”</strong> 可以省略不写。</li><li>调用<strong>同个类</strong>中的方法可省略不写</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodTest03</span>()&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;main begin&quot;</span>);<br>m1();<br>System.out.println(<span class="hljs-string">&quot;main over&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;m1 begin&quot;</span>);<br>m2();<br>System.out.println(<span class="hljs-string">&quot;m2 over&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m2</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;m2 begin&quot;</span>);<br>m3();<br>System.out.println(<span class="hljs-string">&quot;m2 over&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m3</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;m3 begin&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;m3 over&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>输出结果：</strong><br><img src="/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/99a43e292e2a680f925b6363d7a934b4-1741868481336-89.png" alt="输出结果"></p><blockquote><p><strong>方法中的代码是自上而下的顺序依次执行的</strong></p></blockquote><h4 id="1、方法的返回值类型不是void的时候"><a href="#1、方法的返回值类型不是void的时候" class="headerlink" title="1、方法的返回值类型不是void的时候"></a>1、方法的返回值类型不是void的时候</h4><blockquote><ul><li>返回值类型不是void的时候：要求方法必须保证百分百的执行“return 值；”这样的语句来完成值的返回。没有这个语句编译器会报错。</li><li>一个方法有返回值的时候，当我们调用这个方法的时候，方法返回了一个值，对于调用者来说，这个返回值可以选择接收，也可以选择不接收。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodTest04</span>()&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-comment">//调用方法</span><br>divide(<span class="hljs-number">10</span>,<span class="hljs-number">3</span>);<span class="hljs-comment">//这里没有接收这个方法的返回数据</span><br><br><span class="hljs-comment">//这里接收返回值</span><br><span class="hljs-comment">//采用变量接收</span><br><span class="hljs-comment">//变量的数据类型需要和返回值的数据类型相同，或者可以自动类型转换</span><br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> divide(<span class="hljs-number">10</span>,<span class="hljs-number">3</span>);<br>&#125;<br><br>`<span class="hljs-comment">/*</span><br><span class="hljs-comment">需求：</span><br><span class="hljs-comment">请定义并实现一个方法，该方法可以计算两个int类型数据的商，</span><br><span class="hljs-comment">要求将最终计算结果返回给调用者。</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//编译错误：缺少返回值</span><br><span class="hljs-comment">/*public static int divide(int a, int b)&#123;</span><br><span class="hljs-comment">return;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">//编译错误：方法定义的时候要求返回一个int类型，此时返回布尔类型，类型不兼容</span><br><span class="hljs-comment">public static int divide(int a, int b)&#123;</span><br><span class="hljs-comment">return true;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">//可以：但是具体方法体中编写的代码无法满足当前的需求</span><br><span class="hljs-comment">public static int divide(int a, int b)&#123;</span><br><span class="hljs-comment">return 1;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">public static int divide(int a, int b)&#123;</span><br><span class="hljs-comment">int c=a/b;</span><br><span class="hljs-comment">return c;</span><br><span class="hljs-comment">&#125;*/</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">divide</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br><span class="hljs-keyword">return</span> a/b;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、深入return语句"><a href="#2、深入return语句" class="headerlink" title="2、深入return语句"></a>2、深入return语句</h4><blockquote><ul><li>带有return关键字的java语句只要执行，所在的方法执行结束。</li><li>在“同一个作用域”当中，return语句下面不能编写任何代码，因为这些代码永远都执行不到，所以编译报错。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodTest05</span>()&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">int</span> reValue=m();<br>System.out,println(reValue);<br>&#125;<br><br><span class="hljs-comment">//编译报错：缺少返回语句，以下程序编译器认为无法百分百保证“return 1；”会执行</span><br><span class="hljs-comment">/*public static int m()&#123;</span><br><span class="hljs-comment">int a=10;</span><br><span class="hljs-comment">if(a&gt;3)&#123;</span><br><span class="hljs-comment">return 1;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">m</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span> a=<span class="hljs-number">10</span>;<br><span class="hljs-keyword">if</span>(a&gt;<span class="hljs-number">3</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-comment">//这里不能编写代码，编译错误，因为无法执行访问的语句</span><br><span class="hljs-comment">//System.out.println(&quot;Hello&quot;);</span><br>&#125;<br><span class="hljs-comment">//这里的代码可以执行</span><br>System.out.println(<span class="hljs-string">&quot;Hello&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>在返回值类型是void的方法当中使用“return；”语句。“return；”语句当中出现在返回值为void的方法当中主要是为了终止方法的执行。</strong></p><blockquote><p>return；直接终止方法；break只是终止循环。<br>return更强</p></blockquote><h2 id="3、方法执行JVM内存分析"><a href="#3、方法执行JVM内存分析" class="headerlink" title="3、方法执行JVM内存分析"></a>3、方法执行JVM内存分析</h2><h3 id="1、方法在执行过程当中，在JVM中的内存是如何分配的呢，内存是如何变化的？"><a href="#1、方法在执行过程当中，在JVM中的内存是如何分配的呢，内存是如何变化的？" class="headerlink" title="1、方法在执行过程当中，在JVM中的内存是如何分配的呢，内存是如何变化的？"></a>1、方法在执行过程当中，在JVM中的内存是如何分配的呢，内存是如何变化的？</h3><blockquote><ul><li><strong>方法只定义，不调用，是不会执行的，并且在JVM中也不会给该方法分配“运行所属”的内存空间。只有在调用这个方法的时候，才会动态的给这个方法分配所属的空间</strong>。</li><li><strong>在JVM内存划分上有这样三块主要的内存空间：</strong><br>1、方法区内存<br>2、堆内存<br>3、栈内存</li><li><strong>关于栈数据结构</strong>：<br>1、栈：stack，是一种数据结构<br>2、数据结构反应的是数据的存储形态。<br>3、数据结构是独立的学科，不属于任何编程语言的范畴，只不过在大多数编程语言当中要使用数据结构。<br>4、作为程序员需要提前精通：数据结构+算法【计算机专业必修的一门语言】<br>5、常见的数据结构：数组、队列、栈、链表、二叉树、哈希表…</li><li><strong>方法代码片段存在哪里？方法执行的时候执行过程的内存在哪里分配？</strong><br>1、方法片段属于.class字节码文件的一部分，字节码文件在类加载的时候，将其放到了方法区当中。所以JVM中的三块主要的内存空间中的方法区内存最先有数据，存放了代码片段。<br>2、代码片段虽然在方法区内存当中只有一份，但是可以被重复调用。每一次调用这个方法的时候，需要给该方法分配独立的活动场所，在栈内存中分配。【栈内存中分配方法运行的所属空间】</li><li><strong>方法在调用的时候，会给该方法分配独立的内存空间，在栈中分配，此时发生压栈动作，方法执行结束之后，给该方法分配的内存空间全部释放，此时发生弹栈动作。</strong><br>压栈：给方法分配内存。<br>弹栈：释放该方法的内存空间。</li><li><strong>局部变量在栈中存储。局部变量在运行阶段内存在栈中分配。</strong></li></ul></blockquote><p><img src="/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/a0e60c306f4ab808af5b6e0c97d3642e-1741868481336-90.png" alt="在这里插入图片描述"><br><strong>栈内存:</strong><br>1） 是为java方法提供运行空间的<br>2） 方法一旦被调用就会在栈中创建对应的栈帧，而方法的整个执行过程就是方法对应的栈帧从入栈到出栈的过程。换言之，就是方法被调用进栈（压栈 入栈），方法执行结束出栈（弹栈）。<br>3） 栈是先进后出后进先出（先被调用的方法最后结束，后被调用的方法最先结束）<br>4） 栈中的变量都是属于方法的，所以都是<strong>局部变量</strong>，且<strong>局部变量必须初始化值</strong>。<br>5） 栈生命周期与其所属线程的生命周期一致，可以认为栈具有自动销毁机制。</p><p><strong>堆内存:</strong><br>1） 是为实体对象来开辟空间的，换言之就是实体对象的空间都在堆中开辟。凡是被new出来的都是对象。<br>2） 堆中的变量是对象变量，因为是属于对象的，且是随着对象的创建而产生随着对象的销毁而销毁。<br>3） 堆中的变量（对象变量）都有默认值：</p><blockquote><ul><li>整数：0</li><li>浮点型：0.0</li><li>布尔型：false</li><li>char型：’ ’</li><li>对象：null</li></ul></blockquote><p>4） 堆没有自动销毁机制，它里面的垃圾由垃圾回收器负责收集（通过收集算法判断哪个对象属于垃圾然后再清理）<br>5） 堆中的空间都有一个16进制的首地址作为地址进行区分。</p><p><strong>方法区:</strong><br>方法区中存放已经被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。<br>常量是存放在方法区中的运行时常量池中的。</p><p><strong>重点：方法调用的时候，在参数传递的时候，实际上传递得是变量中保存的那个“值”传过去了。</strong></p><h2 id="4、方法重载机制overload、方法递归"><a href="#4、方法重载机制overload、方法递归" class="headerlink" title="4、方法重载机制overload、方法递归"></a>4、方法重载机制overload、方法递归</h2><h3 id="1、方法重载-overload"><a href="#1、方法重载-overload" class="headerlink" title="1、方法重载(overload)"></a>1、方法重载(overload)</h3><blockquote><ul><li>功能虽然不同，但是“功能相似”的时候，方法重载机制可以让相似的方法就像在用一个方法一样。【Java支持这种机制而有些语言则不支持，例如JavaScript】</li><li><strong>功能相似的时候，方法名可以相同。</strong></li></ul></blockquote><h4 id="1、什么时候考虑使用方法重载？"><a href="#1、什么时候考虑使用方法重载？" class="headerlink" title="1、什么时候考虑使用方法重载？"></a>1、什么时候考虑使用方法重载？</h4><ul><li>功能相似的时候，尽可能让方法名相同【但是功能不同&#x2F;不相似的时候，尽可能让方法名不同】</li></ul><h4 id="2、什么条件满足之后构成了方法重载"><a href="#2、什么条件满足之后构成了方法重载" class="headerlink" title="2、什么条件满足之后构成了方法重载"></a>2、什么条件满足之后构成了方法重载</h4><ul><li>在同一个类当中</li><li>方法名相同</li><li>参数列表不同：<br>1、数量不同:<code>public static void m1()&#123;&#125; 与 public static void m1(int a)&#123;&#125;</code><br>2、顺序不同: <code>public static void m2(int a,double b)&#123;&#125; 与 public static void m2(double a,int b)&#123;&#125;</code><br>3、类型不同:<code>public static void m3(int x)&#123;&#125; 与 public static void m3(double x)&#123;&#125;</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">方法重复，编译错误。<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m4</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>&#123;&#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m4</span><span class="hljs-params">(<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> a)</span>&#123;&#125;<br></code></pre></td></tr></table></figure><h4 id="3、方法重载和什么有关系，和什么没有关系"><a href="#3、方法重载和什么有关系，和什么没有关系" class="headerlink" title="3、方法重载和什么有关系，和什么没有关系"></a>3、方法重载和什么有关系，和什么没有关系</h4><ul><li>方法重载和方法名+参数列表有关系</li><li>方法重载和返回值类型无关</li><li>方法重载和修饰符列表无关</li></ul><h3 id="2、方法递归"><a href="#2、方法递归" class="headerlink" title="2、方法递归"></a>2、方法递归</h3><ul><li><strong>什么是递归？</strong><br>即：方法自身调用自身。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">a()&#123;<br>a();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>递归是很耗栈内存的，递归算法可以不用的时候尽量别用。</strong></li><li><strong>以下程序运行的时候发生这样的一个错误</strong>【不是异常，是错误error】：<br>java.lang.StackOverflowError<br>栈内存溢出错误<br>错误发生无法晚挽回，只有一个结果。就是JVM停止工作。</li><li><strong>递归必须有结束条件，没有结束条件一定会发生栈内存溢出错误。</strong></li><li><strong>递归即使有了结束条件，即便结束条件是正确的，也可能会发生栈内存溢出错误，因为递归太深了。</strong></li></ul><p><strong>注意：</strong></p><ul><li>递归可以不使用尽量别用。</li><li>但是有些情况下该功能的实现必须依靠递归方式。</li></ul><p><strong>例子：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//递归计算前n个数的和：</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RecursionTest01</span>&#123;<br>publci <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">int</span> n=<span class="hljs-number">4</span>;<br><span class="hljs-type">int</span> reValue=sum(n);<br>System.out.println(reValue);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br><span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> n+sum(n-<span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//递归计算n的阶乘：</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RecursionTest02</span>&#123;<br>publci <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">int</span> n=<span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> reValue=method(n);<br>System.out.println(reValue);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">method</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br><span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> n*method(n-<span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="五、面向对象及封装"><a href="#五、面向对象及封装" class="headerlink" title="五、面向对象及封装"></a>五、面向对象及封装</h2><h2 id="1、面向对象和面向过程的区别、面向对象、类和对象概念、类的定义"><a href="#1、面向对象和面向过程的区别、面向对象、类和对象概念、类的定义" class="headerlink" title="1、面向对象和面向过程的区别、面向对象、类和对象概念、类的定义"></a>1、面向对象和面向过程的区别、面向对象、类和对象概念、类的定义</h2><h3 id="1、面向对象和面向过程的区别"><a href="#1、面向对象和面向过程的区别" class="headerlink" title="1、面向对象和面向过程的区别"></a>1、<a href="https://so.csdn.net/so/search?q=%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1&spm=1001.2101.3001.7020">面向对象</a>和面向过程的区别</h3><ul><li><strong>面向过程：</strong> 主要关注点是：实现的具体过程，因果关系【集成显卡的开发思路】<br><strong>优点：</strong> 对于业务逻辑比较简单的程序，可以达到快速开发，前期投入成本较低。<br><strong>缺点：</strong> 采用面向过程的方式开发很难解决非常复杂的业务逻辑，另外面向过程的方式导致软件元素之间“耦合度”非常高，只要其中一环出现了问题，整个系统受到影响，导致最终的软件扩展力差。另外，由于没有独立体的概念，所以无法达到组件复用。</li><li><strong>面向对象：</strong> 主要关注点是：主要关注对象【独立体】能完成哪些功能。【独立显卡的开发思路】<br><strong>优点：</strong> 耦合度低，扩展能力强。更容易解决现实世界当中更复杂的业务逻辑，组件复用性强。<br><strong>缺点：</strong> 前期投入成本高，需要进行独立体的抽取，大量的系统分析与设计。</li></ul><blockquote><ul><li>C语言是纯面向过程的，C++半面向对象、Java纯面向对象</li></ul></blockquote><h3 id="2、面向对象的三大特征"><a href="#2、面向对象的三大特征" class="headerlink" title="2、面向对象的三大特征"></a>2、面向对象的三大特征</h3><ul><li><strong>封装</strong></li><li><strong>继承</strong></li><li><strong>多态</strong></li></ul><p>注：所有面向对象的编程语言都有这三大特征。</p><p><strong>采用面向对象的方式开发一个软件</strong>，生命周期当中：【整个生命周期中贯穿使用OO面向对象方式】</p><ul><li>面向对象的分析：OOA</li><li>面向对象的设计：OOD</li><li>面向对象的编程：OOP</li></ul><h3 id="3、类的对象的概念"><a href="#3、类的对象的概念" class="headerlink" title="3、类的对象的概念"></a>3、类的对象的概念</h3><h4 id="1、什么是类？"><a href="#1、什么是类？" class="headerlink" title="1、什么是类？"></a>1、什么是类？</h4><ul><li>类在现实世界当中是不存在的，是一个模板，是一个概念。是人类大脑思考抽象的结果。</li><li>类代表了一种事物。</li><li>在现实世界中，对象A与对象B之间具有共同特征，进行抽象总结出一个模板，这个模板被称为类。</li></ul><h4 id="2、什么是对象？"><a href="#2、什么是对象？" class="headerlink" title="2、什么是对象？"></a>2、什么是对象？</h4><ul><li>对象是实际存在的个体。现实世界当中实际存在。</li></ul><h4 id="4、软件开发的过程："><a href="#4、软件开发的过程：" class="headerlink" title="4、软件开发的过程："></a>4、软件开发的过程：</h4><ul><li>程序员先观察现实世界，从现实世界当中寻找对象</li><li>寻找了N个对象之后，发现所有的对象都有共同特征</li><li>程序员在大脑中形成一个模板【类】</li><li>Java程序员可以通过java代码来表述这个类</li><li>Java程序中有了类的定义</li><li>然后通过类就可以创建对象</li><li>有了对象之后，可以让对象直接协作起来形成一个系统。</li></ul><p><strong>类–【实例化】-&gt;对象</strong></p><p><strong>对象又被称为实例&#x2F;instance</strong></p><p><strong>对象–【抽象】–&gt;类</strong></p><p><strong>重点：</strong></p><ul><li>类描述的是对象的共同特征。</li><li>共同特征例如：身高特征<br>这个身高特征在访问的时候，必须先创建对象，通过对象去访问这个特征。因为这个特征具体的某个对象上之后，值不同。有的对象身高1.80，有的对象身高2.80.</li></ul><h4 id="5、一个类主要描述什么信息呢？"><a href="#5、一个类主要描述什么信息呢？" class="headerlink" title="5、一个类主要描述什么信息呢？"></a>5、一个类主要描述什么信息呢？</h4><p>一个类主要描述的是：<strong>状态+动作</strong>。<br>状态信息：名字、身高、性别、年龄<br>动作信息：吃、喝、玩、乐</p><ul><li>状态–&gt;一个类的属性</li><li>动作–&gt;一个类的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">类&#123;<br>属性; <span class="hljs-comment">//描述对象的状态信息</span><br>方法; <span class="hljs-comment">//描述对象的动作信息</span><br>&#125;<br></code></pre></td></tr></table></figure><p>注意：状态和动作当具体到某个对象上之后，发现最终的结果可能不一样。</p><h2 id="4、类的定义【开始编写代码】"><a href="#4、类的定义【开始编写代码】" class="headerlink" title="4、类的定义【开始编写代码】"></a>4、类的定义【开始编写代码】</h2><p><strong>语法结构：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符列表] class 类名&#123;<br>属性；<br>方法；<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>重点：属性通常是采用一个变量的形式来完成定义的。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">定义一个类，类名Student<br>Student是一个类。代表了所有的学生对象，是一个学生模板<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<span class="hljs-comment">//定义一个公开的类</span><br><br><span class="hljs-comment">//属性【描述的是对象的状态信息】</span><br><span class="hljs-comment">//属性通常采用变量的方式来定义</span><br><span class="hljs-comment">//在类体当中，方法体之外定义的变量被称为“成员变量”</span><br><span class="hljs-comment">//成员变量没有赋值，系统赋默认值：一切向0看齐。</span><br><span class="hljs-type">int</span> no;<span class="hljs-comment">//学号</span><br>String name;<span class="hljs-comment">//姓名</span><br><span class="hljs-type">boolean</span> sex;<span class="hljs-comment">//性别</span><br><span class="hljs-type">int</span> age;<span class="hljs-comment">//年龄</span><br>String address;<span class="hljs-comment">//住址</span><br><span class="hljs-comment">//方法</span><br><span class="hljs-comment">//方法描述的是对象的动作信息</span><br><span class="hljs-comment">//当前例子就只描述属性，不描述方法。</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2、对象的创建和使用、内存分析"><a href="#2、对象的创建和使用、内存分析" class="headerlink" title="2、对象的创建和使用、内存分析"></a>2、对象的创建和使用、内存分析</h2><h3 id="1、对象的创建和使用"><a href="#1、对象的创建和使用" class="headerlink" title="1、对象的创建和使用"></a>1、对象的创建和使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OOTest01</span>&#123;<br>publci <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">int</span> i=<span class="hljs-number">10</span>;<br><span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br><br><span class="hljs-type">int</span> StuNo=s.no;<br>System.out.println(<span class="hljs-string">&quot;学号 =&quot;</span> + StuNo);<span class="hljs-comment">//0【默认值】</span><br>System.out.println(<span class="hljs-string">&quot;学号 =&quot;</span> + s.no);<span class="hljs-comment">//0【默认值】</span><br>s.no=<span class="hljs-number">10</span>;<br>System.out.println(<span class="hljs-string">&quot;学号 =&quot;</span> + s.no);<span class="hljs-comment">//10</span><br><br><span class="hljs-comment">//再通过类实例化一个全新的对象</span><br><span class="hljs-comment">//stu是一个引用</span><br><span class="hljs-comment">//stu同时也是一个局部变量</span><br><span class="hljs-comment">//Student是变量的数据类型</span><br><span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>System.out.println(<span class="hljs-string">&quot;学号 =&quot;</span> + stu.no);<span class="hljs-comment">// 0</span><br><br>System.out.println(<span class="hljs-string">&quot;学号 =&quot;</span> + Student.no);<span class="hljs-comment">//编译错误，不能直接采用“类名”的方式访问</span><br><span class="hljs-comment">//因为no是实例变量，对象级别的变量，变量存储在java对象的内部，必须先有对象，通过对象才能访问no这个实例变量，不能直接通过“类名”访问</span><br>&#125;<br>&#125;<br><span class="hljs-comment">//学生类</span><br><span class="hljs-comment">//学生类是一个模板</span><br><span class="hljs-comment">//描述了所有学生的共同特征【状态+行为】</span><br><span class="hljs-comment">//当前类只描述学生的状态信息【属性】</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br><span class="hljs-comment">//类体=属性+方法</span><br><br><span class="hljs-comment">//属性【存储数据采用变量的形式】</span><br><span class="hljs-comment">//由于变量定义在类体当中，方法体之外，这种变量称为成员变量</span><br><span class="hljs-comment">//所有学生都有学号信息</span><br><span class="hljs-comment">//但是每一一个学生的学号都是不同的</span><br><span class="hljs-comment">//所以要访问这个学号必须先创建对象，通过对象去访问学号信息</span><br><span class="hljs-comment">//学号信息不能直接通过&quot;类&quot;去访问，所以这种成员变量又被叫做:实例变量</span><br><span class="hljs-comment">//对象又被称为实例，实例变量又被称为对象变量。【对象级别的变量】</span><br><span class="hljs-comment">//不创建对象，这no变量的内存空间是不存在的，只有创建了对象，这个no变量内存空间才会创建。</span><br><span class="hljs-type">int</span> no;<br>String name;<span class="hljs-comment">//姓名</span><br><span class="hljs-type">boolean</span> sex;<span class="hljs-comment">//性别</span><br><span class="hljs-type">int</span> age;<span class="hljs-comment">//年龄</span><br>String address;<span class="hljs-comment">//住址</span><br></code></pre></td></tr></table></figure><ul><li>通过一个类可以实例化N个对象，</li><li>实例化对象的语法：<code>new 类名()</code></li><li>new是java语言当中的一个运算符</li><li>new运算符的作用是创建对象，在JVM堆内存当中开辟新的内存空间</li><li>方法区内存：在类加载的时候，class字节码代码片段被加载到该内存空间当中。</li><li>栈内存（局部变量）：方法代码片段执行的时候，会给该方法分配内存空间，在栈内存中压栈。</li><li>堆内存：new的对象在堆内存中存储</li></ul><p>对于<code>Student s = new Student ();</code></p><ul><li>student是一个引用数据类型</li><li>s是一个变量名</li><li>new Student()是一个学生对象</li><li>s是一个局部变量【在栈内存中存储】：<strong>引用</strong></li><li><strong>什么是对象？</strong> new运算符在堆内存中开辟的内存空间称为对象。</li><li><strong>什么是引用？</strong> 引用是一个变量，只不过这个变量中保存了另一个java对象的内存地址。</li><li>java语言当中，程序员不能直接操作堆内存，java中没有指针，不像C语言</li><li>java语言当中，程序员只能通过“引用”去访问堆内存当中对象内部的实例变量。</li></ul><h3 id="2、访问实例变量的语法格式："><a href="#2、访问实例变量的语法格式：" class="headerlink" title="2、访问实例变量的语法格式："></a>2、访问实例变量的语法格式：</h3><p>读取数据：引用.变量名<br>修改数据：引用.变量名 &#x3D; 值<br><code>int StuNo=s.no;</code></p><p>局部变量在栈<a href="https://so.csdn.net/so/search?q=%E5%86%85%E5%AD%98&spm=1001.2101.3001.7020">内存</a>中存储<br>成员变量中的实例变量在堆内存的java对象内部存储</p><p>实例变量是一个对象一份，100个对象有100份</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Customer</span><br>&#123;<br><span class="hljs-type">int</span> id;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OOTest02</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>Customer c= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>();<br>System.out.println(c.id); <span class="hljs-comment">//0</span><br><br>c=<span class="hljs-literal">null</span>;<br><span class="hljs-comment">//以下程序编译可以通过，因为符合语法</span><br><span class="hljs-comment">//运行出现空指针异常</span><br><span class="hljs-comment">//空引用访问“实例”相关的数据一定会出现空指针异常</span><br><span class="hljs-comment">//java.lang.NullPointerException</span><br>System.out.println(c.id);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>“实例”相关的数据表示：这个访问的时候必须有对象的参与。这种数据就是实例相关的数据。</p><p><strong>重点：</strong> 实例变量必须先创建对象，通过引用的方式访问，不能直接使用<code>类名.</code>的方式访问</p><h3 id="3、内存分析"><a href="#3、内存分析" class="headerlink" title="3、内存分析"></a>3、内存分析</h3><p>1、JVM ( Java虚拟机)主要包括三块内存空间.分别是:栈内存、堆内存、方法区内存。</p><p>2、堆内存和方法区内存各有1个。一个线程一个栈内存。</p><p>3、方法调用的时候,该方法所需要的内存空间在栈内存中分配,称为压栈。方法执行结束之后,该方法所属的内存空间释放,称为弹栈。</p><p>4、栈中主要存储的是方法体当中的局部变量。</p><p>5、方法的代码片段以及整个类的代码片段都被存储到方法区内存当中,在类加载的时候这些代码片段会载入。</p><p>6、在程序执行过程中使用new运算符创建的java对象.存储在堆内存当中。对象内部有实例变量,所以实例变量存储在堆内存当中。</p><p>7、<strong>变量分类：</strong></p><ul><li>局部变量[方法体中声明]</li><li>成员变量[方法体外声明]<br>实例变量[前边修饰符没有static]<br>静态变量[前边修饰符中有static]</li></ul><p>8、<strong>静态变量存储在方法区内存当中。[先背会]</strong></p><p>9、三块内存当中<strong>变化最频繁</strong>的是<strong>栈内存</strong>,最先有数据的是方法区内存,垃圾回收器主要针对的是堆内存。</p><p>10、<strong>垃圾回收器</strong>[自动垃圾回收机制、GC机制]什么时候会考虑将某个java对象的内存回收呢?</p><ul><li><strong>当堆内存当中的java对象成为垃圾数据的时候.会被垃圾回收器回收。</strong></li></ul><p>11、<strong>什么时候堆内存中的java对象会变成垃圾呢?</strong></p><ul><li>没有更多的引用指向它的时候。这个对象无法被访问,因为访问对象只能通过引用的方式访问。</li></ul><h2 id="3、面向对象的封装性、static"><a href="#3、面向对象的封装性、static" class="headerlink" title="3、面向对象的封装性、static"></a>3、面向对象的封装性、static</h2><h3 id="1、封装的好处："><a href="#1、封装的好处：" class="headerlink" title="1、封装的好处："></a>1、封装的好处：</h3><ul><li>1、封装之后，对于那个事物来说，看不到这个事物比较复杂的一面，只能看到该事物简单的一面。复杂性封装，对外<strong>提供简单的操作入口</strong>。照相机就是一个很好的案例，照相机的实现原理比较复杂，但是对于使用照相机的人来说，操作起来是非常方便的。还有像电视机也是封装的，电视机内存实现非常复杂，但是对于使用者来说不需要关心内部的实现原理，只需要会操作遥控器即可。</li><li>2、封装之后会形成真正的“对象”，真正的“<strong>独立体</strong>”。</li><li>3、封装就意味着以后的程序可以重复使用。并且这个事物应该适应性比较强，在任何场合都可以使用。【<strong>可重用性</strong>】</li><li>4、封装之后，对于事物本身，提高了安全性【<strong>安全级别高</strong>】</li></ul><h3 id="2、封装的步骤："><a href="#2、封装的步骤：" class="headerlink" title="2、封装的步骤："></a>2、封装的步骤：</h3><p>1、所有属性私有化，使用private关键字进行修饰，private表示私有的，修饰的所有数据只能在本类中访问</p><p>2、对外提供简单的操作入口，也就是说外部程序要想访问age属性，必须通过这些简单的入口进行访问：</p><ul><li>对外提供两个公开的方法，分别是set方法和get方法</li><li>想修改age属性，调用set方法</li><li>想读取age属性，调用get方法</li></ul><p>3、set方法的命名规范：<code>public void set + 属性名首字母大写（形参）&#123; &#125;;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span>&#123; <br>age = a; <br>&#125;<br></code></pre></td></tr></table></figure><p>4、get方法的命名规范：<code>public 返回值类型 get + 属性名首字母大写（形参）&#123; &#125;;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> age;<br>&#125;<br></code></pre></td></tr></table></figure><p>5、需要背会的：</p><ul><li>setter和getter方法没有static关键字</li><li>有static关键字修饰方法怎么调用？<code>类名.方法名(实参);</code></li><li>没有static关键字修饰方法怎么调用？<code>引用.方法名(实参);</code></li></ul><p><strong>例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserTest</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br><span class="hljs-comment">//编译报错，age属性私有化，在外部程序中不能直接访问</span><br><span class="hljs-comment">//从此之后age属性非常的安全，但是有点太安全了。</span><br><span class="hljs-comment">//对于目前程序来说，age属性彻底在外部访问不到了。</span><br><span class="hljs-comment">//System.out.println(user.age);</span><br>       <br>       <span class="hljs-comment">//修改</span><br>       user.setAge(-<span class="hljs-number">100</span>);<span class="hljs-comment">//对不起，您提供的年龄不合法</span><br>       <span class="hljs-comment">//读取</span><br>       System.out.println(user.getAge());<span class="hljs-comment">//0</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span><br>&#123;<br><span class="hljs-comment">//属性私有化</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>&#125;<br><br><span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span>&#123; <br><span class="hljs-comment">//编写业务逻辑代码进行安全控制</span><br><span class="hljs-comment">//age = a; </span><br><br><span class="hljs-keyword">if</span>(a&lt;<span class="hljs-number">0</span>||a&gt;<span class="hljs-number">150</span>)&#123;<br>System.out.println(<span class="hljs-string">&quot;对不起，您提供的年龄不合法&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">//程序可以进行到这里的话，说明a是合法的，则进行赋值运算</span><br>age = a; <br>&#125;<br><br><span class="hljs-keyword">public</span>  <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> age;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4、java构造方法、构造器、对象与引用的概念、参数传递"><a href="#4、java构造方法、构造器、对象与引用的概念、参数传递" class="headerlink" title="4、java构造方法、构造器、对象与引用的概念、参数传递"></a>4、java构造方法、构造器、对象与引用的概念、参数传递</h2><h3 id="1、关于java类中中的构造方法："><a href="#1、关于java类中中的构造方法：" class="headerlink" title="1、关于java类中中的构造方法："></a>1、关于java类中中的构造方法：</h3><p>1、构造方法又被称为构造函数&#x2F;构造器&#x2F;Constructor</p><p>2、构造方法语法结构：<br><code>[修饰符列表] 构造方法名(形式参数列表)&#123; 构造方法体; &#125;</code></p><p>3、回顾普通方法的语法结构：<br><code>[修饰符列表] 返回值类型 方法名(形式参数列表)&#123; 方法体; &#125;</code></p><p>4、对于构造方法来说，“返回值类型”不需要指定，并且也不能写void。只要写上void，那么这个方法就成为普通方法了。</p><p>5、对于构造方法来说，构造方法的方法名必须与类名保持一致。</p><p>6、构造方法的作用？</p><ul><li>构造方法存在的意义是，通过构造方法的调用，可以创建对象。</li></ul><p>7、构造方法应该怎么调用？</p><ul><li>普通方法是这样调用的：方法修饰符中有static的时候：<code>类名.方法名（实参列表）</code>、方法修饰符列表中没有static的时候：<code>引用.方法名（实参列表）</code></li><li><code>new 构造方法名（实参列表）</code></li></ul><p>8、构造方法调用执行之后，有返回值吗？</p><ul><li>每一个构造方法实际上执行结束之后都有返回值，但是这个“return 值；”这样的语句不需要写。构造方法结束的时候java程序自动返回值。</li><li>并且返回值类型是构造方法所在类的类型。由于构造方法的返回值类型就是类本身，所以返回值类型不需要编写。</li></ul><p>9、注释和取消注释：Ctrl + &#x2F;、 多行注释：ctrl + shift +&#x2F;\</p><p>10、当一个类中没有定义任何构造方法的话，系统默认给该类提供一个无参数的构造方法，这个构造方法被称为缺省构造器。</p><p>11、当一个类显示的将构造方法定义出来了，那么系统则不再默认为这个类提供缺省构造器。建议开发中手动的为当前类提供无参数的构造方法。因为无参数的构造方法太常用了。</p><h3 id="2、构造方法的作用"><a href="#2、构造方法的作用" class="headerlink" title="2、构造方法的作用"></a>2、构造方法的作用</h3><ul><li>1、创建对象</li><li>2、创建对象的同时，初始化实例变量的内存空间。</li></ul><p>成员变量之实例变量，属于队象级别的变量，这种变量必须先有对象才能有实例变量。</p><p>实例变量没有手动赋值的时候，系统默认赋值，那么这个系统默认赋值是在什么时候完成的呢？是在类加载的时候么？</p><ul><li>不是的，因为类加载的时候只加载了代码片段，还没来得及创建对象。所以此时实例变量并没有初始化。</li><li>实际上，实例变量的内存空间是在构造方法执行过程当中完成开辟的，完成初始化的。</li><li>系统在默认赋值的时候，也是在构造方法执行过程当中完成的赋值。</li></ul><h3 id="3、对象与引用的概念"><a href="#3、对象与引用的概念" class="headerlink" title="3、对象与引用的概念"></a>3、对象与引用的概念</h3><ul><li><strong>对象</strong>：目前在使用new运算符在堆内存中开辟的内存空间称为对象。</li><li><strong>引用</strong>：是一个变量，不一定是局部变量，还可能是成员变量。引用保存了内存地址，指向了堆内存当中的对象。</li><li>所有访问实例相关的数据，都需要通过<code>“引用.”</code>的方式访问，因为只有通过引用才能找到对象。</li><li>只有一个空的引用，访问对象的实例相关的数据会出现空指针异常。</li></ul><h3 id="4、参数传递"><a href="#4、参数传递" class="headerlink" title="4、参数传递"></a>4、参数传递</h3><blockquote><p>主要研究和学习的是方法在调用的时候，涉及到参数传递的问题，到底是怎样传递数据的呢？</p><ul><li>值传递</li></ul></blockquote><blockquote><p>int i &#x3D; 10;<br>int j &#x3D; i ; i传递给j，实际上只是将i变量中保存的10传递给了j，j实际上是一个全新的内存空间</p></blockquote><blockquote><p>User u &#x3D; 0x1234;<br>User u2 &#x3D; u;<br>u传递给u2，实际上是将0x1234这个值赋给u2了，u和u2实际上是两个不同的局部变量，但是他们这两个变量指向堆内存中的同一个java对象。</p></blockquote><p>java语言当中方法调用的时候涉及到的参数传递的问题</p><p><strong>参数传递</strong>实际上传递的是变量中保存的具体值</p><p><strong>例一：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span>()<br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><br><span class="hljs-comment">//int i = 10;</span><br><span class="hljs-comment">//add(i)等同于：add（10）</span><br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>add(i);<span class="hljs-comment">//add方法调用的时候，给add方法传递了一个变量i，实际上传递的是变量中保存的具体值</span><br>System.out.println(<span class="hljs-string">&quot;main--&gt;&quot;</span>+ i );<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>&#123;<br>i++;<br>System.out.println(<span class="hljs-string">&quot;add--&gt;&quot;</span>+ i);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译结果：<br><img src="/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/69e16246977e476725c2b7d1dadec9a9-1741868481336-91.png" alt="编译结果"><br><strong>例二：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test02</span>()&#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">20</span>);<br>      <br>       <span class="hljs-comment">//User u =0x1234;</span><br>       <span class="hljs-comment">//add(u)等同于：add(0x1234)</span><br>        add(u);<span class="hljs-comment">//传递u给add方法的时候，实际上传递的是U变量中保存的值，只不过这个值是一个java对象的内存地址</span><br>        System.out.println(<span class="hljs-string">&quot;main--&gt;&quot;</span>+ u.age);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(User u )</span>&#123;<br>        u.age++;<br>        System.out.println(<span class="hljs-string">&quot;add--&gt;&quot;</span>+ u.age);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span><br>&#123;<br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>&#123;<br>        age = i;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译结果：<br><img src="/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/7eef229895d788415d1d99a26f22d5a5-1741868481336-93.png" alt="在这里插入图片描述"><br><strong>最终结论：</strong></p><p>方法调用的时候，涉及到参数问题，传递的时候，java只遵循一种语法机制，就是将变量中保存的“值”传递过去了，只不过有时候这个值是一个字面值10，有的时候是另一个java对象的内存地址0x1234。</p><h2 id="5、抽象类"><a href="#5、抽象类" class="headerlink" title="5、抽象类"></a>5、抽象类</h2><blockquote><p>抽象类为什么无法实例化，无法创建对象？<br>抽象类是：类和类之间有共同特征，将这些具有共同特征的类再进一步形成了抽象类。由于类本身是不存的，所以抽象类无法创建对象</p></blockquote><p><strong>1、什么是抽象类</strong></p><p>类和类之间有共同特征，将这些具有共同特征的类再进一步形成了抽象类。由于类本身是不存的，所以抽象类无法创建对象【无法实例化】</p><p><strong>2、抽象类属于什么类型？</strong></p><p>抽象类也属于引用数据类型</p><p><strong>3、抽象类怎么定义？</strong></p><p>语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符列表] <span class="hljs-keyword">abstract</span> class 类名&#123;<br>类体;<br>&#125;<br><span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><p><strong>4、抽象类是无法实例化的，无法创建对象的，所以抽象类是用来被子类继承的。</strong></p><p><strong>5、final与abstract不能联合使用，这两个关键字是对立的</strong></p><p><strong>6、抽象类的子类可以是抽象类</strong></p><p><strong>7、抽象类虽然无法实例化，但是抽象类有构造方法，这个构造方法是供子类使用的。</strong></p><p><strong>8、抽象类关联到一个概念：抽象方法。</strong></p><p><strong>抽象方法</strong>表示没有实现的方法，没有方法体的方法。</p><p>例如：<code>public abstract void doSome();</code> 没有花括号</p><p>抽象方法特点是：</p><ul><li>特点1：没有方法体，以分号结尾。</li><li>特点2：前面修饰符列表中有abstract关键字</li></ul><p><strong>9、抽象类中不一定有抽象方法，抽象方法必须在抽象类中。</strong></p><p><strong>重要结论：【必须背会】</strong></p><p><strong>一个非抽象的类继承抽象类，必须将抽象类中的抽象方法实现了。<br>这是java语法上强行规定的，必须的，否则编译器报错。<br>抽象类则不需要。</strong></p><p>这里的覆盖或者重写，也可以叫做实现。（对抽象）</p><p><strong>面向抽象编程</strong></p><p>面向抽象编程，不要面向具体编程，降低程序的耦合度，提高程序的扩展力<br>这种编程思想符合OCP原则。</p><h2 id="6、接口"><a href="#6、接口" class="headerlink" title="6、接口"></a>6、接口</h2><h3 id="1、接口"><a href="#1、接口" class="headerlink" title="1、接口"></a>1、接口</h3><ul><li>接口也是一种引用数据类型。</li><li>接口是完全抽象的。（抽象类是半抽象。）或者也可以说接口是特殊的抽象类。</li></ul><p><strong>1、接口的语法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符列表] interface 接口名 &#123;<br>&#125;<br>[修饰符列表] class 类名&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2、接口支持多继承，一个接口可以继承多个接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">A</span>&#123;<br><br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">B</span>&#123;<br><br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>,B&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3、接口中只包含两部分内容</strong></p><ul><li><strong>常量</strong>（不能修改）</li><li><strong>抽象方法</strong></li></ul><p>接口没有其它内容，只有以上两部分。</p><p><strong>4、接口中的所有元素都是public修饰的</strong></p><p><strong>5、接口中的<a href="https://so.csdn.net/so/search?q=%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95&spm=1001.2101.3001.7020">抽象方法</a>定义时：<code>public abstract</code> 修饰符可以省略</strong></p><p><strong>6、接口中的方法都是抽象方法，所以接口中的方法不能有结构体和方法体</strong></p><p><strong>7、接口中的常量的public 、static、final可以省略。</strong></p><p><strong>8、类实现接口实现方法</strong></p><p><strong>基础语法：</strong> 类和类之间叫做继承，类和接口之间叫做实现。</p><p><strong>语法结构：</strong></p><ul><li>继承使用<code>extends</code>关键字完成。</li><li>实现使用<code>implements</code>关键字完成。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">MyMath</span>&#123;<br><span class="hljs-type">double</span> PI=<span class="hljs-number">3.1415</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">sub</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>;<br>&#125;<br><br><span class="hljs-comment">//正确写法</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMathImp1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MyMath</span>&#123;<br>&#125;<br><br>错误：MyMathImp1不是抽象的，并且未覆盖MyMath中的抽象方法<br><span class="hljs-comment">/*class MyMathImp1 implements MyMath&#123;</span><br><span class="hljs-comment">&#125;*/</span><br><br>修正：<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMathImp1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MyMath</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>&#123;<br><span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sub</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>&#123;<br><span class="hljs-keyword">return</span> a - b;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>9、当一个非抽象的类实现接口的话，必须将接口中所有的抽象方法全部实现（重点）</strong></p><p><strong>10、面向接口的编程</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//多态：父类型引用指向子类型的对象</span><br><span class="hljs-comment">//调用接口里面的方法(面向接口的编程)</span><br><span class="hljs-type">MyMath</span> <span class="hljs-variable">mm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyMathImp1</span>();<br>mm.sum(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>);<br><span class="hljs-number">1234</span><br></code></pre></td></tr></table></figure><p><strong>11、一个类可以实现多个接口</strong></p><p>这种机制弥补了java中的一个缺陷：java中的类和类只支持单继承。实际上单继承是为了简单而出现的，现实世界中存在多继承，java中的接口弥补了单继承带来的缺陷。</p><p><strong>12、继承和实现同时存在（extends和implements）</strong></p><p><code>extends</code> 关键字在前 ，<code>implements</code>关键字在后。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>()<br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">Flyable</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">cat</span>();<span class="hljs-comment">//多态</span><br>f.fly();<span class="hljs-comment">//输出结果：***</span><br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>&#123;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Flyable</span>&#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Flyable</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;***&quot;</span>)<br>&#125; <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>13、使用接口写代码时，可以使用多态（父类型引用指向子类型对象）</strong></p><h3 id="2、接口在开发中的作用（解耦合）"><a href="#2、接口在开发中的作用（解耦合）" class="headerlink" title="2、接口在开发中的作用（解耦合）"></a>2、接口在开发中的作用（解耦合）</h3><p>注意：接口在开发中的作用，类似于多态在开发中的作用。</p><p>多态：面向抽象编程，不要面向具体编程。降低程序的耦合度，提高程序的扩展力。</p><p><strong>接口是不是完全的？</strong></p><p>是的，而我们以后正好要求面向抽象编程。<br>面向抽象编程这句话以后可以修改为：面向接口编程。有了接口就有了可插拨。可插拔表示扩展力很强。不是焊接死的。</p><p><strong>面向接口编程，可以降低程序的耦合度，提高程序的扩展力。符合OCP开发原则。<br>接口的使用离不开多态机制。（接口+多态才可以达到降低耦合度）</strong></p><p>接口可以解耦合，解开的是调用者和实现者的耦合，<br>任何接口都有调用者和实现者。</p><ul><li><strong>调用者</strong>面向接口调用。</li><li><strong>实现者</strong>面向接口编写实现。</li></ul><h2 id="7、接口和抽象类的区别"><a href="#7、接口和抽象类的区别" class="headerlink" title="7、接口和抽象类的区别"></a>7、接口和抽象类的区别</h2><p><strong>仅语法上的区别</strong></p><ol><li><p><strong>抽象类是半抽象的<br>接口是完全抽象的</strong></p></li><li><p><strong>抽象类中有构造方法<br>接口中没有构造方法</strong></p></li><li><p><strong>接口和接口之间支持多继承<br>类和类之间只能单继承</strong></p></li><li><p><strong>一个类可以同时实现多个接口<br>一个抽象类只能继承一个类（单继承）</strong></p></li><li><p><strong>接口中只允许出现常量和抽象方法。</strong></p><p><strong>接口一般都是对“行为”的抽象</strong></p></li></ol><h2 id="8、Java中类和类之间的关系"><a href="#8、Java中类和类之间的关系" class="headerlink" title="8、Java中类和类之间的关系"></a>8、Java中类和类之间的关系</h2><h3 id="一、继承关系"><a href="#一、继承关系" class="headerlink" title="一、继承关系"></a>一、继承关系</h3><p><strong>继承指的是一个类（称为子类、子接口）继承另外的一个类（称为父类、父接口）的功能，并可以增加它自己的新功能的能力。</strong> 在Java中继承关系通过关键字extends明确标识，在设计时一般没有争议性。在UML类图设计中，继承用一条带空心三角箭头的实线表示，从子类指向父类，或者子接口指向父接口。<br><img src="/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/40f02aeeb414f08fd3d6ff5ed198cc5c-1741868481336-92.png" alt="img"></p><h3 id="二、实现关系"><a href="#二、实现关系" class="headerlink" title="二、实现关系"></a>二、实现关系</h3><p><strong>实现指的是一个class类实现interface接口（可以是多个）的功能，实现是类与接口之间最常见的关系。</strong> 在Java中此类关系通过关键字implements明确标识，在设计时一般没有争议性。在UML类图设计中，实现用一条带空心三角箭头的虚线表示，从类指向实现的接口。<br><img src="/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/7c447decc581b9c06edd7efbd6e8d298-1741868481336-94.png" alt="在这里插入图片描述"></p><h3 id="三、依赖关系"><a href="#三、依赖关系" class="headerlink" title="三、依赖关系"></a>三、依赖关系</h3><p><strong>简单的理解，依赖就是一个类A使用到了另一个类B，而这种使用关系是具有偶然性的、临时性的、非常弱的，但是类B的变化会影响到类A。</strong> 比如某人要过河，需要借用一条船，此时人与船之间的关系就是依赖。表现在代码层面，为类B作为参数被类A在某个method方法中使用。在UML类图设计中，依赖关系用由类A指向类B的带箭头虚线表示。<br><img src="/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/efbb939297aa3480d733d04f00167fd1-1741868481336-95.png" alt="在这里插入图片描述"></p><h3 id="四、关联关系"><a href="#四、关联关系" class="headerlink" title="四、关联关系"></a>四、关联关系</h3><p>关联体现的是两个类之间语义级别的一种强依赖关系，比如我和我的朋友，这种关系比依赖更强、不存在依赖关系的偶然性、关系也不是临时性的，一般是长期性的，而且双方的关系一般是平等的。关联可以是单向、双向的。<strong>表现在代码层面，为被关联类B以类的属性形式出现在关联类A中，也可能是关联类A引用了一个类型为被关联类B的全局变量。</strong> 在UML类图设计中，关联关系用由关联类A指向被关联类B的带箭头实线表示，在关联的两端可以标注关联双方的角色和多重性标记。<br><img src="/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/b1b4153537518dd9e1513ad2998ab0c1-1741868481336-96.png" alt="在这里插入图片描述"></p><h3 id="五、聚合关系"><a href="#五、聚合关系" class="headerlink" title="五、聚合关系"></a>五、聚合关系</h3><p><strong>聚合是关联关系的一种特例，它体现的是整体与部分的关系，即has-a的关系。此时整体与部分之间是可分离的，它们可以具有各自的生命周期，部分可以属于多个整体对象，也可以为多个整体对象共享。</strong> 比如计算机与CPU、公司与员工的关系等，比如一个航母编队包括海空母舰、驱护舰艇、舰载飞机及核动力攻击潜艇等。表现在代码层面，和关联关系是一致的，只能从语义级别来区分。在UML类图设计中，聚合关系以空心菱形加实线箭头表示。<br><img src="/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/32703ef854225b72df1e83a49d00c89c-1741868481336-97.png" alt="在这里插入图片描述"></p><h3 id="六、组合关系"><a href="#六、组合关系" class="headerlink" title="六、组合关系"></a>六、组合关系</h3><p><strong>组合也是关联关系的一种特例，它体现的是一种contains-a的关系，这种关系比聚合更强，也称为强聚合。它同样体现整体与部分间的关系，但此时整体与部分是不可分的，整体的生命周期结束也就意味着部分的生命周期结束</strong>， 比如人和人的大脑。表现在代码层面，和关联关系是一致的，只能从语义级别来区分。在UML类图设计中，组合关系以实心菱形加实线箭头表示。<br><img src="/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/351e71e2d2e9194be9a6fbd0494840f2-1741868481336-98.png" alt="在这里插入图片描述"></p><h2 id="9、is-a、is-like-a、has-a"><a href="#9、is-a、is-like-a、has-a" class="headerlink" title="9、is-a、is-like-a、has-a"></a>9、is-a、is-like-a、has-a</h2><h3 id="1、has-a"><a href="#1、has-a" class="headerlink" title="1、has a"></a>1、has a</h3><p><strong>关联关系：聚合</strong><br>凡是能够使用 has a 来描述的，统一以<strong>属性</strong>的方式存在</p><blockquote><p>例如 Customer has a FoodMenu（顾客有一个食物菜单）</p></blockquote><h3 id="2、is-a"><a href="#2、is-a" class="headerlink" title="2、is a"></a>2、is a</h3><p><strong>继承关系：继承</strong><br>凡是满足is a的<a href="https://so.csdn.net/so/search?q=%E8%A1%A8%E8%BE%BE%E5%BC%8F&spm=1001.2101.3001.7020">表达式</a>都可以设置为<strong>继承</strong></p><blockquote><p>例如 Cat is a Animal（猫是一种动物）</p></blockquote><h3 id="3、is-like-a"><a href="#3、is-like-a" class="headerlink" title="3、is like a"></a>3、is like a</h3><p><strong>实现关系：接口</strong><br>满足 is like a 的表达式也是一种<strong>继承</strong></p><p><strong>实现关系通常是：类实现接口</strong></p><p>但是在继承中，仅覆盖了父类方法即为Is-a；若在覆盖父类方法基础上有新增方法，则为Is-like-a。</p><p><strong>例子：</strong></p><p>1.假设你确定两件对象之间是is-a的关系，那么此时你应该使用继承。比方菱形、圆形和方形都是形状的一种。那么他们都应该从形状类继承。</p><p>2.假设你确定两件对象之间是has-a的关系，那么此时你应该使用聚合。比方电脑是由显示器、CPU、硬盘等组成的。那么你应该把显示器、CPU、硬盘这些类聚合成电脑类。</p><p>3.假设你确定两件对象之间是like-a的关系，那么此时你应该使用组合。比方空调继承于制冷机，但它同一时候有加热功能。那么你应该把让空调继承制冷机类，并实现加热接口</p><h2 id="10、访问控制权限、包和import"><a href="#10、访问控制权限、包和import" class="headerlink" title="10、访问控制权限、包和import"></a>10、访问控制权限、包和import</h2><h3 id="1、关于java语言当中的包机制"><a href="#1、关于java语言当中的包机制" class="headerlink" title="1、关于java语言当中的包机制:"></a>1、关于java语言当中的包机制:</h3><ul><li><strong>1、包又称为package</strong>, java中 引入package这种语法机制主要是为了方便程序的管理。<br>不同功能的类被分门别类放到不同的软件包当中，查找比较方便，管理比较方便，易维护。</li><li><strong>2、怎么定义package呢?</strong><br>在java源程序的第一行上编写package语句。<br>package只能编写一 个语句.<br><strong>语法结构:</strong><br><code>package 包名;</code></li><li>3、<strong>包名的命名规范:</strong><br>公司域名倒序+项目名+模块名+功能名;<br>采用这种方式重名的几率较低。因为公司域名具有全球唯一性。<br>例如:<br>com.bjpowernode . oa.user . service;<br>org . apache. tomcat.core ;</li><li><strong>4、包名要求全部小写，包名也是标识符，必须遵守标识符的命名规则</strong></li><li><strong>5、一个包对应的是一个目录</strong></li><li><strong>6、使用了package机制之后，应该怎样编译？怎么运行呢？</strong><br>使用package机制后，类名不在是Test ，而是<code>包名.类名</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjpowernode;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test1</span>()<br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><br><span class="hljs-comment">//创建Test对象</span><br><span class="hljs-comment">//以下代码编译错误：当省略包名之后，会在当前包下找Test</span><br><span class="hljs-comment">//实际上编译器去找：com.bjpowernode.Test了，这个类不存在。</span><br><span class="hljs-comment">//Test tt = new Test();</span><br><span class="hljs-comment">//System.out.println(tt);</span><br><br><span class="hljs-comment">//修改以上错误</span><br><span class="hljs-comment">//包名不要省略</span><br><span class="hljs-comment">//结论：什么时候前边的包名可以省略呢？ Test和Test1在同一个包下的时候不需要加包名。</span><br>com.bjpowernode.javase.day.<span class="hljs-type">Test</span> <span class="hljs-variable">tt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">com</span>.bjpowernode.javase.day.Test();<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、import"><a href="#2、import" class="headerlink" title="2、import"></a>2、import</h3><p>1、import 语句用来完成导入其他类，同一个包下的类不需要导入，不在同一个包下需要手动导入。</p><p>2、import语法格式：<br><code>import 类名；</code><br><code>import 包名.* ；</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjpowernode;<br><span class="hljs-keyword">import</span> com.bjpowernode.javase.day.Test; <span class="hljs-comment">//导入包</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2</span>()<br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">Test</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br>System.out.println(x);<span class="hljs-comment">//com.bjpowernode.javase.day.Test</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&#x2F;3、<strong>java.lang.*不需要手动引入，系统自动引入<br>lang：language语言包，是java语言的核心类，不需要手动引入。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;abc&quot;</span>;<br>System.out.println(s);<br><br><span class="hljs-comment">//Date d = new Date();//编译错误，因为没有Date类</span><br>需要 <span class="hljs-keyword">import</span> java.util.Date;<br></code></pre></td></tr></table></figure><p>4、什么时候需要import？</p><ul><li>不是java.lang包下，并且不在同一个包下的时候，需要使用import进行引入</li></ul><h3 id="3、访问控制权限"><a href="#3、访问控制权限" class="headerlink" title="3、访问控制权限"></a>3、访问控制权限</h3><h3 id="访问控制权限修饰符"><a href="#访问控制权限修饰符" class="headerlink" title="访问控制权限修饰符:"></a><strong>访问控制权限修饰符:</strong></h3><p>1、访问控制权限修饰符来控制元素的访问范围</p><p>2、访问控制权限修饰符包括:</p><ul><li><strong>public：</strong> 表示公开的，在任何位置都可以访问</li><li><strong>protected：</strong> 同包，子类</li><li><strong>缺省default（系统默认状态）：</strong> 同包</li><li><strong>private：</strong> 表示私有的，只能在本类中访问</li></ul><p>3、访问控制权限修饰符可以修饰类、变量、方法…</p><p>4、当<strong>某个数据只希望子类</strong>使用，使用protected进行修饰</p><p>5、修饰符的范围：<br><strong>private &lt; 缺省 &lt; protected &lt; public</strong></p><p>6、类只能采用public和缺省的修饰符进行修饰【内部类除外】</p><h1 id="六、关键字"><a href="#六、关键字" class="headerlink" title="六、关键字"></a>六、关键字</h1><h2 id="1、this关键字"><a href="#1、this关键字" class="headerlink" title="1、this关键字"></a>1、this关键字</h2><p>关于java语言当中的this关键字</p><blockquote><ul><li>1 this是一个关键字，翻译为：这个</li><li>2 this是一个引用，this是一个变量，this变量中保存了内存地址指向了自身，this存储在JVM堆内存java对象内部。</li><li>3 创建100个java对象，每一个对象都有this，也就是说有100个不同的this</li><li>4 this可以出现在“实例方法”中，this指向当前正在执行这个动作的对象。（this代表当前对象）</li><li>5 this在大多数情况下都是可以省略不写的</li><li>6 this不能使用带有static的方法中</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomerTest</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-comment">//创建Customer对象</span><br><span class="hljs-type">Customer</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>();<br>c1.name = <span class="hljs-string">&quot;zhangsan&quot;</span>;<br><br><span class="hljs-comment">//c1购物</span><br>c1.shopping();<br><br><span class="hljs-type">Customer</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>();<br>c2.name = <span class="hljs-string">&quot;lisi&quot;</span>;<br>c2.shopping();<br><br><span class="hljs-comment">//调用doSome方法（修饰符列表上有static）</span><br><span class="hljs-comment">//采用&quot;类名.&quot;的方式访问，显然这个方法在执行的时候不需要对象的参加</span><br>Customer.doSome();<br><br><span class="hljs-comment">//调用doOther方法 </span><br>Customer.doOther();<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Customer</span><br>&#123;<br><span class="hljs-comment">//姓名</span><br>String name;<br><br><span class="hljs-comment">//构造方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Customer</span><span class="hljs-params">()</span>&#123;<br><br>&#125;<br><br><span class="hljs-comment">//不带有static关键字的方法</span><br><span class="hljs-comment">//顾客购物的行为</span><br><span class="hljs-comment">//每一个顾客购物最终的结果是不一样的</span><br><span class="hljs-comment">//所以购物这个行为是属于对象级别的行为</span><br><span class="hljs-comment">//由于每一个对象在执行购物这个行为的时候最终结果不同，所以购物这个动作必须有对象的参与</span><br><span class="hljs-comment">//重点：没有static关键字的方法被称为“实例方法”</span><br><span class="hljs-comment">//重点：没有static关键字的变量被称为“实例变量”</span><br><span class="hljs-comment">//注意：当一个行为/动作执行的过程中是需要对象参与的，那么这个方法一定要定义为“实例方法”，不要带static关键字</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shopping</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-built_in">this</span>.name + <span class="hljs-string">&quot;在购物！&quot;</span>);<span class="hljs-comment">//完整写法</span><br>System.out.println(name+<span class="hljs-string">&quot;在购物！&quot;</span>);<span class="hljs-comment">//this可以省略不写</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSome</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//这个执行过程中没有“当前对象”，因为带有static的方法是通过类名的方式访问的。</span><br><span class="hljs-comment">//或者说这个&quot;上下文&quot;当中没有&quot;当前对象&quot;,自然也不存在this(this代表的是当前正在执行的这个动作的对象)</span><br><br><span class="hljs-comment">//以下程序为什么编译错误呢？</span><br><span class="hljs-comment">//doSome方法调用不是对象去调用，是一个类名去调用，执行过程中没有“当前对象”。</span><br><span class="hljs-comment">//name是一个&quot;实例变量&quot;。以下代码的含义是:访问当前对象的name。</span><br><span class="hljs-comment">//System.out.println(name);</span><br><br><span class="hljs-comment">//static方法调用不需要对象，直接使用类名，所以执行过程中没有当前对象，所以不能使用this</span><br><span class="hljs-comment">//System.out.println(this);</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doOther</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//假设想访问name这个实例变量的话应该怎么做？</span><br><span class="hljs-comment">//System.out.println(name); //编译报错</span><br><br><span class="hljs-comment">//可以采用以下方案，但是以下方案，绝对不是访问当前对象的name</span><br><span class="hljs-comment">//创建对象</span><br><span class="hljs-type">Customer</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>();<br>System.out.println(c.name);<span class="hljs-comment">//这里访问的name是c引用指向对象的name</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>编译结果：</strong><br><img src="/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/aa0a3eeaae0ce80af58c73d99f77989e-1741868481336-99.png" alt="在这里插入图片描述"></p><p><strong>实例方法必须有对象的存在</strong></p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">实例方法<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doOther</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;do other!&quot;</span>);<br>&#125;<br><br>run是实例方法，调用run方法的一定是有对象存在的。一定先创造一个对象才能调用run方法<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;run !&quot;</span>);<br><br>doOther是一个实例方法，实例方法调用必须有对象的存在<br>以下代码的含义就是：调用当前对象的doOther方法<br>doOther();<span class="hljs-comment">//this大部分情况下可以省略</span><br><span class="hljs-built_in">this</span>.doOther();<span class="hljs-comment">//完整写法</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>最终结论：</strong></p><ul><li>在带有static的方法当中不能直接访问实例变量和实例方法。</li><li>因为实例变量和实例方法都需要对象的存在。</li><li>而static的方法当中是没有this的，也就是说当前对象不存在。</li><li>自然也是无法访问当前对象的实例变量和实例方法。</li></ul><p><strong>this.什么时候不能省略？</strong></p><blockquote><p>用来区分局部变量和实例变量的时候，“this.”不能省略。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>()&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id; <span class="hljs-comment">//实例变量</span><br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>&#123;<br><span class="hljs-built_in">this</span>.id = id; <span class="hljs-comment">// 等号前面的是实例变量，等号后面的是局部变量</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>this可以使用在哪里？</strong></p><ul><li>1 实例方法中，代表当前对象【语法格式：<code>this.</code>】</li><li>2 构造方法中,通过当前的构造方法调用其他的构造方法【语法格式：<code>this（实参）;</code>】</li></ul><p><strong>重点记忆：this()这种语法只能出现在构造函数第一行。</strong></p><p><strong>什么时候程序在运行的时候出现空指针异常呢？</strong></p><ul><li>空引用访问实例相关的数据，因为实例相关的数据就是对象相关的数据，这些数据在访问的时候必须有对象的参与，当空引用的时候，对象不存在，访问这些实例数据一定会出现空指针异常。</li></ul><p>实例相关的数据包括：</p><ul><li>实例变量【对象需要存在】</li><li>实例方法【对象需要存在】</li></ul><h2 id="2、static关键字"><a href="#2、static关键字" class="headerlink" title="2、static关键字"></a>2、static关键字</h2><ul><li>1 static：静态的</li><li>2 static修饰的方法是静态方法</li><li>3 static修饰的变量是静态变量</li><li>4 所有static修饰的元素都称为静态的，都可以使用<code>类名.</code>的方式访问，当然也可以采用<code>引用.</code>【但不建议】</li><li>5 static修饰的所有元素都是类级别的特征，和具体的对象无关</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Chinese</span>()&#123;<br><span class="hljs-comment">//所有中国人这个类的对象国籍都一样，这种特征属于类级别的特征，</span><br><span class="hljs-comment">//可以提升为整个模板的特征，可以在变量前添加static关键字修饰</span><br><span class="hljs-comment">//静态变量，静态变量在类加载的时候初始化，不需要创建对象，内存就开辟了。</span><br><span class="hljs-comment">//静态变量存储在方法区内存当中。</span><br><span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">country</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;中国&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChineseTest</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">Chinese</span> <span class="hljs-variable">zhangsan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chinese</span>();<br>System.out.println(Chinese.country);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>什么时候成员变量声明为实例变量呢 ？</strong></p><ul><li>所有对象都有这个属性，但是这个属性的值会随着这个对象的变化而变化【不同对象的这个属性具体的值不同】</li></ul><p><strong>什么时候成员变量声明为静态变量呢 ？</strong></p><ul><li>所有对象都有这个属性，并且所有对象这个属性的值是一样的，建议定义为静态变量，节省内存的开销。</li></ul><p><strong>静态变量在类加载的时候初始化，内存在方法区中开辟。访问的时候不需要创建对象，直接使用<code>类名.静态变量名</code>的方式访问。</strong></p><p>所有静态的数据都是可以采用<code>类名.</code>,也可以采用<code>引用.</code>，但是建议采用<code>类名.</code>的方式访问。<br>采用<code>引用.</code>的方式访问的时候，即使引用的是null，也不会出现空指针异常，因为访问静态的数据不需要对象的存在。</p><p><strong>可以使用static关键字来定义“静态代码块”：</strong></p><p>1、语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span>&#123;<br>java语句;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、静态代码块在类加载时执行，并且只执行一次。</p><p>3、静态代码块在一个类中可以编写多个，并且遵循自上而下的顺序依次执行。·</p><p>4、静态代码块的作用是什么？怎么用？用在哪？什么时候用？</p><blockquote><ul><li>这当然和具体的需求有关，例如项目中要求在类加载的时候执行代码完成日志的记录。那么这段记录日志的代码就可以编写到静态代码当中，完成日志记录</li><li>静态代码块是java为程序员准备的一个特殊的时刻，这个特殊的时刻被称为类加载时刻。若希望在此刻执行一段特殊的程序，这段程序可以直接放到静态代码当中。</li></ul></blockquote><p>5、通常在静态代码块当中完成预备工作，先完成数据的准备工作，例如：初始化连接池，解析XML配置文件…</p><p><strong>方法什么时候定义为静态的？</strong></p><blockquote><p>方法描述的是动作，当所有的对象执行这个动作的时候，最终产生影响是一样的。那么这个动作已经不再属于某一个对象动作了，可以将这个动作提升为类级别的动作，模板级别的动作。</p></blockquote><p>静态方法中无法直接访问实例变量和实例方法。</p><p>大多数方法都定义为实例方法，一般一个行为或者一个动作在发生的时候，都需要对象的参与。但是也有例外，例如：大多数“工具类”中的方法都是静态方法，因为工具就是方便编程，为了方便方法的调用，自然不需要new对象是最好的。</p><h2 id="3、final关键字"><a href="#3、final关键字" class="headerlink" title="3、final关键字"></a>3、final关键字</h2><p><strong>1、final是一个关键字，表示最终的，不可变的</strong></p><p>2、<strong>final修饰的类无法被继承</strong></p><p>3、<strong>final修饰的方法无法被覆盖</strong></p><p>4、<strong>final修饰的变量一旦被赋值之后，不可重新赋值</strong>【不可二次赋值】</p><p>5、<strong>final修饰的实例变量，必须手动赋值，不能采用系统默认值 final变量必须手动赋值，不能采用系统默认值</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//final int age; //编译错误</span><br><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>或<br><br><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> num;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">FinalTest</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-built_in">this</span>.num = <span class="hljs-number">200</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>6、<strong>final修饰的引用，一旦指向某个对象之后，不能在指向其他对象，那么被指向的对象无法被垃圾回收器回收。</strong></p><p>final修饰的引用虽然指向某个对象之后不能指向其他对象，但是所指向的对象内部的内存是可以被修改的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">User</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">100</span>);<br><br>u = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">200</span>);<br><br><span class="hljs-keyword">final</span> <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">30</span>);<br><span class="hljs-comment">//user = new User (50); //final修饰的引用，一旦指向某个对象之后，不能在指向其他对象，那么被指向的对象无法被垃圾回收器回收。</span><br><br>System.out.println(user.id);  <span class="hljs-comment">//30</span><br>user.id = <span class="hljs-number">50</span>;<span class="hljs-comment">//final修饰的引用虽然指向某个对象之后不能指向其他对象，但是所指向的对象内部的内存是可以被修改的。</span><br><br>System.out.println(user.id);  <span class="hljs-comment">//50</span><br></code></pre></td></tr></table></figure><p>7、<strong>final修饰的实例变量，一般和static联合使用，被称为变量。</strong></p><p>final修饰的实例变量是不可变的，这种变量一般和static联合使用，被称为<strong>常量</strong>。</p><p>常量定义的语法格式【常量名全部大写，每个单词之间使用下划线连接】<br><code>public static final 类型 常量名 = 值</code></p><h2 id="4、super关键字"><a href="#4、super关键字" class="headerlink" title="4、super关键字"></a>4、super关键字</h2><p><strong>super的使用</strong></p><p><code>super.属性名</code>：【访问父类的属性】<br><code>super.方法名（实参）</code>：【访问父类的方法】<br><code>super(实参)</code>：【调用父类的构造方法】</p><p><strong>super应用</strong></p><p>1、super是一个关键字，全部小写<br>2、</p><ul><li>super能出现在实例方法中。</li><li>super的语法是：<code>super.</code> 或 <code>super()</code></li><li>super不能使用在静态方法中</li><li><code>super.</code>大部分情况下是可以省略的</li><li><code>super.</code>什么时候不可以省略？<br>父类和子类中有同名属性，或者说有同样的方法，想在子类中访问父类的，<code>super.</code>不可以省略。</li><li><code>super()</code>只能出现在构造方法的第一行，通过当前的构造方法去调用“父类”中的构造方法，目的是：创建子类对象的时候，先初始化父类型特征。</li></ul><p>3、super()：<br>表示通过子类的构造方法调用父类的构造方法。<br>模拟现实世界中的这种场景：要想有儿子，需要先有父亲</p><p>4、当一个构造方法第一行：<br>既没有this()又没有super()的话，默认会有一个super()；表示通过当前子类的构造方法调用父类的无参数构造方法。所以必须保证父类的无参数构造方法是存在的。</p><p>5、注意：this()和super()不能共存，他们都是只能出现在构造方法的第一行。</p><p>6、无论怎样，父类的构造方法是一定会执行的。</p><p><strong>super.什么时候不能省略？</strong></p><p>父中有，子中又有，如果想在子中访问“父的特征”，<code>super.</code>不能省略。</p><ul><li><code>this.name</code>：当前对象的name属性</li><li><code>super.name</code>：当前对象的父类型特征中的name属性</li></ul><h1 id="七、继承、多态"><a href="#七、继承、多态" class="headerlink" title="七、继承、多态"></a>七、继承、多态</h1><h2 id="1、继承、方法覆盖"><a href="#1、继承、方法覆盖" class="headerlink" title="1、继承、方法覆盖"></a>1、继承、方法覆盖</h2><h3 id="1、继承"><a href="#1、继承" class="headerlink" title="1、继承"></a>1、继承</h3><p>关于java语言当中的继承：</p><ul><li>1 继承是面向的对象三大特征之一，三大特征是封装、继承、多态。</li><li>2 继承“基本”的作用是：代码复用。但是继承最“重要”的作用是：有了继承才有了以后的“方法覆盖”和“多态机制”</li><li>3 继承语法格式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符列表] class 类名 extends 父类名&#123;<br>类体 = 属性 + 方法<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>4 java语言当中的继承只支持单继承，一个类不同同时继承很多类，只能继承一个类。【在C++中支持多继承】。</li><li>5 关于继承中的一些术语：<br>B类继承A类，其中：<br><strong>A类称为：父类、基类、超类、superclass<br>B类称为：子类、派生类、subclass</strong></li><li>6 在Java语言当中子类继承父类都继承那些数据？<br>私有的不支持继承<br>构造方法不支持继承<br>其他数据都可以被继承</li><li>7 虽然java语言当中只支持单继承，但是一个类也可以间接继承其他类，例如：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">C <span class="hljs-keyword">extends</span> <span class="hljs-title class_">B</span>&#123;<br>&#125;<br>B <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br>&#125;<br>A <span class="hljs-keyword">extends</span> <span class="hljs-title class_">T</span>&#123;<br>&#125;<br>C类直接继承B类，但是C类间接继承T、A类。<br></code></pre></td></tr></table></figure><ul><li>8 java语言中假设一个类没有显示的继承任何类，该类默认继承JavaSE库中提供的java.lang.Object类。java语言中任何一个类中都有Object类的特征。</li></ul><h3 id="2、方法覆盖"><a href="#2、方法覆盖" class="headerlink" title="2、方法覆盖"></a>2、方法覆盖</h3><p><strong>1 方法覆盖又称方法重写（override[官方]、overwrite）</strong></p><p><strong>2 什么时候使用方法覆盖？</strong></p><p>当父类中的方法已经无法满足当前子类的业务需求，子类有必要将父类中继承过来的方法进行重新编写，这个编写过程称为方法重写&#x2F;方法覆盖。</p><p><strong>3 什么条件满足之后会发生重写呢？</strong></p><blockquote><p>代码满足什么条件之后，就构成方法的覆盖呢？</p></blockquote><ul><li>方法重写发生在具有继承关系的父子类之间</li><li>返回值类型相同，方法名相同，形参列表相同</li><li>访问权限不能更低，可以更高。</li><li>抛出异常不能更多，可以更少</li></ul><p>建议方法重写的时候尽量复制粘贴，容易导致没有产生覆盖。</p><p><strong>注意</strong></p><ul><li>私有方法不能继承，所以不能覆盖</li><li>构造方法不能继承，所以不能覆盖</li><li>静态方法不存在覆盖</li><li>覆盖只针对方法，不谈属性</li></ul><h2 id="2、多态"><a href="#2、多态" class="headerlink" title="2、多态"></a>2、多态</h2><h3 id="1、基础语法"><a href="#1、基础语法" class="headerlink" title="1、基础语法"></a>1、基础语法</h3><p><strong>向上转型（upcasting）</strong></p><blockquote><p>子类型–&gt;父类型<br>又被称为：自动类型转换</p></blockquote><p><strong>向下转型（downcasting）</strong></p><blockquote><p>父类型–&gt;子类型<br>又被称为：强制类型转换。【需要加强制类型转换符】</p></blockquote><p>无论是向上转型还是向下转型，两种类型之间必须要有继承关系。<br>没有继承关系，程序是无法编译通过的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">使用多态语法机制<br><span class="hljs-number">1.</span>Animal和Cat之间存在继承关系，Animal是父类，Cat是子类<br><span class="hljs-number">2.</span>Cat is a Animal<br><span class="hljs-number">3.</span><span class="hljs-keyword">new</span>  <span class="hljs-title class_">Cat</span>()创建的对象的类型是Cat，a2这个引用的数据类型是Animal，可见它们进行了类型转换<br>子类型转化为父类型，称为向上转型，或者称为自动类型转换。<br><span class="hljs-number">4.</span>Java中允许这种语法：父类型引用指向子类型对象。<br><br><span class="hljs-type">Aniaml</span> <span class="hljs-variable">a1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>();<br><span class="hljs-type">Aniaml</span> <span class="hljs-variable">a2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br><br>a1.move(); <span class="hljs-comment">//动物在移动</span><br>a2.move();<span class="hljs-comment">// 猫在走猫步</span><br><span class="hljs-comment">//a2.catchMouse();  //编译不通过，Animal类中没有catchMouse方法</span><br><span class="hljs-comment">//因为编译阶段编译器检查a2的类型是Animal类型，</span><br><span class="hljs-comment">//从Animal.class字节码文件当中查找catchMouse()方法，</span><br><span class="hljs-comment">//最终没有找到该方法,导致静态绑定失败，没有绑定成功，也就是说编译失败了。</span><br></code></pre></td></tr></table></figure><blockquote><ol><li>java程序永远都分为编译阶段和运行阶段</li><li>先分析编译阶段，在分析运行阶段，编译无法通过，根本是无法运行的。</li><li>编译阶段编译器检查a2这个引用的数据类型为Animal，由于Animal.class字节码当中有move()方法，所以编译通过了。这个过程我们称为静态绑定，编译阶段绑定。只有静态绑定成功了才有后续的运行。</li><li>在程序运行阶段，JVM堆内存当中真实创建的对象是Cat对象，那么以下程序在运行阶段一定会调用Cat对象的move()方法，此时发生了程序的动态绑定，运行阶段绑定。</li><li>无论是Cat类有没有重写move的方法，运行阶段一定调用的是Cat对象的move方法，因为底层真实对象就是Cat对象</li><li>父类型引用指向子类型对象这种机制导致程序存在编译阶段绑定和运行阶段绑定两种不同的形态&#x2F;状态，这种机制可以称为一种多态语法机制。</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Animal</span> <span class="hljs-variable">a3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bird</span>();<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 1.以下程序编译是没有问题的，因为编译器检查到a3的数据类型是Animal</span><br><span class="hljs-comment">* Animal和Cat之间存在继承关系，并且Anima1是父类型，Cat是子类型,</span><br><span class="hljs-comment">*父类型转换成子类型叫做向下转型，语法合格。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* 2、程序虽然编译通过了,但是程序在运行阶段会出现异常,因为JVM雄内存</span><br><span class="hljs-comment">*当中真实存在的对象是Bi rd类型, Bi rd对象无法转换成Cat对象，因为两种</span><br><span class="hljs-comment">*类型之间不存在任何继承关系，此时出现了著名的异常:java.lang . ClassCastException</span><br><span class="hljs-comment">类型转换异常，这种异常总是在“向下转型&quot;的时候会发生。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">Cat</span> <span class="hljs-variable">c3</span> <span class="hljs-operator">=</span> (Cat)a3;<br></code></pre></td></tr></table></figure><p><strong>怎么解决 ClassCastException异常呢？</strong></p><blockquote><p>使用instanceof运算符可以避免出现以上异常。</p></blockquote><p><strong>instanceof运算符怎么使用？</strong></p><p><strong>语法格式：</strong><br><code>引用 instanceof 数据类型名</code></p><p><strong>以上运算符的执行结果类型是布尔类型，结果可能是true&#x2F;false</strong></p><p><strong>关于运算结果true&#x2F;false：</strong></p><p>假设：（a instanceof Animal）</p><ul><li>true 表示：a这个引用指向的对象是一个Animal类型</li><li>false表示：a这个引用指向的对象不是一个Animal类型。</li></ul><p><strong>Java规范中要求：在进行强制类型转换之前，建议采用instanceof运算符进行判断，避免ClassCastException异常的发生。</strong> 这是一种好习惯。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (a3 <span class="hljs-keyword">instanceof</span> Cat)&#123; <span class="hljs-comment">//a3是一个Cat类型的对象</span><br><span class="hljs-type">Cat</span> <span class="hljs-variable">c3</span> <span class="hljs-operator">=</span> (Cat)a3;<br>c3.catchMouse();<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a3 <span class="hljs-keyword">instanceof</span> Bird)&#123;<span class="hljs-comment">//a3是一个Bird类型的对象</span><br><span class="hljs-type">Bird</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> (Bird)a3;<br>b2.fly();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、多态在实际开发中的作用"><a href="#2、多态在实际开发中的作用" class="headerlink" title="2、多态在实际开发中的作用"></a>2、多态在实际开发中的作用</h3><ul><li><ol><li>降低耦合度【解耦合】，提高程序的扩展力【软件开发的一个很重要的目标】</li></ol></li><li><ol><li>能使用多态尽量使用多态</li></ol></li><li><ol><li>父类型引用指向子类型对象</li></ol></li></ul><h1 id="八、数组"><a href="#八、数组" class="headerlink" title="八、数组"></a>八、数组</h1><h2 id="1、数组Array"><a href="#1、数组Array" class="headerlink" title="1、数组Array"></a>1、数组Array</h2><h3 id="1、数组相关基础知识"><a href="#1、数组相关基础知识" class="headerlink" title="1、数组相关基础知识"></a>1、数组相关基础知识</h3><ul><li>1、Java语言中的数组是一种<strong>引用数据类型</strong>。不属于基本数据类型。<strong>数组的父类是Object。</strong></li><li>2、数组实际上是一个容器，可以同时容纳多个元素。（<strong>数组是一个数据的集合</strong>）。<br>数组：字面意思是“一组数据”。</li><li>3、数组当中可以<strong>存储基本数据类型</strong>的数据，也可以<strong>存储“引用数据类型”</strong> 的数据。</li><li>4、数组因为是引用类型，所以<strong>数组对象</strong>是<strong>堆内存</strong>当中的。（<strong>数组是存储在堆当中的</strong>）。</li><li>5、数组当中如果<strong>存储的是“java对象”</strong> 的话，实际上<strong>存储的是java对象的“引用</strong>（内存地址）”，数组不能直接存储java对象。</li><li>6、数组的分类：一维数组、二维数组、三维数组、多维数组…(一维数组较多，二维数组偶尔使用)。</li><li>7、数组一旦创建，在java规定，长度不可变。（数组长度不可变）。</li><li>8、所有数组对象都有length属性（java自带的），用来获取数组中元素的个数。</li><li>9、java中的数组要求数组中的元素类型统一。</li><li>10、数组在内存方面存储的时候，数组中的元素内存地址（存储的每一个元素都是有规则的挨着排列的）是连续的。内存地址连续。这是数组存储元素的特点。数组实际上是一种简单的数据结构。</li><li>11、所有的数组都是拿“第一个小方框的内存地址”作为整个数组对象的内存地址。（数组中首元素的内存地址作为整个数组对象的内存地址）</li><li>12、数组中的每一个元素都是有下标的，下标从0开始，以1递增。最后一个元素的下标：length - 1<br>下标非常重要，因为我们对数组中的元素进行“存取”的时候都需要下标；来进行。</li></ul><h3 id="2、数组的优缺点"><a href="#2、数组的优缺点" class="headerlink" title="2、数组的优缺点"></a>2、数组的优缺点</h3><p><strong>优点：</strong></p><p>查询、检索某个下标上的元素时效率极高。可以说查询效率最高的一个数据结构。</p><blockquote><p>为什么检索效率高？</p><ul><li>第一：每一个元素的内存地址在空间存储上是连续的。</li><li>第二：每一个元素类型相同，所以占用空间大小一样。</li><li>第三：如果知道一个元素内存地址，知道每一个元素占用空间大小，又知道下标，所以通过一个数学表达式就可以计算出某个下标上的元素的内存地址。直接通过内存地址定位元素，所以数组的检索效率是最高的。</li></ul></blockquote><p><strong>缺点：</strong></p><ul><li><strong>第一：由于为了保证数组中每个元素的内存地址连续，所以在数组上随即删除或者增加元素的时候效率较低，因为随机增删元素会涉及到后面元素统一向前或者向后位移的操作。</strong></li><li><strong>第二：数组不能存储大量数据，因为很难在空间上找到一块特别大的连续的内存</strong></li></ul><p><strong>注意：对于数组中最后一个元素的增删是没有效率影响的</strong></p><h2 id="2、一维数组"><a href="#2、一维数组" class="headerlink" title="2、一维数组"></a>2、一维数组</h2><h3 id="1、怎样声明一个一维数组"><a href="#1、怎样声明一个一维数组" class="headerlink" title="1、怎样声明一个一维数组"></a>1、怎样声明一个一维数组</h3><p><strong>语法格式：</strong><br><strong><code>int[] array;</code></strong><br><strong><code>double[] array;</code></strong><br><strong><code>boolean[] array;</code><br><code>String[] array;</code><br><code>Object[] array;</code></strong></p><h3 id="2、怎样初始化一个一维数组呢？"><a href="#2、怎样初始化一个一维数组呢？" class="headerlink" title="2、怎样初始化一个一维数组呢？"></a>2、怎样初始化一个一维数组呢？</h3><p>包括两种方式：<strong>静态初始化一维数组、动态初始化一维数组</strong></p><p><strong>静态初始化一维数组</strong>：<code>int[] array = &#123;100,200,300&#125;;</code>、<code>String[] str = &#123;&quot;as&quot;,&quot;cs&quot; ,&quot;ds&quot;&#125;;</code><br>也可以使用 <code>int array[] = &#123;1,2,3&#125;</code>，这是C++风格，不建议在java中使用</p><p><strong>动态初始化一维数组</strong>：<br><code>int[] array = new int [5];</code> 这里的5表示数组元素个数,初始化一个5个长度的int类型数组，每个元素默认值为0</p><p><code>String[] names = new String[6];</code> 初始化6个长度的String类型数组，每个元素默认值null</p><h3 id="3、对一维数组中的元素访问"><a href="#3、对一维数组中的元素访问" class="headerlink" title="3、对一维数组中的元素访问"></a>3、对一维数组中的元素访问</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTest01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] a = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>       <br>       <span class="hljs-comment">//取（读）</span><br>        System.out.println(a.length);<br>        System.out.println(<span class="hljs-string">&quot;第一个元素是&quot;</span> + a[<span class="hljs-number">0</span>]);<br>        System.out.println(<span class="hljs-string">&quot;最后一个元素是&quot;</span> + a[<span class="hljs-number">4</span>]);<br>        System.out.println(<span class="hljs-string">&quot;最后一个元素是&quot;</span> + a[a.length - <span class="hljs-number">1</span>]);<br><br><span class="hljs-comment">//存（改）</span><br>        a[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<span class="hljs-comment">//把第一个元素修改</span><br>        <br>        a[a.length-<span class="hljs-number">1</span>] = <span class="hljs-number">999</span>;<span class="hljs-comment">//把最后一个元素修改</span><br>        <br>        System.out.println(<span class="hljs-string">&quot;第一个元素是&quot;</span> + a[<span class="hljs-number">0</span>]);<br>        System.out.println(<span class="hljs-string">&quot;最后一个元素是&quot;</span> + a[<span class="hljs-number">4</span>]);<br>        System.out.println(<span class="hljs-string">&quot;最后一个元素是&quot;</span> + a[a.length - <span class="hljs-number">1</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>输出结果：</strong><br><img src="/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/79be76fba5d72b5e36bccf7138ed626f-1741868481336-100.png" alt="在这里插入图片描述"></p><p>4、 一维数组的遍历</p><p><strong>遍历写法：</strong></p><p>提示：下标越界会出现异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">     接上面代码<br>     <br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; a.length; i++)&#123;<br>          System.out.println(a[i]);<br>      &#125;<br>      <br><span class="hljs-comment">//颠倒遍历</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> a.length - <span class="hljs-number">1</span>;i &gt;= <span class="hljs-number">0</span>; i--)&#123;<br>          System.out.println(<span class="hljs-string">&quot;颠倒顺序输出--&gt;&quot;</span> + a[i]);<br>      &#125;<br></code></pre></td></tr></table></figure><p><strong>结果：</strong><br><img src="/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/fd4a5b163d5e1d05098dac6a4d077c86-1741868481336-101.png" alt="在这里插入图片描述"></p><h3 id="5、静态存储Object类"><a href="#5、静态存储Object类" class="headerlink" title="5、静态存储Object类"></a>5、静态存储Object类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">o1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><span class="hljs-type">Object</span> <span class="hljs-variable">o2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><span class="hljs-type">Object</span> <span class="hljs-variable">o3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><br>Object[] object= &#123;o1,o2,o3&#125;;<br><br><span class="hljs-comment">/*或</span><br><span class="hljs-comment">Object[] object= &#123;new Object(),new Object(),new Object()&#125;;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; object.length; i++)&#123;<br>System.out.println(object[i]);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6、动态初始化一维数组"><a href="#6、动态初始化一维数组" class="headerlink" title="6、动态初始化一维数组"></a>6、动态初始化一维数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>       <span class="hljs-comment">//声明定义一个数组，采用动态初始化的方式创建</span><br>        <span class="hljs-type">int</span>[] a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">4</span>];<span class="hljs-comment">//创建长度为4的int数组，数组中每个元素的默认值为0</span><br><br><span class="hljs-comment">//遍历数组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; a.length; i++)&#123;<br>            System.out.println(<span class="hljs-string">&quot;数组中的下标为&quot;</span> + i +<span class="hljs-string">&quot;的元素是&quot;</span> + a[i]);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>输出结果：</strong><br><img src="/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/f32ff2631bcb9c10b0b18f8534fd4a4f-1741868481336-102.png" alt="在这里插入图片描述"></p><h3 id="7、什么时候采用静态初始化方法-动态初始化方法？"><a href="#7、什么时候采用静态初始化方法-动态初始化方法？" class="headerlink" title="7、什么时候采用静态初始化方法&#x2F;动态初始化方法？"></a>7、什么时候采用静态初始化方法&#x2F;动态初始化方法？</h3><blockquote><p>当你创建数组的时候，确定数组中存储哪些具体的元素的时候，采用静态初始化。<br>当你创建数组的时候，不确定数组中存储哪些数据，你可以采用动态初始化的方式，预先分配内存空间。</p></blockquote><h3 id="8、方法的参数为数组"><a href="#8、方法的参数为数组" class="headerlink" title="8、方法的参数为数组"></a>8、方法的参数为数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>       <span class="hljs-comment">//调用方法时传一个数组</span><br>        <span class="hljs-type">int</span>[] a = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br>        printArray(a);<br>        <br>        <span class="hljs-comment">//不能printArray(&#123;1,2,3&#125;);没有这个语法</span><br>       <span class="hljs-comment">/* 或</span><br><span class="hljs-comment">        printArray(new int[] &#123;1,2,3&#125;);</span><br><span class="hljs-comment">        */</span><br>    &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printArray</span><span class="hljs-params">(<span class="hljs-type">int</span>[] array)</span>&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;<br>                System.out.println( array[i]);<br>            &#125;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9、数组中存储引用数据类型"><a href="#9、数组中存储引用数据类型" class="headerlink" title="9、数组中存储引用数据类型"></a>9、数组中存储引用数据类型</h3><p><strong>对于数组来说，实际上只能存储java对象的“内存地址”。数组中存储的每个元素都是“引用”</strong></p><p>提示：不能存放别的引用数据类型</p><p><strong>如果继承该引用数据类型的数据类型可以使用该数组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">a1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>();<br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">a2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>();<br>        Animal[] animals = &#123;a1,a2&#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; animals.length; i++)&#123;<br>            animals[i].move();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">move</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Animal move&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>运行结果：</strong><br><img src="/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/109c50cfe0f51535aed647c4bdc8216e-1741868481336-103.png" alt="在这里插入图片描述"></p><h3 id="10、输出数组的方法"><a href="#10、输出数组的方法" class="headerlink" title="10、输出数组的方法"></a>10、输出数组的方法</h3><p><strong>错误示范</strong>：<code>System.out.println(array);　　//这样输出的是数组的首地址，而不能打印出数组数据</code></p><p><strong>正确写法：</strong><br><code>int[] array= &#123;1,2,3,4,5,6&#125;;</code></p><p><strong>方式一：for循环</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;array.length;i++)<br>&#123;<br>System.out.println(array[i]);<br>&#125;<br></code></pre></td></tr></table></figure><p>输出为：（自动换行格式的）</p><p><strong>方式二：for each</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> a:array)<br>System.out.println(a);<br></code></pre></td></tr></table></figure><p>输出格式同方式一。</p><p><strong>方式三：Arrays类中的toString方法（注意，是Arrays不是Array，Arrays类位于java.util包下）</strong><br>需要导入<code>import java.util.Arrays</code>包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] array= &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;;<br>System.out.println(Arrays.toString(array));<br></code></pre></td></tr></table></figure><h3 id="11、数组扩容"><a href="#11、数组扩容" class="headerlink" title="11、数组扩容"></a>11、数组扩容</h3><p><strong>java中对数组的扩容是：</strong></p><blockquote><p>先新建一个大容量的数组，然后将小容量数组中的数据一个一个拷贝到大数据当中。</p></blockquote><p>结论：数组扩容效率较低。因为涉及到拷贝的问题。所以在以后的开发中请注意：尽可能少的进行数组的拷贝。可以在创建数组对象的时候预估计以下多长合适，最好预估准确，这样可以减少数组的扩容次数，提高效率。</p><p><strong>第一种方法，建立一个新的数组，通过for循环来进行拷贝扩容</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] b=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[a.length*<span class="hljs-number">2</span>];<span class="hljs-comment">//a.length 长度；a数组的长度。即数组中数据的个数</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;a.length;i++)&#123;<br>b[i]=a[i];<br>&#125;<br>System.out.println(Arrays.toString(b));<span class="hljs-comment">//这个函数就是将数组b进行遍历输出</span><br><span class="hljs-comment">//如果不明白遍历什么意思，建议先学习遍历后再来看此篇文章</span><br></code></pre></td></tr></table></figure><p><strong>第二种方法：固定的写法。System.Arrays.copy(a,0,b,0,a.length);</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] c=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">20</span>];<br>System.arraycopy(a,<span class="hljs-number">0</span>,c,<span class="hljs-number">0</span>,a.length);<br><span class="hljs-comment">//a，需要复制的内容。第一个0（零）：在a中开始复制的内容的位置</span><br><span class="hljs-comment">//c,要复制的载体，在这里写c就是将a中需要复制的内容赋值给c</span><br><span class="hljs-comment">//第二个0（零）：在c中开始复制的位置</span><br><span class="hljs-comment">//a.length:要复制的元素量</span><br>System.out.println(Arrays.toString©);<br></code></pre></td></tr></table></figure><p><strong>方法三：利用函数方法直接扩容</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//原理，利用Arrays中的函数进行扩容</span><br><br><span class="hljs-type">int</span>[] d=Arrays.copyOf(a,<span class="hljs-number">22</span>);<span class="hljs-comment">//此函数的作用就是复制a的值。定义d的长度</span><br><br><span class="hljs-comment">// Arrays.copyOf(a,22); a，需要复制的内容（a数组），22：定义d数组的长度</span><br>System.out.println(Arryas.toString(d));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="12、数组拷贝"><a href="#12、数组拷贝" class="headerlink" title="12、数组拷贝"></a>12、数组拷贝</h3><p><strong>数组拷贝的方法</strong>：<code>System.arraycopy( Object src,int srcPos,Object dest, int destPos,int length)</code></p><blockquote><p>Object src：源数组<br>int srcPos：源数组起点下标<br>Object dest：目标数组<br>int destPos：目标数组起点下标<br>int length：拷贝的源数组的长度</p></blockquote><p><strong>数组中存储的元素是引用也可以拷贝。且拷贝的是对象的内存地址</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTest3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] src = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>,<span class="hljs-number">44</span>&#125;;<span class="hljs-comment">//拷贝源</span><br><br>        <span class="hljs-type">int</span>[] dest = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">20</span>];<span class="hljs-comment">//拷贝目标</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; dest.length; i++)&#123;<br>            System.out.print(dest[i]+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        <br>        System.out.println();<br>        <br>        System.arraycopy(src,<span class="hljs-number">1</span>,dest,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>);<span class="hljs-comment">//进行拷贝</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; dest.length; i++)&#123;<br>            System.out.print(dest[i]+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>运行结果：</strong><br><img src="/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/5f0163d5d127811b4b831e608ca29911-1741868481336-104.png" alt="在这里插入图片描述"></p><h2 id="3、-排序"><a href="#3、-排序" class="headerlink" title="3、 排序"></a>3、 排序</h2><h3 id="1、冒泡排序算法"><a href="#1、冒泡排序算法" class="headerlink" title="1、冒泡排序算法"></a>1、冒泡排序算法</h3><p><strong>思想：</strong></p><p>1、比较相邻的元素。如果第一个比第二个大，就交换他们两个。<br>2、对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。<br>3、针对所有的元素重复以上的步骤，除了最后一个。<br>4、持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</p><p><strong>举例：</strong><br><strong>(1)要排序数组:[10,1,35,61,89,36,55]</strong></p><p>(2)第一趟排序：</p><p>第一次排序：10和1比较，10大于1，交换位置 　　 　 [1,10,35,61,89,36,55]</p><p>第二趟排序：10和35比较，10小于35，不交换位置　　[1,10,35,61,89,36,55]</p><p>第三趟排序：35和61比较，35小于61，不交换位置　　[1,10,35,61,89,36,55]</p><p>第四趟排序：61和89比较，61小于89，不交换位置　　[1,10,35,61,89,36,55]</p><p>第五趟排序：89和36比较，89大于36，交换位置　　　[1,10,35,61,36,89,55]</p><p>第六趟排序：89和55比较，89大于55，交换位置　　　[1,10,35,61,36,55,89]</p><p>第一趟总共进行了六次比较，排序结果：[1,10,35,61,36,55,89]</p><p>(3)第二趟排序：</p><p>第一次排序：1和10比较，1小于10，不交换位置　　[1,10,35,61,36,55,89]</p><p>第二次排序：10和35比较，10小于35，不交换位置 [1,10,35,61,36,55,89]</p><p>第三次排序：35和61比较，35小于61，不交换位置 [1,10,35,61,36,55,89]</p><p>第四次排序：61和36比较，61大于36，交换位置　　　[1,10,35,36,61,55,89]</p><p>第五次排序：61和55比较，61大于55，交换位置　　　[1,10,35,36,55,61,89]</p><p>第二趟总共进行了5次比较，排序结果：[1,10,35,36,55,61,89]</p><p>(4)第三趟排序：</p><p>1和10比较，1小于10，不交换位置　　[1,10,35,36,55,61,89]</p><p>第二次排序：10和35比较，10小于35，不交换位置 [ 1,10,35,36,55,61,89]</p><p>第三次排序：35和36比较，35小于36，不交换位置 [1,10,35,36,55,61,89]</p><p>第四次排序：36和61比较，36小于61，不交换位置　　　[1,10,35,36,55,61,89]</p><p>第三趟总共进行了4次比较，排序结果：[1,10,35,36,55,61,89]</p><p>到目前位置已经为有序的情形了。<br><img src="/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2a3ccedd0c3d3cbc84526ac38c148956-1741868481336-105.png" alt="在这里插入图片描述"></p><p><strong>平均时间复杂度：O(n²)</strong></p><blockquote><p>最好情况：O(n)<br>最坏情况：O(n²)</p></blockquote><p><strong>空间复杂度：O(1)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BubbleSort</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> temp ; <span class="hljs-comment">//临时变量，存储数据</span><br>        <span class="hljs-type">int</span>[] a = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>&#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> a.length-<span class="hljs-number">1</span> ; i &gt; <span class="hljs-number">0</span> ; i-- )&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; j &lt; a.length-<span class="hljs-number">1</span> ; j++)&#123;<br>                <span class="hljs-keyword">if</span> (a[j] &gt; a[j+<span class="hljs-number">1</span>])&#123;<br>                    temp = a[j];<br>                    a[j] = a[j+<span class="hljs-number">1</span>];<br>                    a[j+<span class="hljs-number">1</span>] = temp;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> ( <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; a.length ; i++)&#123;<br>            System.out.print(a[i]+ <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、选择排序"><a href="#2、选择排序" class="headerlink" title="2、选择排序"></a>2、选择排序</h3><p><strong>思想：</strong><br>简单选择排序采用最简单的选择方式，从头至尾顺序扫描序列找出最小的一个关键字，和第一个关键字交换，接着从剩下的关键字中继续这种选择和交换，最终使序列有序。</p><p><strong>图解：</strong><br><img src="/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/7b43a6b5bb5e85bd73b6fa29bb70eb0a-1741868481336-106.png" alt="图片来源于百度"><br><strong>示例代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SelectSort</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] a = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>&#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; a.length - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> i;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt; a.length; j++) &#123;<br>                <span class="hljs-keyword">if</span> (a[min] &gt; a[j]) &#123;<br>                    min = j;<br>                &#125;<br>            &#125;<br>                <span class="hljs-type">int</span> temp;<br>                temp = a[i];<br>                a[i] = a[min];<br>                a[min] = temp;<br>        &#125;<br><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; a.length ; i++)&#123;<br>            System.out.println(a[i]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4、查找"><a href="#4、查找" class="headerlink" title="4、查找"></a>4、查找</h2><h3 id="1、二分查找法"><a href="#1、二分查找法" class="headerlink" title="1、二分查找法"></a>1、二分查找法</h3><p><strong>思想：</strong></p><p>假设数据是按升序排序的，对于给定值x，从序列的中间位置开始比较，如果当前位置值等于x，则查找成功；若x小于当前位置值，则在数列的前半段中查找；若x大于当前位置值则在数列的后半段中继续查找，直到找到为止。</p><p><strong>示例：</strong><br>假如有一组数为3，12，24，36，55，68，75，88要查给定的值24.可设三个变量front，mid，end分别指向数据的上界，中间和下界，mid&#x3D;（front+end）&#x2F;2.</p><p>1、开始令front&#x3D;0（指向3），end&#x3D;7（指向88），则mid&#x3D;3（指向36）。因为mid&gt;x，故应在前半段中查找。</p><p>2、令新的end&#x3D;mid-1&#x3D;2，而front&#x3D;0不变，则新的mid&#x3D;1。此时x&gt;mid，故确定应在后半段中查找。</p><p>3、令新的front&#x3D;mid+1&#x3D;2，而end&#x3D;2不变，则新的mid&#x3D;2，此时a[mid]&#x3D;x，查找成功。</p><p>如果要查找的数不是数列中的数，例如x&#x3D;25，当第三次判断时，x&gt;a[mid]，按以上规律，令front&#x3D;mid+1，即front&#x3D;3，出现front&gt;end的情况，表示查找不成功。</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(Integer[] srcArray, <span class="hljs-type">int</span> des)</span> &#123;<br>    <span class="hljs-comment">//定义初始最小、最大索引</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> srcArray.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//确保不会出现重复查找，越界</span><br>    <span class="hljs-keyword">while</span> (start &lt;= end) &#123;<br>        <span class="hljs-comment">//计算出中间索引值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (end + start)/<span class="hljs-number">2</span> ;<br>        <span class="hljs-keyword">if</span> (des == srcArray[mid]) &#123;<br>            <span class="hljs-keyword">return</span> mid;<br>        <span class="hljs-comment">//判断下限</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (des &lt; srcArray[mid]) &#123;<br>            end = mid - <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//判断上限</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            start = mid  + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//若没有，则返回-1</span><br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5、一维数组的应用"><a href="#5、一维数组的应用" class="headerlink" title="5、一维数组的应用"></a>5、一维数组的应用</h2><p><strong>一维数组模拟栈数据结构</strong></p><p><strong>要求：</strong></p><ul><li>1、这个栈可以存储java中任何引用数据类型。</li><li>2、在栈中提供push方法模拟压栈。（栈满会有提示信息）</li><li>3、在栈中提供pop方法模拟弹栈。（栈空了也要有提示信息）</li><li>4、编写测试程序，new栈对象，调用push、pop方法来模拟压栈弹栈动作。</li></ul><p><strong>MyStack类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyStack</span> &#123;<br><br>    <span class="hljs-comment">/**属性私有化需要get和set方法*/</span><br>    <span class="hljs-keyword">private</span> Object[] elements;<br><br>    <span class="hljs-comment">/**栈帧，永远指向栈顶元素。</span><br><span class="hljs-comment">    栈顶初始默认值应该是-1，因为刚开始栈是空的没有元素。*/</span><br>    <span class="hljs-keyword">private</span>  <span class="hljs-type">int</span> index ;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyStack</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//一维数组动态初始化</span><br>        <span class="hljs-comment">//默认初始化容量为10</span><br>        <span class="hljs-built_in">this</span>.elements = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">10</span>];<br>        <span class="hljs-comment">//给index初始化</span><br>        <span class="hljs-built_in">this</span>.index = -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 压栈的方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> obj 被压入元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">push</span><span class="hljs-params">(Object obj)</span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.index &gt;= <span class="hljs-built_in">this</span>.elements.length - <span class="hljs-number">1</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;栈已满，压栈失败！&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//程序能走到这里，说明栈没满</span><br>        <span class="hljs-comment">//向栈中加1个元素，栈帧向上移动一个位置。</span><br>        <span class="hljs-built_in">this</span>.index++;<br>        <span class="hljs-built_in">this</span>.elements[index] = obj;<br>        <span class="hljs-comment">//所有System.out.println()方法执行时。如果输出引用的话，自动调用引用的toString()方法</span><br>        System.out.println(<span class="hljs-string">&quot;压栈&quot;</span> + obj + <span class="hljs-string">&quot;元素成功，栈帧指向&quot;</span> + index);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 弹栈的方法，从数组中取出一个元素</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pop</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> )&#123;<br>           System.out.println(<span class="hljs-string">&quot;弹栈失败，栈已空&quot;</span>);<br>           <span class="hljs-keyword">return</span>;<br>       &#125;<br>        System.out.print(<span class="hljs-string">&quot;弹栈&quot;</span> + elements[index] + <span class="hljs-string">&quot;元素成功,&quot;</span>);<br>        index--;<br>        System.out.println(<span class="hljs-string">&quot;栈帧指向&quot;</span> + index);<br>    &#125;<br><br>    <span class="hljs-comment">/**set 和 get也许用不上，但是必须写上，这是规则</span><br><span class="hljs-comment">    封装：第一步：属性私有化，第二步：对外提供set和get方法。*/</span><br>    <span class="hljs-keyword">public</span> Object[] getElements() &#123;<br>        <span class="hljs-keyword">return</span> elements;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setElements</span><span class="hljs-params">(Object[] elements)</span> &#123;<br>        <span class="hljs-built_in">this</span>.elements = elements;<br>    &#125;<br>&#125;<br><br><span class="hljs-number">123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960</span><br></code></pre></td></tr></table></figure><p><strong>StackTest类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SatckTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//创建一个栈对象，初始化容量是10个</span><br>        <span class="hljs-type">MyStack</span> <span class="hljs-variable">stack</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyStack</span>();<br>        stack.push(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>());<br>        stack.push(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>());<br>        stack.push(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>());<br>        stack.push(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>());<br>        stack.push(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>());<br>        stack.push(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>());<br>        stack.push(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>());<br>        stack.push(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>());<br>        stack.push(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>());<br>        stack.push(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>());<br><br>        <span class="hljs-comment">//压这个元素失败了</span><br>        stack.push(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>());<br><br>        stack.pop();<br>        stack.pop();<br>        stack.pop();<br>        stack.pop();<br>        stack.pop();<br>        stack.pop();<br>        stack.pop();<br>        stack.pop();<br>        stack.pop();<br>        stack.pop();<br>        stack.pop();<br>    &#125;<br>&#125;<br><span class="hljs-number">1234567891011121314151617181920212223242526272829303132</span><br></code></pre></td></tr></table></figure><p><strong>输出结果：</strong><br><img src="/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/8d313ccd8561886f1399ba22e3140d74-1741868481336-107.png" alt="在这里插入图片描述"></p><h2 id="6、二维数组的应用"><a href="#6、二维数组的应用" class="headerlink" title="6、二维数组的应用"></a>6、二维数组的应用</h2><p><strong>为某个酒店编写程序：酒店管理系统，模拟订房、退房、打印所有房间状态等功能</strong></p><p><strong>要求：</strong></p><ul><li>1、该系统的用户是：酒店前台。</li><li>2、酒店中所有房间使用一个二维数组来模拟：<code>Room[][] rooms;</code></li><li>3、酒店中的每一个房间应该是一个java对象：Room。</li><li>4、每一个房间Room应该有：房间编号、房间类型属性、房间是否空闲</li><li>5、系统应该对外提供哪些功能：<br>可以预定房间：用户输入房间编号，订房。<br>可以退房：用户输入房间编号，退房。<br>可以查看所有房间的状态：用户输入某个指令应该可以查看所有房间状态。</li></ul><p><strong>HotelSystem：</strong> 酒店前台系统</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.company;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HotelSystem</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建酒店对象</span><br>       <span class="hljs-type">Hotel</span> <span class="hljs-variable">hotel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hotel</span>();<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        首先输出一个欢迎界面</span><br><span class="hljs-comment">        */</span><br>        System.out.println(<span class="hljs-string">&quot;************************&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;   欢迎使用本酒店管理系统  &quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;   请输入对于的功能编号：  &quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;   1    查看房间列表     &quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;   2    订房            &quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;   3    退房            &quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;   0    退出系统         &quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;************************&quot;</span>);<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-comment">//循环一直可以使用</span><br>        <span class="hljs-keyword">while</span> (flag)&#123;<br>            System.out.print(<span class="hljs-string">&quot;请输入功能编号：&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> s.nextInt();<br>            <span class="hljs-keyword">switch</span> (i)&#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                    System.out.println(<span class="hljs-string">&quot;已退出系统，欢迎下次光临！&quot;</span>);<br>                    flag = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    hotel.print();<br>                    <span class="hljs-keyword">break</span>;<br><br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                    System.out.print(<span class="hljs-string">&quot;请输入订房编号&quot;</span>);<br>                    <span class="hljs-type">Scanner</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> s1.nextInt();<br>                    hotel.order(i1);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                    System.out.print(<span class="hljs-string">&quot;请输入退房编号&quot;</span>);<br>                    <span class="hljs-type">Scanner</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> s2.nextInt();<br>                    hotel.exit(i2);<br>                    <span class="hljs-keyword">break</span>;<br><br>                <span class="hljs-keyword">default</span>:<br>                    System.out.println(<span class="hljs-string">&quot;输入功能编号有误，请重新输入&quot;</span>);<br><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Hotel类：</strong> 酒店对象，包含二维数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.company;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">酒店对象，酒店中有二维数组，二维数组模拟酒店房间</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hotel</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 二维数组，模拟大厦所有房间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Room[][] rooms;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 盖楼通过构造方法盖楼</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Hotel</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//一共有几层，每层的房间类型是什么，每个房间的编号是什么</span><br>        <span class="hljs-comment">//一层为单人间、二层为标准间、三层为总统套房</span><br>        <span class="hljs-comment">/*房间编号的规律</span><br><span class="hljs-comment">        * 1楼：101 102 103...</span><br><span class="hljs-comment">        * 2楼：201 202 203...</span><br><span class="hljs-comment">        * 3楼：301 302 302...*/</span><br><br>        rooms = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Room</span>[<span class="hljs-number">3</span>][<span class="hljs-number">10</span>];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; rooms.length ; i++)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span> ; j &lt; rooms[i].length; j++ )&#123;<br>               <span class="hljs-keyword">if</span> (i==<span class="hljs-number">0</span>)&#123;<br>                   rooms[i][j] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Room</span>((i+<span class="hljs-number">1</span>)*<span class="hljs-number">100</span>+j+<span class="hljs-number">1</span>,<span class="hljs-string">&quot;单人间&quot;</span>,<span class="hljs-literal">true</span>);<br>               &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>)&#123;<br>                   rooms[i][j] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Room</span>((i+<span class="hljs-number">1</span>)*<span class="hljs-number">100</span>+j+<span class="hljs-number">1</span>,<span class="hljs-string">&quot;标准间&quot;</span>,<span class="hljs-literal">true</span>);<br>               &#125;<span class="hljs-keyword">else</span>&#123;<br>                   rooms[i][j] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Room</span>((i+<span class="hljs-number">1</span>)*<span class="hljs-number">100</span>+j+<span class="hljs-number">1</span>,<span class="hljs-string">&quot;总统套房&quot;</span>,<span class="hljs-literal">true</span>);<br>               &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; rooms.length ; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; rooms[i].length; j++) &#123;<br>                <span class="hljs-type">Room</span> <span class="hljs-variable">room</span> <span class="hljs-operator">=</span> rooms[i][j];<br>                System.out.print(room.toString() + <span class="hljs-string">&quot; | &quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 订房方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> roomNo 调用此方法是需要传递一个房间的编号过来。这个房间编号是前台输入过来的。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">order</span><span class="hljs-params">(<span class="hljs-type">int</span> roomNo)</span>&#123;<br>        <span class="hljs-comment">//订房最主要的是将房间对象的status改为false。</span><br>        <span class="hljs-comment">//Room对象的status修改为false</span><br>        <span class="hljs-type">Room</span> <span class="hljs-variable">room</span> <span class="hljs-operator">=</span> rooms[(roomNo / <span class="hljs-number">100</span>) - <span class="hljs-number">1</span>][(roomNo % <span class="hljs-number">100</span>) - <span class="hljs-number">1</span>];<br>        <span class="hljs-comment">//修改为占用</span><br>        room.setStatus(<span class="hljs-literal">false</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exit</span><span class="hljs-params">(<span class="hljs-type">int</span> roomNo)</span>&#123;<br>        <span class="hljs-type">Room</span> <span class="hljs-variable">room</span> <span class="hljs-operator">=</span> rooms[(roomNo / <span class="hljs-number">100</span>) - <span class="hljs-number">1</span>][(roomNo % <span class="hljs-number">100</span>) - <span class="hljs-number">1</span>];<br>        room.setStatus(<span class="hljs-literal">true</span>);<br>        System.out.println(roomNo + <span class="hljs-string">&quot;已退房！&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Room类：</strong> 房间信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.company;<br><br><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Room</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 房间编号</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> no;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 房间类型：标准间 单人间 总统套房</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String type;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 房间状态：</span><br><span class="hljs-comment">     * true:表示空闲，可以预定。</span><br><span class="hljs-comment">     * false：表示占用，不能预定</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> status;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Room</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Room</span><span class="hljs-params">(<span class="hljs-type">int</span> no, String type, <span class="hljs-type">boolean</span> status)</span> &#123;<br>        <span class="hljs-built_in">this</span>.no = no;<br>        <span class="hljs-built_in">this</span>.type = type;<br>        <span class="hljs-built_in">this</span>.status = status;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> no;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNo</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123;<br>        <span class="hljs-built_in">this</span>.no = no;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getType</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> type;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setType</span><span class="hljs-params">(String type)</span> &#123;<br>        <span class="hljs-built_in">this</span>.type = type;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isStatus</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> status;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStatus</span><span class="hljs-params">(<span class="hljs-type">boolean</span> status)</span> &#123;<br>        <span class="hljs-built_in">this</span>.status = status;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * equals方法重写</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> obj</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 房间号是否相等</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == obj) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (obj == <span class="hljs-literal">null</span> || !(obj <span class="hljs-keyword">instanceof</span> Room)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-type">Room</span> <span class="hljs-variable">room</span> <span class="hljs-operator">=</span> (Room) obj;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.getNo() == room.getNo();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Objects.hash(no, type, status);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * toString方法重写</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 输出房间信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;房间号为&quot;</span> + no +<br>                <span class="hljs-string">&quot;, 类型为&#x27;&quot;</span> + type + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, 状态为&quot;</span> + (status?<span class="hljs-string">&quot;空闲&quot;</span>:<span class="hljs-string">&quot;占用&quot;</span>) ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>运行截图：</strong><br><img src="/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/af77d94c86097fae244b3a57644bb0c5-1741868481336-108.png" alt="在这里插入图片描述"></p><h1 id="九、异常处理"><a href="#九、异常处理" class="headerlink" title="九、异常处理"></a>九、异常处理</h1><h2 id="1、异常的基本概念"><a href="#1、异常的基本概念" class="headerlink" title="1、异常的基本概念"></a>1、异常的基本概念</h2><h3 id="1、什么是异常-java提供异常处理机制有什么用"><a href="#1、什么是异常-java提供异常处理机制有什么用" class="headerlink" title="1、什么是异常, java提供异常处理机制有什么用?"></a><strong>1、什么是异常, java提供<a href="https://so.csdn.net/so/search?q=%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86&spm=1001.2101.3001.7020">异常处理</a>机制有什么用?</strong></h3><p><strong>异常就是程序执行过程中的不正确情况。</strong></p><blockquote><p>以下程序执行过程中发生了不正常的情况,而这种不正常的情况叫做:<strong>异常</strong><br>java语言是很完善的语言,提供了异常的处理方式,以下程序执行过程中出现了不正常情况，<br>java把该异常信息打印输出到控制台，供程序员参考。程序员看到异常信息之后，可以对<br>程序进行修改，让程序更加的健壮。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionTest01</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> c=a/b;<br>System. out.println(a + <span class="hljs-string">&quot;/”+ b + &quot;</span>=<span class="hljs-string">&quot;+ c);</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/a299b2905ca02903abc8bfdcecbb032e-1741868481336-109.png" alt="在这里插入图片描述"><br>观察到异常信息之后,对程序进行修改，更加健壮</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionText</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>            <span class="hljs-type">int</span> a=<span class="hljs-number">10</span>;<br>            <span class="hljs-type">int</span>  b=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span>(b == <span class="hljs-number">0</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;除数不能为0&quot;</span>);<br>                <span class="hljs-keyword">return</span>; <br>            &#125;<br>            <span class="hljs-type">int</span> c= a/b;<br>            System. out.println(a + <span class="hljs-string">&quot;/&quot;</span>+ b + <span class="hljs-string">&quot;=&quot;</span> + c);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>2、上述程序出现了异常信息：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Exception in thread <span class="hljs-string">&quot;main&quot;</span> java.lang.ArithmeticException: / by zero<br>at ExceptionText.main(ExceptionText.java:<span class="hljs-number">6</span>)<br></code></pre></td></tr></table></figure><p>这个信息被我们称为：<strong>异常信息</strong>。这个信息是<strong>JVM打印的</strong></p><h3 id="2、java中异常以类和对象形式存在"><a href="#2、java中异常以类和对象形式存在" class="headerlink" title="2、java中异常以类和对象形式存在"></a>2、java中异常以类和对象形式存在</h3><p><strong>1、异常在Java中以类的形式存在，每一个异常类都可以创建异常对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionText</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>            <br>            <span class="hljs-comment">//java.lang.NumberFormatException: 数字格式化异常</span><br>            <span class="hljs-type">NumberFormatException</span> <span class="hljs-variable">nfe</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NumberFormatException</span>(<span class="hljs-string">&quot;数字格式化异常&quot;</span>);<br>            System.out.println(nfe);<br><br>            <span class="hljs-type">NullPointerException</span> <span class="hljs-variable">npe</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>(<span class="hljs-string">&quot;空指针异常发生了&quot;</span>);<br>            <span class="hljs-comment">// java.lang.NullPointerException:空指针异常发生了</span><br>            System.out.println(npe);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/ba02a7638518d037b5204e404ef440fa-1741868481336-110.png" alt="在这里插入图片描述"></p><p><strong>2、异常对应的现实是怎样的？</strong></p><blockquote><p><strong>火灾（异常类）</strong>：<br>2008年8月8日，小明家着火了（异常对象）<br>2008年8月9日，小刚家着火了（异常对象）<br>2008年9月8日，小红家着火了（异常对象）</p></blockquote><p><strong>类是模板，对象是实际存在的个体</strong></p><h2 id="2、异常的继承结构（UML图）"><a href="#2、异常的继承结构（UML图）" class="headerlink" title="2、异常的继承结构（UML图）"></a>2、异常的继承结构（UML图）</h2><p><strong>1、Object下有Throwable（可抛出的）</strong></p><blockquote><p><strong>不管是错误还是异常都是可以抛出的。</strong></p></blockquote><p><strong>2、Throwable下有两个分支：Error（不可处理的，直接退出JVM）和Exception（可处理的）</strong></p><blockquote><p><strong>所有的错误只要发生，Java程序只有一个结果，那就是终止程序的执行。退出JVM，错误是不能处理的。</strong></p></blockquote><p><strong>3、Exception下有两个分支</strong>：</p><ul><li><strong>Exception的直接子类（Exceptionsubclass）</strong>：编译时异常（要求程序员在编写程序阶段必须预先对这些异常进行处理，如果不处理编译器报错，因此得名编译时异常）</li><li><strong>RuntimeException：</strong> 运行时异常。（在编写程序阶段程序员可以预先处理，也可以不管）<br><img src="/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/41b4af85fb656ddc42aec7e617ae7172-1741868481336-111.png" alt="在这里插入图片描述"></li></ul><h2 id="3、编译时异常和运行时异常区别"><a href="#3、编译时异常和运行时异常区别" class="headerlink" title="3、编译时异常和运行时异常区别"></a>3、编译时异常和运行时异常区别</h2><p><strong>1、编译时异常因为什么而得名</strong></p><p>编译时异常和运行时异常，都发生在<strong>运行阶段</strong>。编译阶段异常是不会发生的。<strong>编译时异常因为什么而得名？</strong></p><blockquote><p>因为编译时异常必须在编译（编写）阶段预先处理，如果不处理编译器报错，因此得名。<br>所有异常都是运行阶段发生的。因为只有程序运行阶段才可以new对象。<br>因为异常的发生都是new异常对象。</p></blockquote><p><strong>2、编译时异常和运行时异常区别</strong></p><ul><li><strong>编译时异常一般发生的概率比较高。<br>对于一些发生概率较高的异常，需要在运行之前对其进行预处理。</strong></li><li><strong>运行时异常一般发生的概率比较低。</strong></li></ul><p>假设java中没有对异常进行划分，没有分为：编译时异常和运行时异常，所有的异常都需要在编写程序阶段对其进行预处理，将会是怎样的效果呢？</p><blockquote><p>如果代码是这样的话，程序肯定是绝对安全的。但是程序员编写程序太累，代码到处都是处理异常的代码</p></blockquote><p><strong>3、编译时异常还有其他名字</strong></p><ul><li>受控异常 （CheckException）</li><li>受检异常</li></ul><p><strong>4、运行时异常还有其他名字</strong></p><ul><li>未受检异常（UnCheckException）</li><li>非受控异常</li></ul><p><strong>5、所有异常都发生在运行阶段的</strong></p><h2 id="4、Java两种异常处理的方式及原理"><a href="#4、Java两种异常处理的方式及原理" class="headerlink" title="4、Java两种异常处理的方式及原理"></a>4、Java两种异常处理的方式及原理</h2><h3 id="1、异常上抛"><a href="#1、异常上抛" class="headerlink" title="1、异常上抛"></a>1、异常上抛</h3><p><strong>在方法声明的位置上，使用<code>throws</code>关键字，抛给上一级</strong></p><blockquote><p>谁调用我，我就抛给谁，抛给上一级。</p></blockquote><h3 id="2、异常捕捉"><a href="#2、异常捕捉" class="headerlink" title="2、异常捕捉"></a>2、异常捕捉</h3><p><strong>使用<code>try..catch语句</code>进行异常的捕捉</strong></p><blockquote><p>这件事发生了，谁也不知，因为我给抓住了。</p></blockquote><p><strong>举例：</strong></p><p>我是某集团的一个销售员，因为我的失误，导致公司损失了1000块钱。”损失1000块”这可以看做一个异常发生了。我有两种处理方式。</p><ul><li>第一种方式：我把这件事告诉我的领导。【<strong>异常上抛</strong>】</li><li>第二种方式：我把自己的掏腰包把这个钱补上。【<strong>异常的捕捉</strong>】</li></ul><p>同样的异常发生之后，如果选择上抛，抛给了调用者，调用者需要对这个异常继续处理，那么调用者处理这个异常<strong>同样有两种处理方式</strong>。</p><p><strong>注意：</strong></p><p>Java中异常发生之后如果一直上抛，最终抛给了main方法，main方法继续向上抛，<strong>抛给了调用者JVM</strong>，JVM知道这个异常的发生，只有只有一个结果。终止java程序的执行。</p><p><strong>1、运行时异常编写程序时可以不处理</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionTest01</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> c=a/b;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">程序执行到此处发生了ArithmeticException异常</span><br><span class="hljs-comment">底层new一个ArithmeticException异常对象</span><br><span class="hljs-comment">然后抛出了，由于是main方法调用了c=a/b</span><br><span class="hljs-comment">所以这个异常ArithmeticException抛给main方法</span><br><span class="hljs-comment">main方法没有处理，将这个异常自动抛给JVM</span><br><span class="hljs-comment">JVM最终终止程序的执行</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">ArithmeticException 继承 RuntimeException，属于运行时异常。</span><br><span class="hljs-comment">在编写程序阶段不需要对这种异常进行预先的处理。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br>System. out.println(a + <span class="hljs-string">&quot;/”+ b + &quot;</span>=<span class="hljs-string">&quot;+ c);</span><br><span class="hljs-string"></span><br><span class="hljs-string">//这里的HelloWorld没有输出，没有执行。</span><br><span class="hljs-string">System.out.println(&quot;</span>Hello World!<span class="hljs-string">&quot;);//</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>2、方法声明上使用throws</strong></p><p>以下代码报错的原因是什么？</p><blockquote><p>因为doSome()方法声明位置上使用了：throws ClassNotFoundException<br>而ClassNotFoundException是编译时异常。必须编写代码时处理，没有处理编译器报错。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionText1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//main方法中调用doSome()方法</span><br>        <span class="hljs-comment">//因为doSome()方法声明位置上有：throws ClassNotFoundException</span><br>        <span class="hljs-comment">//我们在调用doSome()方法的时候必须对这种异常进行预先的处理。</span><br>        <span class="hljs-comment">//如果不处理,编译器就报错</span><br>        <span class="hljs-comment">//报错信息： 未报告的异常错误java.lang.ClassNotFoundException</span><br>        doSome();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * doSome方法在方法声明的位置上使用了：throws ClassNotFoundException</span><br><span class="hljs-comment">     * 这个代码表示doSome（）方法在执行过程中，有可能会出现ClassNotFoundException异常。</span><br><span class="hljs-comment">     * 叫做类没找到异常。这个异常直接父类是： Exception，所以ClassNotFoundException属于编译异常。</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ClassNotFoundException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSome</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException&#123;<br>        System.out.println(<span class="hljs-string">&quot;doSome!!!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/f67d24cc2ebcf6c98e39b370f2bd4eef-1741868481336-112.png" alt="在这里插入图片描述"></p><p><strong>3、异常处理的具体方式</strong></p><p><strong>第一种处理方式：在方法声明的位置上继续使用：throws，来完成异常的继续上抛。抛给调用者</strong><br>上抛类似于推卸责任。（继续把异常传递给调用者）<br><strong>这种处理异常的态度：上报</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionText1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        doSome();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSome</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException&#123;<br>        System.out.println(<span class="hljs-string">&quot;doSome!!!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>第二种方式：<code>try ... catch</code>进行异常捕捉</strong><br>捕捉等于把异常拦下了，异常真正的解决了。（调用者不知道的）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionText1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//尝试</span><br>        doSome();<br>        &#125;<span class="hljs-keyword">catch</span> (ClassNotFoundException e)&#123;<br>        <span class="hljs-comment">//catch是捕捉异常之后走的分支</span><br>e.printStackTrace;<br>&#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSome</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException&#123;<br>        System.out.println(<span class="hljs-string">&quot;doSome!!!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>一般不建议在main方法上使用throws，因为这个异常如果真正发生了，一定会抛给JVM。JVM只有终止。一般采用<code>try...catch</code>进行捕捉。</strong></p><p><strong>4、异常捕捉和上报的联合使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionText2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;main begin &quot;</span>);<br>        m1();<br>        System.out.println(<span class="hljs-string">&quot;main over&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;m1 begin&quot;</span>);<br>        m2();<br>        System.out.println(<span class="hljs-string">&quot;m1 over&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m2</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;m2 begin&quot;</span>);<br>        m3();<br>        System.out.println(<span class="hljs-string">&quot;m3 over&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m3</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//调用SUN jdk中某个类的构造方法</span><br>        <span class="hljs-comment">//这个类是IO流的</span><br>        <span class="hljs-comment">//创建一个输入流对象，该流指向一个文件。</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;C:\\Users\\Administrator\\Desktop\\Java自学\\学习.txt&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/67569c37bceafb9ceefedd0820a888e6-1741868481336-113.png" alt="在这里插入图片描述"><br><strong>编译报错的原因：</strong></p><ul><li>第一：这里调用了一个构造方法：<code>FileInputStream（String name）</code></li><li>第二：这个构造方法的声明位置上有：throws FileNotFoundException</li><li>第三：通过类的继承结构看到：FileNotFoundException父类是IOException，IOException的父类是Exception。</li></ul><p><strong>最终得知，FileNotFoundException是编译时异常。编译时异常要求程序员编写阶段必须对它进行处理，不处理编译器就报错</strong></p><p>进行异常处理后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionText2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;main begin &quot;</span>);<br>        m1();<br>        System.out.println(<span class="hljs-string">&quot;main over&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;m1 begin&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            m2();<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>        <span class="hljs-comment">//这个分支中可以使用e引用，e引用保存的内存地址是new出来异常对象的内存地址</span><br>        <span class="hljs-comment">//catch是捕捉异常之后走的分支</span><br>            System.out.println(<span class="hljs-string">&quot;文件不存在，可能路径错误，也可能文件被删除了！&quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;m1 over&quot;</span>);<br>    &#125;<br><br>   <span class="hljs-comment">//也可以    throws Exception</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> FileNotFoundException &#123;<br>        System.out.println(<span class="hljs-string">&quot;m2 begin&quot;</span>);<br>        <span class="hljs-comment">//编译器报错的原因是：m3()方法声明位置上有：throws FileNotFoundException</span><br>        <span class="hljs-comment">//我们这里调用m3()没有对异常进行预处理，所以编译报错</span><br>        m3();<br>        System.out.println(<span class="hljs-string">&quot;m3 over&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> FileNotFoundException &#123;<br>        <span class="hljs-comment">//调用SUN jdk中某个类的构造方法</span><br>        <span class="hljs-comment">//这个类是IO流的</span><br>        <span class="hljs-comment">//创建一个输入流对象，该流指向一个文件。</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;C:\\Users\\Administrator\\Desktop\\Java自学\\学习.txt&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上抛异常也可以 <code>throws Exception</code></p><p><strong>注意：只要异常没有捕捉，采用上报的方式，此方法的后续代码不会执行。<br>另外需要注意，try语句块中的某一行出现异常，该行后面的代码不会执行。</strong></p><p><strong>5、上报和捕捉怎么选择？</strong></p><ul><li><strong>如果希望调用者来处理，选择throws上报。</strong></li><li><strong>其他情况可以使用捕捉的方式</strong></li></ul><h2 id="5、try…catch语句"><a href="#5、try…catch语句" class="headerlink" title="5、try…catch语句"></a>5、try…catch语句</h2><p><strong>1、catch后面的小括号的类型可以是具体的异常类型，也可以是该异常类的父类型</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionText2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;C:\\Users\\Administrator\\Desktop\\Java自学\\学习.txt&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;以上出现异常，这里的代码无法执行！&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span>(FileNotFoundException e)&#123;<br>            System.out.println(<span class="hljs-string">&quot;文件不存在！&quot;</span>);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;hello world&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/45e016c77f8a2550759c5712560e2bd5-1741868481336-114.png" alt="在这里插入图片描述"><br><strong>也可以写为多态：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-comment">//创建输入流</span><br>    <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;C:\\Users\\Administrator\\Desktop\\Java自学\\学习.txt&quot;</span>);<br>&#125;<span class="hljs-keyword">catch</span>(IOException e)&#123; <span class="hljs-comment">//多态：IOException e = new FileNotFoundException();</span><br>    System.out.println(<span class="hljs-string">&quot;文件不存在！&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>          <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;C:\\Users\\Administrator\\Desktop\\Java自学\\学习.txt&quot;</span>);<br>      &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123; <span class="hljs-comment">//多态：Exception e = new FileNotFoundException();</span><br>          System.out.println(<span class="hljs-string">&quot;文件不存在！&quot;</span>);<br>      &#125;<br></code></pre></td></tr></table></figure><p><strong>2、catch可以写多个</strong></p><p>建议catch的时候，精确的一个一个处理。这样有利于程序的调试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionText2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-comment">//创建输入流</span><br>            <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;C:\\Users\\Administrator\\Desktop\\Java自学\\学习.txt&quot;</span>);<br>            <span class="hljs-comment">//读文件</span><br>            fis.read();<br>        &#125;<span class="hljs-keyword">catch</span>(FileNotFoundException e)&#123; <span class="hljs-comment">//所有异常都走这个分支</span><br>            System.out.println(<span class="hljs-string">&quot;文件不存在！&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span>(IOException e)&#123;<br>            System.out.println(<span class="hljs-string">&quot;读文件报错了！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3、catch后面异常中可以加 | 号（JDK8新特性，7不支持）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionText2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-comment">//创建输入流</span><br>            <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;C:\\Users\\Administrator\\Desktop\\Java自学\\学习.txt&quot;</span>);<br><br>            System.out.println(<span class="hljs-number">100</span>/<span class="hljs-number">0</span>);<span class="hljs-comment">//这个异常是运行时异常，编写程序时可以处理，也可以不处理</span><br><br>        &#125;<span class="hljs-keyword">catch</span>(FileNotFoundException | ArithmeticException | NullPointerException e)&#123; <span class="hljs-comment">//所有异常都走这个分支</span><br>            System.out.println(<span class="hljs-string">&quot;文件不存在？数字异常？空指针异常？都有可能！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>4、catch写多个的时候，从上到下，必须遵守从小到大</strong></p><h2 id="6、获取异常对象的方法：getMessage和printStackTrace"><a href="#6、获取异常对象的方法：getMessage和printStackTrace" class="headerlink" title="6、获取异常对象的方法：getMessage和printStackTrace()"></a>6、获取异常对象的方法：getMessage和printStackTrace()</h2><h3 id="1、getMessage"><a href="#1、getMessage" class="headerlink" title="1、getMessage"></a>1、getMessage</h3><p><strong>获取异常简单的描述信息。</strong></p><p>语法格式：<code>String msg = exception.getMessage();</code></p><h3 id="2、printStackTrace"><a href="#2、printStackTrace" class="headerlink" title="2、printStackTrace()"></a>2、printStackTrace()</h3><p><strong>打印异常追踪的堆栈信息，比较适合于程序的调试阶段</strong></p><p>语法格式：<code>exception.printStackTrace();</code></p><h3 id="3、两个方法的实例"><a href="#3、两个方法的实例" class="headerlink" title="3、两个方法的实例"></a>3、两个方法的实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionText3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//这里只是为了测试getMessage()方法和printStackTrace()方法</span><br>        <span class="hljs-comment">//这里只是new了异常对象，但是没有将异常对象抛出。JVM会认为这是一个普通的java对象。</span><br>        <span class="hljs-type">NullPointerException</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>(<span class="hljs-string">&quot;空指针异常Exception &quot;</span>);<br><br>        <span class="hljs-comment">//获取异常简单描述信息：这个信息实际上就是构造方法上面String参数</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> e.getMessage();<span class="hljs-comment">//空指针异常Exception</span><br>        System.out.println(msg);<br><br>        <span class="hljs-comment">//打印异常堆栈信息</span><br>        <span class="hljs-comment">//java后台打印异常堆栈追踪信息的时候，采用了异步线程的方式打印的。</span><br>        e.printStackTrace();<br><br>        System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/56d3cae2401bbd3a0fec893130806055-1741868481336-115.png" alt="在这里插入图片描述"></p><h3 id="4、查看异常的追踪信息"><a href="#4、查看异常的追踪信息" class="headerlink" title="4、查看异常的追踪信息"></a><strong>4、查看异常的追踪信息</strong></h3><p>我们应该怎么看，可以快速的调试程序呢？</p><blockquote><p>异常信息追踪信息，从上往下一行一行看。<br>但是需要注意的是：SUN写的代码就不用看了。主要问题是出现在自己编写的代码上。</p></blockquote><p>即从运行结果中的<code>at ExceptionText3.m3(ExceptionText3.java:27)</code>这一行看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionText3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            m1();<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            <span class="hljs-comment">//打印异常堆栈追踪信息</span><br>            <span class="hljs-comment">//在实际开发中建议使用这个。养成好习惯</span><br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-comment">//这里程序不耽误执行，很健壮</span><br>        System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> FileNotFoundException &#123;<br>        m2();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> FileNotFoundException &#123;<br>        m3();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> FileNotFoundException &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;C:\\Users\\Administrator\\Desktop\\学习a.txt&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/f89a4c862d6970cb43bbf5a4922da4a4-1741868481336-116.png" alt="在这里插入图片描述"><br><strong>因为27行出现了问题导致23行<br>23行出问题导致19行<br>19行出问题导致7行<br>应该先查看27行的的代码。27行是错误的根源，从根上看问题</strong></p><p><strong>防止误导再加一条！！！！：</strong></p><p><strong>尽量不要使用e.printStackTrace(),而是使用log打印。</strong></p><p>反例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>  <span class="hljs-comment">// do what you want  </span><br>&#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>  e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>  <span class="hljs-comment">// do what you want  </span><br>&#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>  log.info(<span class="hljs-string">&quot;你的程序有异常啦,&#123;&#125;&quot;</span>,e);<br>&#125;<br></code></pre></td></tr></table></figure><p>理由：</p><ul><li><p>printStackTrace()打印出的堆栈日志跟业务代码日志是交错混合在一起的，通常排查异常日志不太方便。</p></li><li><p>e.printStackTrace()语句产生的字符串记录的是堆栈信息，如果信息太长太多，字符串常量池所在的内存块没有空间了,即内存满了，那么，用户的请求就卡住啦~</p></li></ul><h2 id="7、finally关键字"><a href="#7、finally关键字" class="headerlink" title="7、finally关键字"></a>7、finally关键字</h2><p><strong>关于try…catch中的finally子句</strong></p><h3 id="1、在finally子句中的代码是最后执行的，并且是一定会执行的，即使try语句块中的代码出现了异常。"><a href="#1、在finally子句中的代码是最后执行的，并且是一定会执行的，即使try语句块中的代码出现了异常。" class="headerlink" title="1、在finally子句中的代码是最后执行的，并且是一定会执行的，即使try语句块中的代码出现了异常。"></a>1、在finally子句中的代码是最后执行的，并且是一定会执行的，即使try语句块中的代码出现了异常。</h3><ul><li>finally子句必须和try一起出现，不能单独编写。</li></ul><h3 id="2、finally语句通常使用在哪些情况下呢？"><a href="#2、finally语句通常使用在哪些情况下呢？" class="headerlink" title="2、finally语句通常使用在哪些情况下呢？"></a>2、finally语句通常使用在哪些情况下呢？</h3><blockquote><p><strong>通常在finally语句块中完成资源的释放&#x2F;关闭</strong><br><strong>因为finally中的代码比较有保障</strong><br><strong>即使try语句块中的代码出现异常，finally中的代码也会正常执行</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionText3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">//声明位置放到try外面，这样在finally中才能用</span><br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-comment">//创建输入流对象</span><br>            fis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;C:\\Users\\Administrator\\Desktop\\学习.txt&quot;</span>);<br>            <span class="hljs-comment">//开始读文件...</span><br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-comment">//这里一定会出现空指针异常！</span><br>            s.toString();<br>            System.out.println(<span class="hljs-string">&quot;hello world!&quot;</span>);<br><br>            <span class="hljs-comment">//流使用完需要关闭，因为流是占用资源的</span><br>            <span class="hljs-comment">//即使以上程序出现异常，流也必须要关闭</span><br>            <span class="hljs-comment">//放在这里有可能流关不了</span><br>            <span class="hljs-comment">//fis.close();</span><br>        &#125;<span class="hljs-keyword">catch</span>(FileNotFoundException e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">catch</span>(IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">catch</span>(NullPointerException e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;hello 浩克&quot;</span>);<br>            <span class="hljs-comment">//流的关闭放在这里比较保险</span><br>            <span class="hljs-comment">//finally中的代码是一定会执行的</span><br>            <span class="hljs-comment">//即使try中出现了异常！</span><br>            <span class="hljs-keyword">if</span>(fis != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//避免空指针异常</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">//close方法有异常采用捕捉的方式</span><br>                    fis.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;hello kitty!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong><code>fis.close</code>未被注释前：</strong><br><img src="/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/9788dcef9a38f7e79d6892ab750d74b1-1741868481336-117.png" alt="在这里插入图片描述"><br><strong>修改后：</strong><br><img src="/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/a716e37161d251f9a050e69d81f4a88f-1741868481336-118.png" alt="在这里插入图片描述"></p><h3 id="3、try和finally，也可以没有catch"><a href="#3、try和finally，也可以没有catch" class="headerlink" title="3、try和finally，也可以没有catch"></a>3、try和finally，也可以没有catch</h3><ul><li><strong>try不能单独使用。</strong></li><li><strong>try 可以和finally联合使用。</strong></li></ul><p><strong>以下代码的执行顺序：</strong></p><blockquote><p>先执行try…<br>再执行finally<br>最后执行return（return语句只要执行方法必然结束）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionText4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;try...&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//finally中的语句会执行。能执行到。</span><br>            System.out.println(<span class="hljs-string">&quot;finally...&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//这里不能写语句，因为这个代码是无法执行到的。</span><br>        <span class="hljs-comment">//System.out.println(&quot;Helloword&quot;);</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>运行结果：</strong><br><img src="/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/4c2c99eb5fe42b508afc3b1e60d0432b-1741868481336-119.png" alt="在这里插入图片描述"></p><h3 id="4、退出JVM，finally语句不执行"><a href="#4、退出JVM，finally语句不执行" class="headerlink" title="4、退出JVM，finally语句不执行"></a>4、退出<a href="https://so.csdn.net/so/search?q=JVM&spm=1001.2101.3001.7020">JVM</a>，finally语句不执行</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionText5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;try..&quot;</span>);<br>            <span class="hljs-comment">//退出JVM</span><br>            System.exit(<span class="hljs-number">0</span>);<span class="hljs-comment">//退出JVM之后，finally语句中的代码就不执行了！</span><br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;finally..&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>运行结果：</strong><br><img src="/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/f154e592b428ea8489264d99cf95c37f-1741868481336-120.png" alt="在这里插入图片描述"></p><h3 id="5、关于finally的一道面试题"><a href="#5、关于finally的一道面试题" class="headerlink" title="5、关于finally的一道面试题"></a>5、关于finally的一道面试题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionText5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> m();<br>        System.out.println(result);<span class="hljs-comment">//结果为100</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">m</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//这行代码出现在int i = 100的下面，所以最终结果必须是返回100</span><br>        <span class="hljs-comment">//return语句还必须保证是最后执行的。一但执行，整个方法结束。</span><br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            i++;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后的结果为 <strong><code>100</code>：</strong><br><img src="/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/afb809465734bb03c854e3a22455a12b-1741868481336-121.png" alt="在这里插入图片描述"><br><strong>解释：</strong> Java语法中有这样一条规则：</p><ul><li><strong>方法体中的代码必须遵循自上而下顺序依次逐行执行</strong>（亘古不变的语法！）</li></ul><p>Java中还有一条语法规则：</p><ul><li><strong>return语句一但执行，整个方法必须结束</strong>（亘古不变的语法！）</li></ul><p>反编译之后的结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">m</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i;<br>i++;<br><span class="hljs-keyword">return</span> j;<br>Exception exception;<br>exception;<br>i++;<br><span class="hljs-keyword">throws</span> exception;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8、final、finalize和finally的区别"><a href="#8、final、finalize和finally的区别" class="headerlink" title="8、final、finalize和finally的区别"></a>8、final、finalize和finally的区别</h2><h3 id="1、final"><a href="#1、final" class="headerlink" title="1、final"></a>1、final</h3><p><strong>final是一个关键字。表示最终的，不可变的。</strong></p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs axapta">   <span class="hljs-comment">//final修饰的变量无法重新赋值。</span><br><br>   <span class="hljs-keyword">final</span> <span class="hljs-built_in">int</span> i = <span class="hljs-number">100</span>;<br>   <span class="hljs-comment">//i = 200； 不能变</span><br><br>   <span class="hljs-comment">//final修饰的类无法继承</span><br><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br> <span class="hljs-comment">//常量</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-built_in">double</span> MATH_PI = <span class="hljs-number">3.1415926</span>;<br>&#125;<br><br>   <span class="hljs-comment">//final修饰的方法无法覆盖</span><br><br> <span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> &#123;<br> <span class="hljs-keyword">public</span>  <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> doSome()&#123;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、finalize"><a href="#2、finalize" class="headerlink" title="2、finalize"></a>2、finalize</h3><p><strong>finalize()方法JVM的GC垃圾回收器负责调用</strong></p><p>当一个java对象即将被<a href="https://so.csdn.net/so/search?q=%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6&spm=1001.2101.3001.7020">垃圾回收</a>器回收的时候，垃圾回收器负责调用finalize()方法。<strong>如果希望在对象销毁时机执行一段代码的话，这段代码要写到finalize()方法中</strong>（留遗嘱）</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs isbl">  - <span class="hljs-function"><span class="hljs-title">finalize</span>()是<span class="hljs-variable"><span class="hljs-class">Object</span></span>类中的一个方法。作为方法名出现</span><br><span class="hljs-function">  - 所以<span class="hljs-variable">finalize</span>是一个标识符。</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-variable"><span class="hljs-class">Object</span></span> <span class="hljs-variable">obj</span>;</span><br><span class="hljs-function"></span><br></code></pre></td></tr></table></figure><h2 id="3、finally"><a href="#3、finally" class="headerlink" title="3、finally"></a>3、finally</h2><p><strong>finally是一个关键字，和try联合使用，使用在异常处理机制中。</strong></p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">   - 在<span class="hljs-keyword">finally</span>语句块中的代码是一定会执行的。<br><br><span class="hljs-keyword">try</span> &#123;<br><br>&#125;<span class="hljs-keyword">catch</span>&#123;<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;finally...&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9、如何自定义异常及手动抛出异常"><a href="#9、如何自定义异常及手动抛出异常" class="headerlink" title="9、如何自定义异常及手动抛出异常"></a>9、如何自定义异常及手动抛出异常</h2><h3 id="1、自定义异常的方法"><a href="#1、自定义异常的方法" class="headerlink" title="1、自定义异常的方法"></a>1、自定义异常的方法</h3><p>需要两步：</p><ul><li>第一步：<strong>编写一个类继承Exception或者RunTimeException</strong></li><li>第二步：<strong>提供两个构造方法，一个无参数的，一个带有String参数的。</strong></li></ul><p><strong>MyException类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Exception</span>&#123;<span class="hljs-comment">//编译时异常</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyException</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyException</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>main类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FinalsText</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//创建异常对象（只new了异常对象，并没有手动抛出）</span><br>        <span class="hljs-type">MyException</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyException</span>(<span class="hljs-string">&quot;用户名不能为空&quot;</span>);<br><br>        <span class="hljs-comment">//打印异常堆栈信息</span><br>        e.printStackTrace();<br><br>        <span class="hljs-comment">//获取异常简单描述信息</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> e.getMessage();<br>        System.out.println(msg);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>运行结果：</strong><br><img src="/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/6f276cefc1a6294c9f10e65b97eb092a-1741868481336-122.png" alt="在这里插入图片描述"></p><h3 id="2、使用的时候需要手动抛出异常（throw）"><a href="#2、使用的时候需要手动抛出异常（throw）" class="headerlink" title="2、使用的时候需要手动抛出异常（throw）"></a>2、使用的时候需要手动抛出异常（throw）</h3><p>语法格式：<code>throw + 异常类的对象</code></p><h2 id="10、异常与方法覆盖"><a href="#10、异常与方法覆盖" class="headerlink" title="10、异常与方法覆盖"></a>10、异常与方法覆盖</h2><p><strong>在方法覆盖时</strong>，<a href="https://so.csdn.net/so/search?q=%E9%87%8D%E5%86%99&spm=1001.2101.3001.7020">重写</a>之后的方法<strong>不能</strong>比重写之前的方法<strong>抛出更多（更宽泛）的异常</strong>，可以<strong>更少（更小）的异常</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSome</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doOther</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>&#123;<br><br>    <span class="hljs-comment">//编译错误</span><br>    <span class="hljs-comment">/*public void doSome throws Exception() &#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    &#125;*/</span><br><br>    <span class="hljs-comment">//编译正常</span><br>    <span class="hljs-comment">/* public void doOther()&#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    &#125;*/</span><br><br>    <span class="hljs-comment">//编译正常</span><br><span class="hljs-comment">/*    public void doOther() throws Exception &#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    &#125;*/</span><br><br>    <span class="hljs-comment">//编译正常</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doOther</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NullPointerException&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="十、反射机制"><a href="#十、反射机制" class="headerlink" title="十、反射机制"></a>十、反射机制</h1><h2 id="1、Java之反射机制详解"><a href="#1、Java之反射机制详解" class="headerlink" title="1、Java之反射机制详解"></a>1、Java之反射机制详解</h2><h3 id="1、反射机制"><a href="#1、反射机制" class="headerlink" title="1、反射机制"></a>1、反射机制</h3><p>反射机制在<code>java.lang.reflect.*</code>包下<br>反射机制相关的重要的类有</p><ul><li><code>java.lang.Class</code>：代表字节码文件，代表一个类型，代表整个类。</li><li><code>java.lang.reflect.Method</code>：代表字节码中的方法字节码。代表类中的方法。</li><li><code>java.lang.reflect.Constructor</code>：代表字节码中的构造方法字节码。代表类中的构造方法</li><li><code>java.lang.reflect.Field</code>：代表字节码中的属性字节码。代表类中的成员变量（局部变量）</li></ul><h3 id="2、反射机制有什么用"><a href="#2、反射机制有什么用" class="headerlink" title="2、反射机制有什么用"></a>2、反射机制有什么用</h3><p>通过java语言中的反射机制可以<strong>操作字节码文件</strong>。有点类似于黑客（可以读和修改字节码文件。）通过反射机制可以操作代码片段。（class文件）让<strong>程序更加灵活</strong>。</p><h3 id="3、获取Class文件的三种方式"><a href="#3、获取Class文件的三种方式" class="headerlink" title="3、获取Class文件的三种方式"></a>3、获取Class文件的三种方式</h3><h4 id="1、Class-forName"><a href="#1、Class-forName" class="headerlink" title="1、Class.forName()"></a>1、Class.forName()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReflectTest01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>    <span class="hljs-comment">/*        Class.forName()</span><br><span class="hljs-comment">                1、静态方法</span><br><span class="hljs-comment">                2、方法的参数是一个字符串</span><br><span class="hljs-comment">                3、字符串需要的是一个完整的类名</span><br><span class="hljs-comment">                4、完整类名必须带有包名。java.lang包也不能省略*/</span><br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.String&quot;</span>);<span class="hljs-comment">//c1代表的是String.class文件，或者说c1代表String类型</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.util.Date&quot;</span>);<span class="hljs-comment">//c2代表Date类型</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c3</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.Integer&quot;</span>);<span class="hljs-comment">//c3代表Integer类型</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c4</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.System&quot;</span>);<span class="hljs-comment">//c4代表System类型&#125;</span><br>    &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>如果只希望一个类的静态代码块执行，<strong>其他代码一律不执行</strong>，可以使用：<code>Class.forName(&quot;完整类名&quot;);</code><br>这个方法的执行会导致类加载，<strong>类加载时，静态代码块执行</strong>。</p><h4 id="2、getClass-方法"><a href="#2、getClass-方法" class="headerlink" title="2、getClass()方法"></a>2、getClass()方法</h4><p>java中任何一个对象都有一个方法：<code>getClass()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReflectTest01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>    <span class="hljs-comment">/*        Class.forName()</span><br><span class="hljs-comment">                1、静态方法</span><br><span class="hljs-comment">                2、方法的参数是一个字符串</span><br><span class="hljs-comment">                3、字符串需要的是一个完整的类名</span><br><span class="hljs-comment">                4、完整类名必须带有包名。java.lang包也不能省略*/</span><br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>         c1 = Class.forName(<span class="hljs-string">&quot;java.lang.String&quot;</span>);<span class="hljs-comment">//c1代表的是String.class文件，或者说c1代表String类型</span><br>&#125;<span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br>    <span class="hljs-type">Class</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> s.getClass();<span class="hljs-comment">//x代表String.class字节码文件，x代表String类型</span><br>        System.out.println(c1 == x); <span class="hljs-comment">//true(==判断的是对象的内存地址)</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1f49980318540bf66ab4929bb866aaa6-1741868481337-123.png" alt="在这里插入图片描述"><br><img src="/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/9bec0d038bdaac3005175a5e2888c363-1741868481337-124.png" alt="在这里插入图片描述"></p><h4 id="3、java类型的-class属性"><a href="#3、java类型的-class属性" class="headerlink" title="3、java类型的.class属性"></a>3、java类型的.class属性</h4><p>java语言中任何一种类型，包括基本数据类型，它都有.class属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">z</span> <span class="hljs-operator">=</span> String.class; <span class="hljs-comment">//z代表String类型</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> Date.class;<span class="hljs-comment">//k代表Date类型</span><br></code></pre></td></tr></table></figure><h3 id="4、通过反射实例化对象"><a href="#4、通过反射实例化对象" class="headerlink" title="4、通过反射实例化对象"></a>4、通过反射实例化对象</h3><p>获取.class能干什么？</p><p>通过Class的<code>newInstance()</code>方法来<strong>实例化对象</strong>。<br>注意：<code>newInstance()</code>方法内部实际上调用了<strong>无参数的构造方法</strong>，必须保证无参数构造存在才可以。</p><p><strong>使用反射机制的方式来创建对象：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;无参数的构造方法&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-number">12345</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReflectTest02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//通过反射机制，获取Class，通过Class；来实例化对象</span><br>            <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;User&quot;</span>);<span class="hljs-comment">//c代表User类型</span><br><br>            <span class="hljs-comment">//newInstance() 这个方法会调用User这个类的无参数构造方法，完成对象的创建。</span><br>            <span class="hljs-comment">//重点是:newInstance()调用的是无参构造，必须保证无参构造是存在的！！！！</span><br>            <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> c.newInstance();<br><br>            System.out.println(obj);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (InstantiationException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/13c89595a7098bfcfd349ef6281fb1ac-1741868481337-125.png" alt="在这里插入图片描述"></p><h3 id="5、通过读属性文件实例化对象"><a href="#5、通过读属性文件实例化对象" class="headerlink" title="5、通过读属性文件实例化对象"></a>5、通过读属性文件实例化对象</h3><p>验证反射机制的灵活性。java代码只写一遍，在不改变java源代码的基础之上，可以做到不同对象的实例化。非常之灵活（符合OCP开闭原则：对扩展开放，对修改关闭）</p><p><strong>classinfo.properties文件：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">className = User<br><span class="hljs-number">1</span><br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReflectTest03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//通过IO流读取classinfo.properties文件</span><br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;classinfo.properties&quot;</span>);<br>        <span class="hljs-comment">//创建属性类对象Map</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">pro</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-comment">//加载</span><br>        pro.load(reader);<br>        <span class="hljs-comment">//关闭流</span><br>        reader.close();<br><br>        <span class="hljs-comment">//通过key获取value</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">calssName</span> <span class="hljs-operator">=</span> pro.getProperty(<span class="hljs-string">&quot;className&quot;</span>);<br>        System.out.println(calssName);<br><br>        <span class="hljs-comment">//通过反射机制实例化对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(calssName);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> c.newInstance();<br>        System.out.println(obj);<br>    &#125;<br>&#125;<br><span class="hljs-number">123456789101112131415161718192021222324</span><br></code></pre></td></tr></table></figure><h3 id="6、资源绑定器"><a href="#6、资源绑定器" class="headerlink" title="6、资源绑定器"></a>6、资源绑定器</h3><p><code>java.util</code>包下提供了一个资源绑定器，便于获取配置文件中的内容。使用以下方法的时候，属性配置文件<code>×××.properties</code>必须放到类路径下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ResourceBundle;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//资源绑定器，只能绑定×××.properties文件。并且这个文件必须在src/类路径下。文件扩展名必须是properties</span><br>        <span class="hljs-comment">//并且在写路径的时候，路径的后面扩展名不能写</span><br>        <span class="hljs-type">ResourceBundle</span> <span class="hljs-variable">bundle</span> <span class="hljs-operator">=</span> ResourceBundle.getBundle(<span class="hljs-string">&quot;classinfo3&quot;</span>);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> bundle.getString(<span class="hljs-string">&quot;className&quot;</span>);<br>        System.out.println(className);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7、类加载器"><a href="#7、类加载器" class="headerlink" title="7、类加载器"></a>7、类加载器</h3><h4 id="1、什么是加载器"><a href="#1、什么是加载器" class="headerlink" title="1、什么是加载器"></a>1、什么是加载器</h4><p>专门负责加载类的命令&#x2F;工具。<code>ClassLoader</code></p><h4 id="2、JDK中自带的类加载器"><a href="#2、JDK中自带的类加载器" class="headerlink" title="2、JDK中自带的类加载器"></a>2、JDK中自带的类加载器</h4><ul><li><strong>启动类加载器</strong>：<code>rt.jar</code></li><li><strong>扩展类加载器</strong>：<code>ext/*.jar</code></li><li><strong>应用类加载器</strong>：<code>classpath</code></li></ul><p>假如执行以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br></code></pre></td></tr></table></figure><p>代码在开始执行以前，会将所<strong>需要类全部加载到JVM</strong>当中。</p><p>通过<strong>类加载器加载</strong>，看到以上代码<strong>类加载器</strong>会找<code>string. class</code>文件，找到就加载，那么是怎么进行加载的呢?</p><ul><li>首先通过 <strong>“启动类加载器”</strong> 加载。<br>注意:启动类加载器专门加载: <code>C: \Program Files\Java\jdk1.8.0_ 101\jre\lib\rt.jar</code><br><strong>rt. jar中都是JDK最核心的类库</strong>。</li><li>如果通过 <strong>“启动类加载器”加载不到</strong> 的时候,会通过 <strong>“扩展类加载器”</strong> 加载。<br>注意:扩展类加载器专门加载: <code>C: \Program Files\Java\jdk1.8.0_ 101\jre\lib\ext\*.jar</code></li><li>如果 <strong>“扩展类加载器”</strong> 没有加载到，那么会通过 <strong>“应用类加载器”</strong> 加载。<br>注意：应用类加载器专门加载：<code>classpath</code>中的类。</li></ul><h4 id="3、双亲委派机制"><a href="#3、双亲委派机制" class="headerlink" title="3、双亲委派机制"></a>3、双亲委派机制</h4><p>java中为了保证类加载的安全，使用了<strong>双亲委派机制</strong>。<strong>优先从启动类加载器</strong>中加载，这个称为 <strong>“父”</strong>，”父”无法加载到，再从<strong>扩展类加载器</strong>中加载，这个称为**“母”<strong>。双亲委派。*<em>如果都加载不到*</em>，才会考虑从**应用类加载器</strong>中加载。直到加载到为止。</p><h3 id="8、Field"><a href="#8、Field" class="headerlink" title="8、Field"></a>8、Field</h3><h4 id="1、获取Field"><a href="#1、获取Field" class="headerlink" title="1、获取Field"></a>1、获取Field</h4><p>反射属性Field，Field翻译为字段，其实就是属性&#x2F;成员。<br>4个Field，分别采用了不同的访问控制权限修饰符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-comment">//4个Field，分别采用了不同的访问控制权限修饰符</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> no;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-type">boolean</span> sex;<br>&#125;<br><span class="hljs-number">1234567</span><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Modifier;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReflectTest05</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//获取整个类</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">studentClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;Student&quot;</span>);<br>        <span class="hljs-comment">//获取类中所有的public修饰的Field</span><br>        Field[] fields = studentClass.getFields();<br>        System.out.println(fields.length);<br>        <span class="hljs-comment">//取出这个Field的名</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> fields[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fieldName</span> <span class="hljs-operator">=</span> f.getName();<br>        System.out.println(fieldName);<br><br>        <span class="hljs-comment">//获取所有的Field</span><br>        Field[] fields1 = studentClass.getDeclaredFields();<br>        System.out.println(fields1.length);<br><br>        <span class="hljs-keyword">for</span> (Field field : fields1) &#123;<br>            <span class="hljs-comment">//获取属性的修饰符</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> field.getModifiers();<span class="hljs-comment">//返回的修饰符是一个数字，每个数字都是修饰符的代号</span><br>            System.out.println(i);<br>            <span class="hljs-comment">//将代号转化为字符串</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">modifiersString</span> <span class="hljs-operator">=</span> Modifier.toString(i);<br>            System.out.println(modifiersString);<br>            <span class="hljs-comment">//获取属性的类型</span><br>            <span class="hljs-type">Class</span> <span class="hljs-variable">fieldType</span> <span class="hljs-operator">=</span> field.getType();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">fName</span> <span class="hljs-operator">=</span> fieldType.getName();<br>            System.out.println(fName);<br>            <span class="hljs-comment">//获取属性的名字</span><br>            System.out.println(field.getName());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/cd93096d74eda4beb824b28e4d6c0e57-1741868481337-126.png" alt="在这里插入图片描述"></p><h4 id="2、反编译Field"><a href="#2、反编译Field" class="headerlink" title="2、反编译Field"></a>2、反编译Field</h4><p>通过反射机制，反编译一个类的属性Field</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Modifier;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReflectTese06</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//创建这个是为为了拼接字符串。</span><br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">studentClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;Student&quot;</span>);<br><br>        s.append(Modifier.toString(studentClass.getModifiers())+ <span class="hljs-string">&quot; class &quot;</span>+ studentClass.getSimpleName() + <span class="hljs-string">&quot;Student&#123;\n&quot;</span>);<br><br>        Field[] fields = studentClass.getDeclaredFields();<br><br>        <span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>            s.append(<span class="hljs-string">&quot;\t&quot;</span>);<br>            s.append(Modifier.toString(field.getModifiers()));<br>            s.append(<span class="hljs-string">&quot; &quot;</span>);<br>            s.append(field.getType().getSimpleName());<br>            s.append(<span class="hljs-string">&quot; &quot;</span>);<br>            s.append(field.getName());<br>            s.append(<span class="hljs-string">&quot;;\n&quot;</span>);<br>        &#125;<br>        s.append(<span class="hljs-string">&quot;&#125;&quot;</span>);<br>        System.out.println(s);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>运行结果：</strong><br><img src="/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/8f3513c481fa78c94ac677ba0ffe9a03-1741868481337-127.png" alt="在这里插入图片描述"></p><h4 id="3、通过反射机制访问java对象属性（重点掌握）"><a href="#3、通过反射机制访问java对象属性（重点掌握）" class="headerlink" title="3、通过反射机制访问java对象属性（重点掌握）"></a>3、通过反射机制访问java对象属性（重点掌握）</h4><p>给属性赋值set<br>获取属性的值get</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReflectTest07</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//不使用反射机制怎样访问一个对象的属性</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br><br>        <span class="hljs-comment">//给属性赋值</span><br>        s.no = <span class="hljs-number">1111</span>;<br><br>        <span class="hljs-comment">//读属性值</span><br>        System.out.println(s.no);<br><br>        <span class="hljs-comment">//使用反射机制，访问一个对象的属性</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">studentClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;Student&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> studentClass.newInstance();<span class="hljs-comment">//obj就是Student对象。（底层调用无参数构造方法）</span><br><br>        <span class="hljs-comment">//获取no属性(根据属性的名称来获取Field)</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">noField</span> <span class="hljs-operator">=</span> studentClass.getDeclaredField(<span class="hljs-string">&quot;no&quot;</span>);<br><br>        <span class="hljs-comment">//给obj对象（student对象）的no属性赋值</span><br>        <span class="hljs-comment">/*虽然使用了反射机制，但是三要素还是缺一不可：</span><br><span class="hljs-comment">            要素1：obj对象。</span><br><span class="hljs-comment">            要素2：no属性；</span><br><span class="hljs-comment">            要素3:2222值。</span><br><span class="hljs-comment">         注意：反射机制让代码复杂了，但是为了一个“灵活”，这也是值得的。</span><br><span class="hljs-comment">        */</span><br>        noField.set(obj,<span class="hljs-number">2222</span>);<span class="hljs-comment">//给obj对象的no属性赋值2222</span><br><br>        <span class="hljs-comment">//读取属性的值</span><br>        <span class="hljs-comment">//两个要素：获取obj对象的no属性的值。</span><br>        System.out.println(noField.get(obj));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/a6fd428345e5319643b9bbff88f1431a-1741868481337-128.png" alt="在这里插入图片描述"></p><h3 id="9、Method"><a href="#9、Method" class="headerlink" title="9、Method"></a>9、Method</h3><h4 id="1、可变长度参数"><a href="#1、可变长度参数" class="headerlink" title="1、可变长度参数"></a>1、可变长度参数</h4><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lasso">int<span class="hljs-params">...</span> args<span class="hljs-string">`这就是可变长度参数</span><br><span class="hljs-string">语法是：`</span>类型<span class="hljs-params">...</span> (注意：一定是<span class="hljs-number">3</span>个点)<br></code></pre></td></tr></table></figure><ul><li>1、可变长度参数要求的<strong>参数个数</strong>是：<strong>0~N个</strong>。</li><li>2、可变长度参数在参数列表中必须在<strong>最后一个位置</strong>上，而且可变长度参数<strong>只能有一个。</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArgsTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        m();<br>        m(<span class="hljs-number">10</span>);<br>        m(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>);<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m</span><span class="hljs-params">(<span class="hljs-type">int</span>... args)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;m方法执行了！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：<br><img src="/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/c161dce245d0791f4d5d5cffacf3cae3-1741868481337-129.png" alt="在这里插入图片描述"></p><h4 id="2、反射Method"><a href="#2、反射Method" class="headerlink" title="2、反射Method"></a>2、反射Method</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> id;<br><span class="hljs-keyword">private</span> String name;<br>String address;<br><span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> sno;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(<span class="hljs-type">int</span> id, String name, String address, <span class="hljs-type">int</span> sno)</span> &#123;<br><span class="hljs-built_in">super</span>();<br><span class="hljs-built_in">this</span>.id = id;<br><span class="hljs-built_in">this</span>.name = name;<br><span class="hljs-built_in">this</span>.address = address;<br><span class="hljs-built_in">this</span>.sno = sno;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">study</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;study...&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">(<span class="hljs-type">int</span> a,String b)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;eat...&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Modifier;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">// 获取类</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">usrClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.lzj.reflect.pojo.User&quot;</span>);<br><br>        <span class="hljs-comment">// 获取所有的Method（包括私有）</span><br>        Method[] methods = usrClass.getDeclaredMethods();<br>        <br>        <span class="hljs-comment">// 遍历Method</span><br>        <span class="hljs-keyword">for</span>(Method method : methods)&#123;<br>            <span class="hljs-comment">// 获取修饰符列表</span><br>            System.out.println(Modifier.toString(method.getModifiers()));<br>            <span class="hljs-comment">// 获取方法的返回值类型</span><br>            System.out.println(method.getReturnType().getSimpleName());<br>            <span class="hljs-comment">// 获取方法名</span><br>            System.out.println(method.getName());<br>            <span class="hljs-comment">// 方法的修饰符列表（一个方法的参数可能会有多个）</span><br>            Class[] parameterTypes = method.getParameterTypes();<br>            <span class="hljs-keyword">for</span>(Class parameterType : parameterTypes)&#123;<br>                System.out.println(parameterType.getSimpleName());<br>            &#125;<br>        &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、反编译Method"><a href="#3、反编译Method" class="headerlink" title="3、反编译Method"></a>3、反编译Method</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Modifier;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">userClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.lzj.reflect.pojo.User&quot;</span>);<br>        s.append(Modifier.toString(userClass.getModifiers()) + <span class="hljs-string">&quot; class &quot;</span>+userClass.getSimpleName()+<span class="hljs-string">&quot; &#123;\n&quot;</span>);<br><br>        Method[] methods = userClass.getDeclaredMethods();<br>        <span class="hljs-keyword">for</span>(Method method : methods)&#123;<br>        <br>            s.append(<span class="hljs-string">&quot;\t&quot;</span>);<br>            s.append(Modifier.toString(method.getModifiers()));<br>            s.append(<span class="hljs-string">&quot; &quot;</span>);<br>            s.append(method.getReturnType().getSimpleName());<br>            s.append(<span class="hljs-string">&quot; &quot;</span>);<br>            s.append(method.getName());<br>            s.append(<span class="hljs-string">&quot;(&quot;</span>);<br>            <br>            Class[] parameterTypes = method.getParameterTypes();<br>            <span class="hljs-keyword">for</span>(Class parameterType : parameterTypes)&#123;<br>                s.append(parameterType.getSimpleName());<br>                s.append(<span class="hljs-string">&quot;,&quot;</span>);<br>            &#125;<br>            <br>            <span class="hljs-keyword">if</span>(parameterTypes.length &gt; <span class="hljs-number">0</span>) &#123;<br>            s.deleteCharAt(s.length() - <span class="hljs-number">1</span>);<br>            &#125;<br>            <br>            s.append(<span class="hljs-string">&quot;)&#123;&#125;\n&quot;</span>);<br>        &#125;<br>        s.append(<span class="hljs-string">&quot;&#125;&quot;</span>);<br>        System.out.println(s);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、通过反射机制调用方法（重点掌握）"><a href="#4、通过反射机制调用方法（重点掌握）" class="headerlink" title="4、通过反射机制调用方法（重点掌握）"></a>4、通过反射机制调用方法（重点掌握）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class&lt;?&gt; clazz = Class.forName(<span class="hljs-string">&quot;com.lgz.Test&quot;</span>);<br>            <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> clazz.getMethod(<span class="hljs-string">&quot;run&quot;</span>);<br>            method.invoke(clazz.newInstance());<br><br>            <span class="hljs-type">Method</span> <span class="hljs-variable">methodPrivate</span> <span class="hljs-operator">=</span> clazz.getDeclaredMethod(<span class="hljs-string">&quot;eat&quot;</span>);<br>            methodPrivate.setAccessible(<span class="hljs-literal">true</span>);<span class="hljs-comment">//调private方法</span><br>            methodPrivate.invoke(clazz.newInstance());<br><br>            <span class="hljs-type">Method</span> <span class="hljs-variable">methodStatic</span> <span class="hljs-operator">=</span> clazz.getMethod(<span class="hljs-string">&quot;work&quot;</span>);<br>            methodStatic.invoke(<span class="hljs-literal">null</span>);<br><br>            <span class="hljs-type">Method</span> <span class="hljs-variable">method1</span> <span class="hljs-operator">=</span> clazz.getMethod(<span class="hljs-string">&quot;speak&quot;</span>, <span class="hljs-type">int</span>.class, String.class);<br>            method1.invoke(clazz.newInstance(), <span class="hljs-number">22</span>, <span class="hljs-string">&quot;小明&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException | NoSuchMethodException | IllegalAccessException | InstantiationException | InvocationTargetException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;work() 方法被调用...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;eat() 方法被调用...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;run() 方法被调用...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">speak</span><span class="hljs-params">(<span class="hljs-type">int</span> age, String name)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;speak() 方法被调用.... age = &quot;</span> + age + <span class="hljs-string">&quot; name= &quot;</span> + name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="10、Constructor"><a href="#10、Constructor" class="headerlink" title="10、Constructor"></a>10、Constructor</h3><p>1）<strong>得到某个类所有的构造方法</strong></p><p><code>Constructor[] constructors = Class.forName(&quot;java.lang.String&quot;).getConstructors();</code><br>2）<strong>得到某一个构造方法</strong></p><p><code>Constructor constructor1 = String.class.getConstructor(StringBuffer.class);</code><br>实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> String.class.getConstructor(StringBuffer.class);<br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> (String) constructor.newInstance(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;abc&quot;</span>));<br>System.out.println(str.charAt(<span class="hljs-number">2</span>));<br></code></pre></td></tr></table></figure><p><strong>打印结果：c</strong></p><h3 id="11、获取父类和父接口"><a href="#11、获取父类和父接口" class="headerlink" title="11、获取父类和父接口"></a>11、获取父类和父接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReflectTest08</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//String举例</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">stringClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.String&quot;</span>);<br><br>        <span class="hljs-comment">//获取String的父类</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">superClass</span> <span class="hljs-operator">=</span> stringClass.getSuperclass();<br>        System.out.println(superClass);<br><br>        <span class="hljs-comment">//获取String类实现的所有接口（一个类可以实现多个接口）</span><br>        Class[] interfaces = stringClass.getInterfaces();<br>        <span class="hljs-keyword">for</span> (Class anInterface : interfaces) &#123;<br>            System.out.println(anInterface);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/99609d9e53061862049aa57ce3f8c8a3-1741868481337-130.png" alt="在这里插入图片描述"></p><h1 id="十一、注解"><a href="#十一、注解" class="headerlink" title="十一、注解"></a>十一、注解</h1><h2 id="1、java之注解详解"><a href="#1、java之注解详解" class="headerlink" title="1、java之注解详解"></a>1、java之注解详解</h2><h3 id="1、注解如何定义？怎么用？"><a href="#1、注解如何定义？怎么用？" class="headerlink" title="1、注解如何定义？怎么用？"></a>1、注解如何定义？怎么用？</h3><p><strong>注解，或者说叫做注释类型，英文单词是：Annotation</strong></p><p>注解Annotation是一种<strong>引用数据类型</strong>。编译之后也是生成<code>XXX.class</code>文件。</p><p><strong>自定义注解：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符列表] <span class="hljs-meta">@interface</span> 注解类型名&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>注解怎么使用，用在什么地方？</p><ul><li>第一：注解使用时的语法格式是：<code>@ 注解类型名</code></li><li>第二：注解还可以出现在<strong>类上、属性上、方法上、变量上</strong>等…注解还可以出现在<strong>注解类型</strong>上。</li></ul><p>JDK内置了哪些注释？<br><code>java.lang</code>包下的注释类型：</p><ul><li>掌握：<code>Deprecated</code>，用<code>@Deprecated</code>注释的<strong>程序元素</strong>。不鼓励程序员使用这样的元素，通常是因为它很危险或存在更好的选择。</li><li>掌握：<code>Override</code>，表示一个方法声明打算<strong>重写超类的另一个方法</strong>声明。</li><li>不用掌握：SuppressWarnings，指示应该在注释元素（以及包含在该注释元素中的所有程序元素）中取消显示指定的编译器警告。</li></ul><h3 id="2、自定义注解"><a href="#2、自定义注解" class="headerlink" title="2、自定义注解"></a>2、自定义注解</h3><p>注解以@开头<br>在idea中new一个自定义注解<br><img src="/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/f47fa769ad4cf015e20dc4ec82923aec-1741868481337-131.png" alt="在这里插入图片描述"></p><p>自定义注解的依法格式：</p><p><strong>【修饰符列表】 @interface 注解名称{…}</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> FirstAnnotation &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用注解：@注解名称 如：@Override</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@MyAnnotation</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、Override注解"><a href="#2、Override注解" class="headerlink" title="2、Override注解"></a>2、Override注解</h3><p>关于JDK lang包下的Override注解<br>源代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.SOURCE)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Override &#123;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>@Override</code>只能注解方法。</li><li><code>@Override</code>这个注解是给编译器参考的，和运行阶段没有关系</li><li>凡是java中的方法带有这个注解的，编译器都会进行编译检查，如果这个方法不是重写父类的方法，编译器报错。</li></ul><h3 id="4、元注解"><a href="#4、元注解" class="headerlink" title="4、元注解"></a>4、元注解</h3><h4 id="1、什么是元注解"><a href="#1、什么是元注解" class="headerlink" title="1、什么是元注解?"></a>1、什么是元注解?</h4><p>用来标注”注解类型的”注解”。称为元注解</p><h4 id="2、常见的元注解有哪些"><a href="#2、常见的元注解有哪些" class="headerlink" title="2、常见的元注解有哪些?"></a>2、常见的元注解有哪些?</h4><ul><li>Target</li><li>Retention</li></ul><h4 id="3、关于Target注解"><a href="#3、关于Target注解" class="headerlink" title="3、关于Target注解:"></a>3、关于Target注解:</h4><p>这是一个<strong>元注解</strong>,用来标注”注解类型”的注解”<br>这个Target注解用来标注”被标注的注解”可以出现在哪些位置上<br><code>@Target (ElementType .METHOD)</code>:表示w被标注的注解只能出现在方法上.</p><h4 id="4、关于Retention注解"><a href="#4、关于Retention注解" class="headerlink" title="4、关于Retention注解:"></a>4、关于Retention注解:</h4><p>这是一个<strong>元注解</strong>,用来标注”注解类型”的”注解”<br>这个<code>Retention</code>注解用来标注”被标注的注解”最终<strong>保存在哪里</strong>。</p><p><code>@Retention(RetentionPolicy .SOURCE)</code>:表示该注解只被保留在<strong>java源文件</strong>中。<code>@Retention(RetentionPolicy.CLASS)</code>:表示该注解被保存在<strong>class文件</strong>中<br><code>@Retention(RetentionPolicy.RUNTIME)</code>:表示该注解被保存在class文件中，并且可以</p><h3 id="5、Deprecated注解"><a href="#5、Deprecated注解" class="headerlink" title="5、Deprecated注解"></a>5、Deprecated注解</h3><p>表示已过时的。</p><p><strong>源码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(value=&#123;CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, PARAMETER, TYPE&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Deprecated &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6、使用反射获取注解信息"><a href="#6、使用反射获取注解信息" class="headerlink" title="6、使用反射获取注解信息"></a>6、使用反射获取注解信息</h3><p>需求：创建一个自定义注解，在Person类上及Person的方法上使用注解，在测试类中通过反射获取标注在Person类和方法上的注解信息。</p><p><strong>注意：自定义注解必须用@Retention（RetentionPolicy.RUNTIME）标注，这样自定义注解才能被反射机制读取到。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> PersonInfo &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">age</span><span class="hljs-params">()</span>;<br>    String <span class="hljs-title function_">name</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-number">12345</span><br><span class="hljs-meta">@PersonInfo(age=20,name=&quot;张三&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><br>    <span class="hljs-meta">@PersonInfo(age=30,name=&quot;李四&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;run方法执行了.....&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReflectPersonInfo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;<br>        <span class="hljs-comment">//获取Person类对象</span><br>        Class&lt;?&gt; aClass = Class.forName(<span class="hljs-string">&quot;cn.itcast.annotation.Person&quot;</span>);<br><br>        <span class="hljs-comment">//获取标注在Person类上的@PersonInfo注解信息</span><br>        <span class="hljs-keyword">if</span>(aClass.isAnnotationPresent(PersonInfo.class))&#123;    <span class="hljs-comment">//判断Person类上是否有@PersonInfo注解标注</span><br>            <span class="hljs-comment">//获取注解对象</span><br>            <span class="hljs-type">PersonInfo</span> <span class="hljs-variable">personInfo</span> <span class="hljs-operator">=</span> aClass.getAnnotation(PersonInfo.class);<br><br>            <span class="hljs-comment">//打印标注在Person类上的@PersonInfo注解信息</span><br>            System.out.println(personInfo.age());<br>            System.out.println(personInfo.name());<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;----------------------------&quot;</span>);<br>        <br>        <span class="hljs-comment">//获取标注在Person类的方法上的@Person注解信息</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">eat</span> <span class="hljs-operator">=</span> aClass.getDeclaredMethod(<span class="hljs-string">&quot;eat&quot;</span>);   <span class="hljs-comment">//获取Person类的eat方法对象</span><br>        <span class="hljs-keyword">if</span>(eat.isAnnotationPresent(PersonInfo.class))&#123;        <span class="hljs-comment">//判断Person类的eat方法上是否有@PersonInfo注解标注</span><br>            <span class="hljs-comment">//获取标注在eat方法上的注解对象</span><br>            <span class="hljs-type">PersonInfo</span> <span class="hljs-variable">personInfo</span> <span class="hljs-operator">=</span> eat.getAnnotation(PersonInfo.class);<br><br>            <span class="hljs-comment">//打印标注在Person类中的eat()方法上的注解信息</span><br>            System.out.println(personInfo.name());<br>            System.out.println(personInfo.age());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试结果：<br><img src="/2020/04/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/5dfd822728adedf08667b0186ba60e82-1741868481337-132.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>基础</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
